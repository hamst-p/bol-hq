"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_app_components_BowlCanvas_tsx",{

/***/ "(app-pages-browser)/./app/components/BowlCanvas.tsx":
/*!***************************************!*\
  !*** ./app/components/BowlCanvas.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ BowlCanvas; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_loaders_OBJLoader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/loaders/OBJLoader */ \"(app-pages-browser)/./node_modules/three/examples/jsm/loaders/OBJLoader.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls */ \"(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nfunction BowlCanvas() {\n    _s();\n    const mountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mountRef.current) return;\n        // シーン、カメラ、レンダラーの初期化\n        const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderer({\n            antialias: true\n        });\n        renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n        mountRef.current.appendChild(renderer.domElement);\n        // OrbitControlsの設定\n        const controls = new three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_4__.OrbitControls(camera, renderer.domElement);\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.05;\n        // ライティングの設定\n        const ambientLight = new three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight(0xffffff, 0.5);\n        scene.add(ambientLight);\n        const directionalLight = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xffffff, 1);\n        directionalLight.position.set(0, 0, 10);\n        scene.add(directionalLight);\n        // 3Dモデルのロード\n        const loader = new three_examples_jsm_loaders_OBJLoader__WEBPACK_IMPORTED_MODULE_5__.OBJLoader();\n        loader.load(\"/models/model.obj\", (object)=>{\n            object.traverse((child)=>{\n                if (child instanceof three__WEBPACK_IMPORTED_MODULE_2__.Mesh) {\n                    child.material = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n                        color: \"#53bba5\",\n                        shininess: 10,\n                        specular: 0xaaaaaa\n                    });\n                }\n            });\n            object.scale.set(2.4, 2.4, 2.4);\n            object.position.set(0, -69, 0);\n            scene.add(object);\n        }, (xhr)=>{\n            console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n        }, (error)=>{\n            console.error(\"An error happened:\", error);\n        });\n        // カメラの位置設定\n        camera.position.set(300, 120, 200);\n        camera.lookAt(0, 0, 0);\n        // アニメーションループ\n        const animate = ()=>{\n            requestAnimationFrame(animate);\n            controls.update();\n            renderer.render(scene, camera);\n        };\n        animate();\n        // リサイズハンドラ\n        const handleResize = ()=>{\n            if (!mountRef.current) return;\n            const width = mountRef.current.clientWidth;\n            const height = mountRef.current.clientHeight;\n            renderer.setSize(width, height);\n            camera.aspect = width / height;\n            camera.updateProjectionMatrix();\n        };\n        window.addEventListener(\"resize\", handleResize);\n        // クリーンアップ\n        return ()=>{\n            var _mountRef_current;\n            window.removeEventListener(\"resize\", handleResize);\n            (_mountRef_current = mountRef.current) === null || _mountRef_current === void 0 ? void 0 : _mountRef_current.removeChild(renderer.domElement);\n            controls.dispose();\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mountRef,\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            position: \"relative\",\n            zIndex: 1000\n        }\n    }, void 0, false, {\n        fileName: \"/Users/mp/Codes/bol-hq/app/components/BowlCanvas.tsx\",\n        lineNumber: 96,\n        columnNumber: 5\n    }, this);\n}\n_s(BowlCanvas, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = BowlCanvas;\nvar _c;\n$RefreshReg$(_c, \"BowlCanvas\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL0Jvd2xDYW52YXMudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFFaUQ7QUFDbEI7QUFDa0M7QUFDUztBQUUzRCxTQUFTTTs7SUFDdEIsTUFBTUMsV0FBV0wsNkNBQU1BLENBQWlCO0lBRXhDRCxnREFBU0EsQ0FBQztRQUNSLElBQUksQ0FBQ00sU0FBU0MsT0FBTyxFQUFFO1FBRXZCLG9CQUFvQjtRQUNwQixNQUFNQyxRQUFRLElBQUlOLHdDQUFXO1FBQzdCLE1BQU1RLFNBQVMsSUFBSVIsb0RBQXVCLENBQ3hDLElBQ0FJLFNBQVNDLE9BQU8sQ0FBQ0ssV0FBVyxHQUFHTixTQUFTQyxPQUFPLENBQUNNLFlBQVksRUFDNUQsS0FDQTtRQUVGLE1BQU1DLFdBQVcsSUFBSVosZ0RBQW1CLENBQUM7WUFBRWMsV0FBVztRQUFLO1FBQzNERixTQUFTRyxPQUFPLENBQUNYLFNBQVNDLE9BQU8sQ0FBQ0ssV0FBVyxFQUFFTixTQUFTQyxPQUFPLENBQUNNLFlBQVk7UUFDNUVQLFNBQVNDLE9BQU8sQ0FBQ1csV0FBVyxDQUFDSixTQUFTSyxVQUFVO1FBRWhELG1CQUFtQjtRQUNuQixNQUFNQyxXQUFXLElBQUloQixvRkFBYUEsQ0FBQ00sUUFBUUksU0FBU0ssVUFBVTtRQUM5REMsU0FBU0MsYUFBYSxHQUFHO1FBQ3pCRCxTQUFTRSxhQUFhLEdBQUc7UUFFekIsWUFBWTtRQUNaLE1BQU1DLGVBQWUsSUFBSXJCLCtDQUFrQixDQUFDLFVBQVU7UUFDdERNLE1BQU1pQixHQUFHLENBQUNGO1FBQ1YsTUFBTUcsbUJBQW1CLElBQUl4QixtREFBc0IsQ0FBQyxVQUFVO1FBQzlEd0IsaUJBQWlCRSxRQUFRLENBQUNDLEdBQUcsQ0FBQyxHQUFHLEdBQUc7UUFDcENyQixNQUFNaUIsR0FBRyxDQUFDQztRQUVWLFlBQVk7UUFDWixNQUFNSSxTQUFTLElBQUkzQiwyRUFBU0E7UUFDNUIyQixPQUFPQyxJQUFJLENBQ1QscUJBQ0EsQ0FBQ0M7WUFDQ0EsT0FBT0MsUUFBUSxDQUFDLENBQUNDO2dCQUNmLElBQUlBLGlCQUFpQmhDLHVDQUFVLEVBQUU7b0JBQy9CZ0MsTUFBTUUsUUFBUSxHQUFHLElBQUlsQyxvREFBdUIsQ0FBQzt3QkFDM0NvQyxPQUFPO3dCQUNQQyxXQUFXO3dCQUNYQyxVQUFVO29CQUNaO2dCQUNGO1lBQ0Y7WUFDQVIsT0FBT1MsS0FBSyxDQUFDWixHQUFHLENBQUMsS0FBSyxLQUFLO1lBQzNCRyxPQUFPSixRQUFRLENBQUNDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSTtZQUM1QnJCLE1BQU1pQixHQUFHLENBQUNPO1FBQ1osR0FDQSxDQUFDVTtZQUNDQyxRQUFRQyxHQUFHLENBQUMsSUFBS0MsTUFBTSxHQUFHSCxJQUFJSSxLQUFLLEdBQUcsTUFBTztRQUMvQyxHQUNBLENBQUNDO1lBQ0NKLFFBQVFJLEtBQUssQ0FBQyxzQkFBc0JBO1FBQ3RDO1FBR0YsV0FBVztRQUNYckMsT0FBT2tCLFFBQVEsQ0FBQ0MsR0FBRyxDQUFDLEtBQUssS0FBSztRQUM5Qm5CLE9BQU9zQyxNQUFNLENBQUMsR0FBRyxHQUFHO1FBRXBCLGFBQWE7UUFDYixNQUFNQyxVQUFVO1lBQ2RDLHNCQUFzQkQ7WUFDdEI3QixTQUFTK0IsTUFBTTtZQUNmckMsU0FBU3NDLE1BQU0sQ0FBQzVDLE9BQU9FO1FBQ3pCO1FBQ0F1QztRQUVBLFdBQVc7UUFDWCxNQUFNSSxlQUFlO1lBQ25CLElBQUksQ0FBQy9DLFNBQVNDLE9BQU8sRUFBRTtZQUN2QixNQUFNK0MsUUFBUWhELFNBQVNDLE9BQU8sQ0FBQ0ssV0FBVztZQUMxQyxNQUFNMkMsU0FBU2pELFNBQVNDLE9BQU8sQ0FBQ00sWUFBWTtZQUM1Q0MsU0FBU0csT0FBTyxDQUFDcUMsT0FBT0M7WUFDeEI3QyxPQUFPOEMsTUFBTSxHQUFHRixRQUFRQztZQUN4QjdDLE9BQU8rQyxzQkFBc0I7UUFDL0I7UUFDQUMsT0FBT0MsZ0JBQWdCLENBQUMsVUFBVU47UUFFbEMsVUFBVTtRQUNWLE9BQU87Z0JBRUwvQztZQURBb0QsT0FBT0UsbUJBQW1CLENBQUMsVUFBVVA7YUFDckMvQyxvQkFBQUEsU0FBU0MsT0FBTyxjQUFoQkQsd0NBQUFBLGtCQUFrQnVELFdBQVcsQ0FBQy9DLFNBQVNLLFVBQVU7WUFDakRDLFNBQVMwQyxPQUFPO1FBQ2xCO0lBQ0YsR0FBRyxFQUFFO0lBRUwscUJBQ0UsOERBQUNDO1FBQ0NDLEtBQUsxRDtRQUNMMkQsT0FBTztZQUNMWCxPQUFPO1lBQ1BDLFFBQVE7WUFDUjNCLFVBQVU7WUFDVnNDLFFBQVE7UUFDVjs7Ozs7O0FBR047R0FsR3dCN0Q7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2NvbXBvbmVudHMvQm93bENhbnZhcy50c3g/ZTQ2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IE9CSkxvYWRlciB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9sb2FkZXJzL09CSkxvYWRlcic7XG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL2NvbnRyb2xzL09yYml0Q29udHJvbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCb3dsQ2FudmFzKCkge1xuICBjb25zdCBtb3VudFJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW1vdW50UmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIC8vIOOCt+ODvOODs+OAgeOCq+ODoeODqeOAgeODrOODs+ODgOODqeODvOOBruWIneacn+WMllxuICAgIGNvbnN0IHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgY29uc3QgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKFxuICAgICAgNzUsXG4gICAgICBtb3VudFJlZi5jdXJyZW50LmNsaWVudFdpZHRoIC8gbW91bnRSZWYuY3VycmVudC5jbGllbnRIZWlnaHQsXG4gICAgICAwLjEsXG4gICAgICAxMDAwXG4gICAgKTtcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHsgYW50aWFsaWFzOiB0cnVlIH0pO1xuICAgIHJlbmRlcmVyLnNldFNpemUobW91bnRSZWYuY3VycmVudC5jbGllbnRXaWR0aCwgbW91bnRSZWYuY3VycmVudC5jbGllbnRIZWlnaHQpO1xuICAgIG1vdW50UmVmLmN1cnJlbnQuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cbiAgICAvLyBPcmJpdENvbnRyb2xz44Gu6Kit5a6aXG4gICAgY29uc3QgY29udHJvbHMgPSBuZXcgT3JiaXRDb250cm9scyhjYW1lcmEsIHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuICAgIGNvbnRyb2xzLmVuYWJsZURhbXBpbmcgPSB0cnVlO1xuICAgIGNvbnRyb2xzLmRhbXBpbmdGYWN0b3IgPSAwLjA1O1xuXG4gICAgLy8g44Op44Kk44OG44Kj44Oz44Kw44Gu6Kit5a6aXG4gICAgY29uc3QgYW1iaWVudExpZ2h0ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCgweGZmZmZmZiwgMC41KTtcbiAgICBzY2VuZS5hZGQoYW1iaWVudExpZ2h0KTtcbiAgICBjb25zdCBkaXJlY3Rpb25hbExpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIDEpO1xuICAgIGRpcmVjdGlvbmFsTGlnaHQucG9zaXRpb24uc2V0KDAsIDAsIDEwKTtcbiAgICBzY2VuZS5hZGQoZGlyZWN0aW9uYWxMaWdodCk7XG5cbiAgICAvLyAzROODouODh+ODq+OBruODreODvOODiVxuICAgIGNvbnN0IGxvYWRlciA9IG5ldyBPQkpMb2FkZXIoKTtcbiAgICBsb2FkZXIubG9hZChcbiAgICAgICcvbW9kZWxzL21vZGVsLm9iaicsXG4gICAgICAob2JqZWN0KSA9PiB7XG4gICAgICAgIG9iamVjdC50cmF2ZXJzZSgoY2hpbGQpID0+IHtcbiAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoKSB7XG4gICAgICAgICAgICBjaGlsZC5tYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XG4gICAgICAgICAgICAgIGNvbG9yOiAnIzUzYmJhNScsXG4gICAgICAgICAgICAgIHNoaW5pbmVzczogMTAsXG4gICAgICAgICAgICAgIHNwZWN1bGFyOiAweGFhYWFhYVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgb2JqZWN0LnNjYWxlLnNldCgyLjQsIDIuNCwgMi40KTtcbiAgICAgICAgb2JqZWN0LnBvc2l0aW9uLnNldCgwLCAtNjksIDApO1xuICAgICAgICBzY2VuZS5hZGQob2JqZWN0KTtcbiAgICAgIH0sXG4gICAgICAoeGhyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCh4aHIubG9hZGVkIC8geGhyLnRvdGFsICogMTAwKSArICclIGxvYWRlZCcpO1xuICAgICAgfSxcbiAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBbiBlcnJvciBoYXBwZW5lZDonLCBlcnJvcik7XG4gICAgICB9XG4gICAgKTtcblxuICAgIC8vIOOCq+ODoeODqeOBruS9jee9ruioreWumlxuICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoMzAwLCAxMjAsIDIwMCk7XG4gICAgY2FtZXJhLmxvb2tBdCgwLCAwLCAwKTtcblxuICAgIC8vIOOCouODi+ODoeODvOOCt+ODp+ODs+ODq+ODvOODl1xuICAgIGNvbnN0IGFuaW1hdGUgPSAoKSA9PiB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gICAgICBjb250cm9scy51cGRhdGUoKTtcbiAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbiAgICB9O1xuICAgIGFuaW1hdGUoKTtcblxuICAgIC8vIOODquOCteOCpOOCuuODj+ODs+ODieODqVxuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgIGlmICghbW91bnRSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgICAgY29uc3Qgd2lkdGggPSBtb3VudFJlZi5jdXJyZW50LmNsaWVudFdpZHRoO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gbW91bnRSZWYuY3VycmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICByZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgY2FtZXJhLmFzcGVjdCA9IHdpZHRoIC8gaGVpZ2h0O1xuICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuXG4gICAgLy8g44Kv44Oq44O844Oz44Ki44OD44OXXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgICAgbW91bnRSZWYuY3VycmVudD8ucmVtb3ZlQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XG4gICAgICBjb250cm9scy5kaXNwb3NlKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgcmVmPXttb3VudFJlZn1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgekluZGV4OiAxMDAwLFxuICAgICAgfX1cbiAgICAvPlxuICApO1xufSAiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJUSFJFRSIsIk9CSkxvYWRlciIsIk9yYml0Q29udHJvbHMiLCJCb3dsQ2FudmFzIiwibW91bnRSZWYiLCJjdXJyZW50Iiwic2NlbmUiLCJTY2VuZSIsImNhbWVyYSIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJyZW5kZXJlciIsIldlYkdMUmVuZGVyZXIiLCJhbnRpYWxpYXMiLCJzZXRTaXplIiwiYXBwZW5kQ2hpbGQiLCJkb21FbGVtZW50IiwiY29udHJvbHMiLCJlbmFibGVEYW1waW5nIiwiZGFtcGluZ0ZhY3RvciIsImFtYmllbnRMaWdodCIsIkFtYmllbnRMaWdodCIsImFkZCIsImRpcmVjdGlvbmFsTGlnaHQiLCJEaXJlY3Rpb25hbExpZ2h0IiwicG9zaXRpb24iLCJzZXQiLCJsb2FkZXIiLCJsb2FkIiwib2JqZWN0IiwidHJhdmVyc2UiLCJjaGlsZCIsIk1lc2giLCJtYXRlcmlhbCIsIk1lc2hQaG9uZ01hdGVyaWFsIiwiY29sb3IiLCJzaGluaW5lc3MiLCJzcGVjdWxhciIsInNjYWxlIiwieGhyIiwiY29uc29sZSIsImxvZyIsImxvYWRlZCIsInRvdGFsIiwiZXJyb3IiLCJsb29rQXQiLCJhbmltYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidXBkYXRlIiwicmVuZGVyIiwiaGFuZGxlUmVzaXplIiwid2lkdGgiLCJoZWlnaHQiLCJhc3BlY3QiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsImRpc3Bvc2UiLCJkaXYiLCJyZWYiLCJzdHlsZSIsInpJbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/BowlCanvas.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js":
/*!*******************************************************************!*\
  !*** ./node_modules/three/examples/jsm/controls/OrbitControls.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrbitControls: function() { return /* binding */ OrbitControls; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.core.js\");\n\n/**\n * Fires when the camera has been transformed by the controls.\n *\n * @event OrbitControls#change\n * @type {Object}\n */ const _changeEvent = {\n    type: \"change\"\n};\n/**\n * Fires when an interaction was initiated.\n *\n * @event OrbitControls#start\n * @type {Object}\n */ const _startEvent = {\n    type: \"start\"\n};\n/**\n * Fires when an interaction has finished.\n *\n * @event OrbitControls#end\n * @type {Object}\n */ const _endEvent = {\n    type: \"end\"\n};\nconst _ray = new three__WEBPACK_IMPORTED_MODULE_0__.Ray();\nconst _plane = new three__WEBPACK_IMPORTED_MODULE_0__.Plane();\nconst _TILT_LIMIT = Math.cos(70 * three__WEBPACK_IMPORTED_MODULE_0__.MathUtils.DEG2RAD);\nconst _v = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _twoPI = 2 * Math.PI;\nconst _STATE = {\n    NONE: -1,\n    ROTATE: 0,\n    DOLLY: 1,\n    PAN: 2,\n    TOUCH_ROTATE: 3,\n    TOUCH_PAN: 4,\n    TOUCH_DOLLY_PAN: 5,\n    TOUCH_DOLLY_ROTATE: 6\n};\nconst _EPS = 0.000001;\n/**\n * Orbit controls allow the camera to orbit around a target.\n *\n * OrbitControls performs orbiting, dollying (zooming), and panning. Unlike {@link TrackballControls},\n * it maintains the \"up\" direction `object.up` (+Y by default).\n *\n * - Orbit: Left mouse / touch: one-finger move.\n * - Zoom: Middle mouse, or mousewheel / touch: two-finger spread or squish.\n * - Pan: Right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move.\n *\n * ```js\n * const controls = new OrbitControls( camera, renderer.domElement );\n *\n * // controls.update() must be called after any manual changes to the camera's transform\n * camera.position.set( 0, 20, 100 );\n * controls.update();\n *\n * function animate() {\n *\n * \t// required if controls.enableDamping or controls.autoRotate are set to true\n * \tcontrols.update();\n *\n * \trenderer.render( scene, camera );\n *\n * }\n * ```\n *\n * @augments Controls\n * @three_import import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\n */ class OrbitControls extends three__WEBPACK_IMPORTED_MODULE_0__.Controls {\n    connect(element) {\n        super.connect(element);\n        this.domElement.addEventListener(\"pointerdown\", this._onPointerDown);\n        this.domElement.addEventListener(\"pointercancel\", this._onPointerUp);\n        this.domElement.addEventListener(\"contextmenu\", this._onContextMenu);\n        this.domElement.addEventListener(\"wheel\", this._onMouseWheel, {\n            passive: false\n        });\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.addEventListener(\"keydown\", this._interceptControlDown, {\n            passive: true,\n            capture: true\n        });\n        this.domElement.style.touchAction = \"none\"; // disable touch scroll\n    }\n    disconnect() {\n        this.domElement.removeEventListener(\"pointerdown\", this._onPointerDown);\n        this.domElement.removeEventListener(\"pointermove\", this._onPointerMove);\n        this.domElement.removeEventListener(\"pointerup\", this._onPointerUp);\n        this.domElement.removeEventListener(\"pointercancel\", this._onPointerUp);\n        this.domElement.removeEventListener(\"wheel\", this._onMouseWheel);\n        this.domElement.removeEventListener(\"contextmenu\", this._onContextMenu);\n        this.stopListenToKeyEvents();\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.removeEventListener(\"keydown\", this._interceptControlDown, {\n            capture: true\n        });\n        this.domElement.style.touchAction = \"auto\";\n    }\n    dispose() {\n        this.disconnect();\n    }\n    /**\n\t * Get the current vertical rotation, in radians.\n\t *\n\t * @return {number} The current vertical rotation, in radians.\n\t */ getPolarAngle() {\n        return this._spherical.phi;\n    }\n    /**\n\t * Get the current horizontal rotation, in radians.\n\t *\n\t * @return {number} The current horizontal rotation, in radians.\n\t */ getAzimuthalAngle() {\n        return this._spherical.theta;\n    }\n    /**\n\t * Returns the distance from the camera to the target.\n\t *\n\t * @return {number} The distance from the camera to the target.\n\t */ getDistance() {\n        return this.object.position.distanceTo(this.target);\n    }\n    /**\n\t * Adds key event listeners to the given DOM element.\n\t * `window` is a recommended argument for using this method.\n\t *\n\t * @param {HTMLDOMElement} domElement - The DOM element\n\t */ listenToKeyEvents(domElement) {\n        domElement.addEventListener(\"keydown\", this._onKeyDown);\n        this._domElementKeyEvents = domElement;\n    }\n    /**\n\t * Removes the key event listener previously defined with `listenToKeyEvents()`.\n\t */ stopListenToKeyEvents() {\n        if (this._domElementKeyEvents !== null) {\n            this._domElementKeyEvents.removeEventListener(\"keydown\", this._onKeyDown);\n            this._domElementKeyEvents = null;\n        }\n    }\n    /**\n\t * Save the current state of the controls. This can later be recovered with `reset()`.\n\t */ saveState() {\n        this.target0.copy(this.target);\n        this.position0.copy(this.object.position);\n        this.zoom0 = this.object.zoom;\n    }\n    /**\n\t * Reset the controls to their state from either the last time the `saveState()`\n\t * was called, or the initial state.\n\t */ reset() {\n        this.target.copy(this.target0);\n        this.object.position.copy(this.position0);\n        this.object.zoom = this.zoom0;\n        this.object.updateProjectionMatrix();\n        this.dispatchEvent(_changeEvent);\n        this.update();\n        this.state = _STATE.NONE;\n    }\n    update() {\n        let deltaTime = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        const position = this.object.position;\n        _v.copy(position).sub(this.target);\n        // rotate offset to \"y-axis-is-up\" space\n        _v.applyQuaternion(this._quat);\n        // angle from z-axis around y-axis\n        this._spherical.setFromVector3(_v);\n        if (this.autoRotate && this.state === _STATE.NONE) {\n            this._rotateLeft(this._getAutoRotationAngle(deltaTime));\n        }\n        if (this.enableDamping) {\n            this._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;\n            this._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;\n        } else {\n            this._spherical.theta += this._sphericalDelta.theta;\n            this._spherical.phi += this._sphericalDelta.phi;\n        }\n        // restrict theta to be between desired limits\n        let min = this.minAzimuthAngle;\n        let max = this.maxAzimuthAngle;\n        if (isFinite(min) && isFinite(max)) {\n            if (min < -Math.PI) min += _twoPI;\n            else if (min > Math.PI) min -= _twoPI;\n            if (max < -Math.PI) max += _twoPI;\n            else if (max > Math.PI) max -= _twoPI;\n            if (min <= max) {\n                this._spherical.theta = Math.max(min, Math.min(max, this._spherical.theta));\n            } else {\n                this._spherical.theta = this._spherical.theta > (min + max) / 2 ? Math.max(min, this._spherical.theta) : Math.min(max, this._spherical.theta);\n            }\n        }\n        // restrict phi to be between desired limits\n        this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));\n        this._spherical.makeSafe();\n        // move target to panned location\n        if (this.enableDamping === true) {\n            this.target.addScaledVector(this._panOffset, this.dampingFactor);\n        } else {\n            this.target.add(this._panOffset);\n        }\n        // Limit the target distance from the cursor to create a sphere around the center of interest\n        this.target.sub(this.cursor);\n        this.target.clampLength(this.minTargetRadius, this.maxTargetRadius);\n        this.target.add(this.cursor);\n        let zoomChanged = false;\n        // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n        // we adjust zoom later in these cases\n        if (this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera) {\n            this._spherical.radius = this._clampDistance(this._spherical.radius);\n        } else {\n            const prevRadius = this._spherical.radius;\n            this._spherical.radius = this._clampDistance(this._spherical.radius * this._scale);\n            zoomChanged = prevRadius != this._spherical.radius;\n        }\n        _v.setFromSpherical(this._spherical);\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        _v.applyQuaternion(this._quatInverse);\n        position.copy(this.target).add(_v);\n        this.object.lookAt(this.target);\n        if (this.enableDamping === true) {\n            this._sphericalDelta.theta *= 1 - this.dampingFactor;\n            this._sphericalDelta.phi *= 1 - this.dampingFactor;\n            this._panOffset.multiplyScalar(1 - this.dampingFactor);\n        } else {\n            this._sphericalDelta.set(0, 0, 0);\n            this._panOffset.set(0, 0, 0);\n        }\n        // adjust camera position\n        if (this.zoomToCursor && this._performCursorZoom) {\n            let newRadius = null;\n            if (this.object.isPerspectiveCamera) {\n                // move the camera down the pointer ray\n                // this method avoids floating point error\n                const prevRadius = _v.length();\n                newRadius = this._clampDistance(prevRadius * this._scale);\n                const radiusDelta = prevRadius - newRadius;\n                this.object.position.addScaledVector(this._dollyDirection, radiusDelta);\n                this.object.updateMatrixWorld();\n                zoomChanged = !!radiusDelta;\n            } else if (this.object.isOrthographicCamera) {\n                // adjust the ortho camera position based on zoom changes\n                const mouseBefore = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(this._mouse.x, this._mouse.y, 0);\n                mouseBefore.unproject(this.object);\n                const prevZoom = this.object.zoom;\n                this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n                this.object.updateProjectionMatrix();\n                zoomChanged = prevZoom !== this.object.zoom;\n                const mouseAfter = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(this._mouse.x, this._mouse.y, 0);\n                mouseAfter.unproject(this.object);\n                this.object.position.sub(mouseAfter).add(mouseBefore);\n                this.object.updateMatrixWorld();\n                newRadius = _v.length();\n            } else {\n                console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.\");\n                this.zoomToCursor = false;\n            }\n            // handle the placement of the target\n            if (newRadius !== null) {\n                if (this.screenSpacePanning) {\n                    // position the orbit target in front of the new camera position\n                    this.target.set(0, 0, -1).transformDirection(this.object.matrix).multiplyScalar(newRadius).add(this.object.position);\n                } else {\n                    // get the ray and translation plane to compute target\n                    _ray.origin.copy(this.object.position);\n                    _ray.direction.set(0, 0, -1).transformDirection(this.object.matrix);\n                    // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                    // extremely large values\n                    if (Math.abs(this.object.up.dot(_ray.direction)) < _TILT_LIMIT) {\n                        this.object.lookAt(this.target);\n                    } else {\n                        _plane.setFromNormalAndCoplanarPoint(this.object.up, this.target);\n                        _ray.intersectPlane(_plane, this.target);\n                    }\n                }\n            }\n        } else if (this.object.isOrthographicCamera) {\n            const prevZoom = this.object.zoom;\n            this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n            if (prevZoom !== this.object.zoom) {\n                this.object.updateProjectionMatrix();\n                zoomChanged = true;\n            }\n        }\n        this._scale = 1;\n        this._performCursorZoom = false;\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n        if (zoomChanged || this._lastPosition.distanceToSquared(this.object.position) > _EPS || 8 * (1 - this._lastQuaternion.dot(this.object.quaternion)) > _EPS || this._lastTargetPosition.distanceToSquared(this.target) > _EPS) {\n            this.dispatchEvent(_changeEvent);\n            this._lastPosition.copy(this.object.position);\n            this._lastQuaternion.copy(this.object.quaternion);\n            this._lastTargetPosition.copy(this.target);\n            return true;\n        }\n        return false;\n    }\n    _getAutoRotationAngle(deltaTime) {\n        if (deltaTime !== null) {\n            return _twoPI / 60 * this.autoRotateSpeed * deltaTime;\n        } else {\n            return _twoPI / 60 / 60 * this.autoRotateSpeed;\n        }\n    }\n    _getZoomScale(delta) {\n        const normalizedDelta = Math.abs(delta * 0.01);\n        return Math.pow(0.95, this.zoomSpeed * normalizedDelta);\n    }\n    _rotateLeft(angle) {\n        this._sphericalDelta.theta -= angle;\n    }\n    _rotateUp(angle) {\n        this._sphericalDelta.phi -= angle;\n    }\n    _panLeft(distance, objectMatrix) {\n        _v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n        _v.multiplyScalar(-distance);\n        this._panOffset.add(_v);\n    }\n    _panUp(distance, objectMatrix) {\n        if (this.screenSpacePanning === true) {\n            _v.setFromMatrixColumn(objectMatrix, 1);\n        } else {\n            _v.setFromMatrixColumn(objectMatrix, 0);\n            _v.crossVectors(this.object.up, _v);\n        }\n        _v.multiplyScalar(distance);\n        this._panOffset.add(_v);\n    }\n    // deltaX and deltaY are in pixels; right and down are positive\n    _pan(deltaX, deltaY) {\n        const element = this.domElement;\n        if (this.object.isPerspectiveCamera) {\n            // perspective\n            const position = this.object.position;\n            _v.copy(position).sub(this.target);\n            let targetDistance = _v.length();\n            // half of the fov is center to top of screen\n            targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180.0);\n            // we use only clientHeight here so aspect ratio does not distort speed\n            this._panLeft(2 * deltaX * targetDistance / element.clientHeight, this.object.matrix);\n            this._panUp(2 * deltaY * targetDistance / element.clientHeight, this.object.matrix);\n        } else if (this.object.isOrthographicCamera) {\n            // orthographic\n            this._panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element.clientWidth, this.object.matrix);\n            this._panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element.clientHeight, this.object.matrix);\n        } else {\n            // camera neither orthographic nor perspective\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\");\n            this.enablePan = false;\n        }\n    }\n    _dollyOut(dollyScale) {\n        if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n            this._scale /= dollyScale;\n        } else {\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n            this.enableZoom = false;\n        }\n    }\n    _dollyIn(dollyScale) {\n        if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n            this._scale *= dollyScale;\n        } else {\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n            this.enableZoom = false;\n        }\n    }\n    _updateZoomParameters(x, y) {\n        if (!this.zoomToCursor) {\n            return;\n        }\n        this._performCursorZoom = true;\n        const rect = this.domElement.getBoundingClientRect();\n        const dx = x - rect.left;\n        const dy = y - rect.top;\n        const w = rect.width;\n        const h = rect.height;\n        this._mouse.x = dx / w * 2 - 1;\n        this._mouse.y = -(dy / h) * 2 + 1;\n        this._dollyDirection.set(this._mouse.x, this._mouse.y, 1).unproject(this.object).sub(this.object.position).normalize();\n    }\n    _clampDistance(dist) {\n        return Math.max(this.minDistance, Math.min(this.maxDistance, dist));\n    }\n    //\n    // event callbacks - update the object state\n    //\n    _handleMouseDownRotate(event) {\n        this._rotateStart.set(event.clientX, event.clientY);\n    }\n    _handleMouseDownDolly(event) {\n        this._updateZoomParameters(event.clientX, event.clientX);\n        this._dollyStart.set(event.clientX, event.clientY);\n    }\n    _handleMouseDownPan(event) {\n        this._panStart.set(event.clientX, event.clientY);\n    }\n    _handleMouseMoveRotate(event) {\n        this._rotateEnd.set(event.clientX, event.clientY);\n        this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n        const element = this.domElement;\n        this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n        this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n        this._rotateStart.copy(this._rotateEnd);\n        this.update();\n    }\n    _handleMouseMoveDolly(event) {\n        this._dollyEnd.set(event.clientX, event.clientY);\n        this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart);\n        if (this._dollyDelta.y > 0) {\n            this._dollyOut(this._getZoomScale(this._dollyDelta.y));\n        } else if (this._dollyDelta.y < 0) {\n            this._dollyIn(this._getZoomScale(this._dollyDelta.y));\n        }\n        this._dollyStart.copy(this._dollyEnd);\n        this.update();\n    }\n    _handleMouseMovePan(event) {\n        this._panEnd.set(event.clientX, event.clientY);\n        this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n        this._pan(this._panDelta.x, this._panDelta.y);\n        this._panStart.copy(this._panEnd);\n        this.update();\n    }\n    _handleMouseWheel(event) {\n        this._updateZoomParameters(event.clientX, event.clientY);\n        if (event.deltaY < 0) {\n            this._dollyIn(this._getZoomScale(event.deltaY));\n        } else if (event.deltaY > 0) {\n            this._dollyOut(this._getZoomScale(event.deltaY));\n        }\n        this.update();\n    }\n    _handleKeyDown(event) {\n        let needsUpdate = false;\n        switch(event.code){\n            case this.keys.UP:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateUp(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(0, this.keyPanSpeed);\n                    }\n                }\n                needsUpdate = true;\n                break;\n            case this.keys.BOTTOM:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateUp(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(0, -this.keyPanSpeed);\n                    }\n                }\n                needsUpdate = true;\n                break;\n            case this.keys.LEFT:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateLeft(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(this.keyPanSpeed, 0);\n                    }\n                }\n                needsUpdate = true;\n                break;\n            case this.keys.RIGHT:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateLeft(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(-this.keyPanSpeed, 0);\n                    }\n                }\n                needsUpdate = true;\n                break;\n        }\n        if (needsUpdate) {\n            // prevent the browser from scrolling on cursor keys\n            event.preventDefault();\n            this.update();\n        }\n    }\n    _handleTouchStartRotate(event) {\n        if (this._pointers.length === 1) {\n            this._rotateStart.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._rotateStart.set(x, y);\n        }\n    }\n    _handleTouchStartPan(event) {\n        if (this._pointers.length === 1) {\n            this._panStart.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._panStart.set(x, y);\n        }\n    }\n    _handleTouchStartDolly(event) {\n        const position = this._getSecondPointerPosition(event);\n        const dx = event.pageX - position.x;\n        const dy = event.pageY - position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        this._dollyStart.set(0, distance);\n    }\n    _handleTouchStartDollyPan(event) {\n        if (this.enableZoom) this._handleTouchStartDolly(event);\n        if (this.enablePan) this._handleTouchStartPan(event);\n    }\n    _handleTouchStartDollyRotate(event) {\n        if (this.enableZoom) this._handleTouchStartDolly(event);\n        if (this.enableRotate) this._handleTouchStartRotate(event);\n    }\n    _handleTouchMoveRotate(event) {\n        if (this._pointers.length == 1) {\n            this._rotateEnd.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._rotateEnd.set(x, y);\n        }\n        this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n        const element = this.domElement;\n        this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n        this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n        this._rotateStart.copy(this._rotateEnd);\n    }\n    _handleTouchMovePan(event) {\n        if (this._pointers.length === 1) {\n            this._panEnd.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._panEnd.set(x, y);\n        }\n        this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n        this._pan(this._panDelta.x, this._panDelta.y);\n        this._panStart.copy(this._panEnd);\n    }\n    _handleTouchMoveDolly(event) {\n        const position = this._getSecondPointerPosition(event);\n        const dx = event.pageX - position.x;\n        const dy = event.pageY - position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        this._dollyEnd.set(0, distance);\n        this._dollyDelta.set(0, Math.pow(this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed));\n        this._dollyOut(this._dollyDelta.y);\n        this._dollyStart.copy(this._dollyEnd);\n        const centerX = (event.pageX + position.x) * 0.5;\n        const centerY = (event.pageY + position.y) * 0.5;\n        this._updateZoomParameters(centerX, centerY);\n    }\n    _handleTouchMoveDollyPan(event) {\n        if (this.enableZoom) this._handleTouchMoveDolly(event);\n        if (this.enablePan) this._handleTouchMovePan(event);\n    }\n    _handleTouchMoveDollyRotate(event) {\n        if (this.enableZoom) this._handleTouchMoveDolly(event);\n        if (this.enableRotate) this._handleTouchMoveRotate(event);\n    }\n    // pointers\n    _addPointer(event) {\n        this._pointers.push(event.pointerId);\n    }\n    _removePointer(event) {\n        delete this._pointerPositions[event.pointerId];\n        for(let i = 0; i < this._pointers.length; i++){\n            if (this._pointers[i] == event.pointerId) {\n                this._pointers.splice(i, 1);\n                return;\n            }\n        }\n    }\n    _isTrackingPointer(event) {\n        for(let i = 0; i < this._pointers.length; i++){\n            if (this._pointers[i] == event.pointerId) return true;\n        }\n        return false;\n    }\n    _trackPointer(event) {\n        let position = this._pointerPositions[event.pointerId];\n        if (position === undefined) {\n            position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n            this._pointerPositions[event.pointerId] = position;\n        }\n        position.set(event.pageX, event.pageY);\n    }\n    _getSecondPointerPosition(event) {\n        const pointerId = event.pointerId === this._pointers[0] ? this._pointers[1] : this._pointers[0];\n        return this._pointerPositions[pointerId];\n    }\n    //\n    _customWheelEvent(event) {\n        const mode = event.deltaMode;\n        // minimal wheel event altered to meet delta-zoom demand\n        const newEvent = {\n            clientX: event.clientX,\n            clientY: event.clientY,\n            deltaY: event.deltaY\n        };\n        switch(mode){\n            case 1:\n                newEvent.deltaY *= 16;\n                break;\n            case 2:\n                newEvent.deltaY *= 100;\n                break;\n        }\n        // detect if event was triggered by pinching\n        if (event.ctrlKey && !this._controlActive) {\n            newEvent.deltaY *= 10;\n        }\n        return newEvent;\n    }\n    /**\n\t * Constructs a new controls instance.\n\t *\n\t * @param {Object3D} object - The object that is managed by the controls.\n\t * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n\t */ constructor(object, domElement = null){\n        super(object, domElement);\n        this.state = _STATE.NONE;\n        /**\n\t\t * The focus point of the controls, the `object` orbits around this.\n\t\t * It can be updated manually at any point to change the focus of the controls.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */ this.target = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        /**\n\t\t * The focus point of the `minTargetRadius` and `maxTargetRadius` limits.\n\t\t * It can be updated manually at any point to change the center of interest\n\t\t * for the `target`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */ this.cursor = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        /**\n\t\t * How far you can dolly in (perspective camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */ this.minDistance = 0;\n        /**\n\t\t * How far you can dolly out (perspective camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */ this.maxDistance = Infinity;\n        /**\n\t\t * How far you can zoom in (orthographic camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */ this.minZoom = 0;\n        /**\n\t\t * How far you can zoom out (orthographic camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */ this.maxZoom = Infinity;\n        /**\n\t\t * How close you can get the target to the 3D `cursor`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */ this.minTargetRadius = 0;\n        /**\n\t\t * How far you can move the target from the 3D `cursor`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */ this.maxTargetRadius = Infinity;\n        /**\n\t\t * How far you can orbit vertically, lower limit. Range is `[0, Math.PI]` radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */ this.minPolarAngle = 0;\n        /**\n\t\t * How far you can orbit vertically, upper limit. Range is `[0, Math.PI]` radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI\n\t\t */ this.maxPolarAngle = Math.PI;\n        /**\n\t\t * How far you can orbit horizontally, lower limit. If set, the interval `[ min, max ]`\n\t\t * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -Infinity\n\t\t */ this.minAzimuthAngle = -Infinity;\n        /**\n\t\t * How far you can orbit horizontally, upper limit. If set, the interval `[ min, max ]`\n\t\t * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -Infinity\n\t\t */ this.maxAzimuthAngle = Infinity;\n        /**\n\t\t * Set to `true` to enable damping (inertia), which can be used to give a sense of weight\n\t\t * to the controls. Note that if this is enabled, you must call `update()` in your animation\n\t\t * loop.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */ this.enableDamping = false;\n        /**\n\t\t * The damping inertia used if `enableDamping` is set to `true`.\n\t\t *\n\t\t * Note that for this to work, you must call `update()` in your animation loop.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.05\n\t\t */ this.dampingFactor = 0.05;\n        /**\n\t\t * Enable or disable zooming (dollying) of the camera.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */ this.enableZoom = true;\n        /**\n\t\t * Speed of zooming / dollying.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */ this.zoomSpeed = 1.0;\n        /**\n\t\t * Enable or disable horizontal and vertical rotation of the camera.\n\t\t *\n\t\t * Note that it is possible to disable a single axis by setting the min and max of the\n\t\t * `minPolarAngle` or `minAzimuthAngle` to the same value, which will cause the vertical\n\t\t * or horizontal rotation to be fixed at that value.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */ this.enableRotate = true;\n        /**\n\t\t * Speed of rotation.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */ this.rotateSpeed = 1.0;\n        /**\n\t\t * How fast to rotate the camera when the keyboard is used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */ this.keyRotateSpeed = 1.0;\n        /**\n\t\t * Enable or disable camera panning.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */ this.enablePan = true;\n        /**\n\t\t * Speed of panning.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */ this.panSpeed = 1.0;\n        /**\n\t\t * Defines how the camera's position is translated when panning. If `true`, the camera pans\n\t\t * in screen space. Otherwise, the camera pans in the plane orthogonal to the camera's up\n\t\t * direction.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */ this.screenSpacePanning = true;\n        /**\n\t\t * How fast to pan the camera when the keyboard is used in\n\t\t * pixels per keypress.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 7\n\t\t */ this.keyPanSpeed = 7.0;\n        /**\n\t\t * Setting this property to `true` allows to zoom to the cursor's position.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */ this.zoomToCursor = false;\n        /**\n\t\t * Set to true to automatically rotate around the target\n\t\t *\n\t\t * Note that if this is enabled, you must call `update()` in your animation loop.\n\t\t * If you want the auto-rotate speed to be independent of the frame rate (the refresh\n\t\t * rate of the display), you must pass the time `deltaTime`, in seconds, to `update()`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */ this.autoRotate = false;\n        /**\n\t\t * How fast to rotate around the target if `autoRotate` is `true`. The default  equates to 30 seconds\n\t\t * per orbit at 60fps.\n\t\t *\n\t\t * Note that if `autoRotate` is enabled, you must call `update()` in your animation loop.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */ this.autoRotateSpeed = 2.0;\n        /**\n\t\t * This object contains references to the keycodes for controlling camera panning.\n\t\t *\n\t\t * ```js\n\t\t * controls.keys = {\n\t\t * \tLEFT: 'ArrowLeft', //left arrow\n\t\t * \tUP: 'ArrowUp', // up arrow\n\t\t * \tRIGHT: 'ArrowRight', // right arrow\n\t\t * \tBOTTOM: 'ArrowDown' // down arrow\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */ this.keys = {\n            LEFT: \"ArrowLeft\",\n            UP: \"ArrowUp\",\n            RIGHT: \"ArrowRight\",\n            BOTTOM: \"ArrowDown\"\n        };\n        /**\n\t\t * This object contains references to the mouse actions used by the controls.\n\t\t *\n\t\t * ```js\n\t\t * controls.mouseButtons = {\n\t\t * \tLEFT: THREE.MOUSE.ROTATE,\n\t\t * \tMIDDLE: THREE.MOUSE.DOLLY,\n\t\t * \tRIGHT: THREE.MOUSE.PAN\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */ this.mouseButtons = {\n            LEFT: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE,\n            MIDDLE: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY,\n            RIGHT: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN\n        };\n        /**\n\t\t * This object contains references to the touch actions used by the controls.\n\t\t *\n\t\t * ```js\n\t\t * controls.mouseButtons = {\n\t\t * \tONE: THREE.TOUCH.ROTATE,\n\t\t * \tTWO: THREE.TOUCH.DOLLY_PAN\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */ this.touches = {\n            ONE: three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE,\n            TWO: three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN\n        };\n        /**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */ this.target0 = this.target.clone();\n        /**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */ this.position0 = this.object.position.clone();\n        /**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {number}\n\t\t */ this.zoom0 = this.object.zoom;\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n        // internals\n        this._lastPosition = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this._lastQuaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();\n        this._lastTargetPosition = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        // so camera.up is the orbit axis\n        this._quat = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion().setFromUnitVectors(object.up, new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0));\n        this._quatInverse = this._quat.clone().invert();\n        // current position in spherical coordinates\n        this._spherical = new three__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n        this._sphericalDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n        this._scale = 1;\n        this._panOffset = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this._rotateStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._rotateEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._rotateDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._panStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._panEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._panDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyDirection = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this._mouse = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._performCursorZoom = false;\n        this._pointers = [];\n        this._pointerPositions = {};\n        this._controlActive = false;\n        // event listeners\n        this._onPointerMove = onPointerMove.bind(this);\n        this._onPointerDown = onPointerDown.bind(this);\n        this._onPointerUp = onPointerUp.bind(this);\n        this._onContextMenu = onContextMenu.bind(this);\n        this._onMouseWheel = onMouseWheel.bind(this);\n        this._onKeyDown = onKeyDown.bind(this);\n        this._onTouchStart = onTouchStart.bind(this);\n        this._onTouchMove = onTouchMove.bind(this);\n        this._onMouseDown = onMouseDown.bind(this);\n        this._onMouseMove = onMouseMove.bind(this);\n        this._interceptControlDown = interceptControlDown.bind(this);\n        this._interceptControlUp = interceptControlUp.bind(this);\n        //\n        if (this.domElement !== null) {\n            this.connect(this.domElement);\n        }\n        this.update();\n    }\n}\nfunction onPointerDown(event) {\n    if (this.enabled === false) return;\n    if (this._pointers.length === 0) {\n        this.domElement.setPointerCapture(event.pointerId);\n        this.domElement.addEventListener(\"pointermove\", this._onPointerMove);\n        this.domElement.addEventListener(\"pointerup\", this._onPointerUp);\n    }\n    //\n    if (this._isTrackingPointer(event)) return;\n    //\n    this._addPointer(event);\n    if (event.pointerType === \"touch\") {\n        this._onTouchStart(event);\n    } else {\n        this._onMouseDown(event);\n    }\n}\nfunction onPointerMove(event) {\n    if (this.enabled === false) return;\n    if (event.pointerType === \"touch\") {\n        this._onTouchMove(event);\n    } else {\n        this._onMouseMove(event);\n    }\n}\nfunction onPointerUp(event) {\n    this._removePointer(event);\n    switch(this._pointers.length){\n        case 0:\n            this.domElement.releasePointerCapture(event.pointerId);\n            this.domElement.removeEventListener(\"pointermove\", this._onPointerMove);\n            this.domElement.removeEventListener(\"pointerup\", this._onPointerUp);\n            this.dispatchEvent(_endEvent);\n            this.state = _STATE.NONE;\n            break;\n        case 1:\n            const pointerId = this._pointers[0];\n            const position = this._pointerPositions[pointerId];\n            // minimal placeholder event - allows state correction on pointer-up\n            this._onTouchStart({\n                pointerId: pointerId,\n                pageX: position.x,\n                pageY: position.y\n            });\n            break;\n    }\n}\nfunction onMouseDown(event) {\n    let mouseAction;\n    switch(event.button){\n        case 0:\n            mouseAction = this.mouseButtons.LEFT;\n            break;\n        case 1:\n            mouseAction = this.mouseButtons.MIDDLE;\n            break;\n        case 2:\n            mouseAction = this.mouseButtons.RIGHT;\n            break;\n        default:\n            mouseAction = -1;\n    }\n    switch(mouseAction){\n        case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY:\n            if (this.enableZoom === false) return;\n            this._handleMouseDownDolly(event);\n            this.state = _STATE.DOLLY;\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE:\n            if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                if (this.enablePan === false) return;\n                this._handleMouseDownPan(event);\n                this.state = _STATE.PAN;\n            } else {\n                if (this.enableRotate === false) return;\n                this._handleMouseDownRotate(event);\n                this.state = _STATE.ROTATE;\n            }\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN:\n            if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                if (this.enableRotate === false) return;\n                this._handleMouseDownRotate(event);\n                this.state = _STATE.ROTATE;\n            } else {\n                if (this.enablePan === false) return;\n                this._handleMouseDownPan(event);\n                this.state = _STATE.PAN;\n            }\n            break;\n        default:\n            this.state = _STATE.NONE;\n    }\n    if (this.state !== _STATE.NONE) {\n        this.dispatchEvent(_startEvent);\n    }\n}\nfunction onMouseMove(event) {\n    switch(this.state){\n        case _STATE.ROTATE:\n            if (this.enableRotate === false) return;\n            this._handleMouseMoveRotate(event);\n            break;\n        case _STATE.DOLLY:\n            if (this.enableZoom === false) return;\n            this._handleMouseMoveDolly(event);\n            break;\n        case _STATE.PAN:\n            if (this.enablePan === false) return;\n            this._handleMouseMovePan(event);\n            break;\n    }\n}\nfunction onMouseWheel(event) {\n    if (this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE) return;\n    event.preventDefault();\n    this.dispatchEvent(_startEvent);\n    this._handleMouseWheel(this._customWheelEvent(event));\n    this.dispatchEvent(_endEvent);\n}\nfunction onKeyDown(event) {\n    if (this.enabled === false) return;\n    this._handleKeyDown(event);\n}\nfunction onTouchStart(event) {\n    this._trackPointer(event);\n    switch(this._pointers.length){\n        case 1:\n            switch(this.touches.ONE){\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE:\n                    if (this.enableRotate === false) return;\n                    this._handleTouchStartRotate(event);\n                    this.state = _STATE.TOUCH_ROTATE;\n                    break;\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.PAN:\n                    if (this.enablePan === false) return;\n                    this._handleTouchStartPan(event);\n                    this.state = _STATE.TOUCH_PAN;\n                    break;\n                default:\n                    this.state = _STATE.NONE;\n            }\n            break;\n        case 2:\n            switch(this.touches.TWO){\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN:\n                    if (this.enableZoom === false && this.enablePan === false) return;\n                    this._handleTouchStartDollyPan(event);\n                    this.state = _STATE.TOUCH_DOLLY_PAN;\n                    break;\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_ROTATE:\n                    if (this.enableZoom === false && this.enableRotate === false) return;\n                    this._handleTouchStartDollyRotate(event);\n                    this.state = _STATE.TOUCH_DOLLY_ROTATE;\n                    break;\n                default:\n                    this.state = _STATE.NONE;\n            }\n            break;\n        default:\n            this.state = _STATE.NONE;\n    }\n    if (this.state !== _STATE.NONE) {\n        this.dispatchEvent(_startEvent);\n    }\n}\nfunction onTouchMove(event) {\n    this._trackPointer(event);\n    switch(this.state){\n        case _STATE.TOUCH_ROTATE:\n            if (this.enableRotate === false) return;\n            this._handleTouchMoveRotate(event);\n            this.update();\n            break;\n        case _STATE.TOUCH_PAN:\n            if (this.enablePan === false) return;\n            this._handleTouchMovePan(event);\n            this.update();\n            break;\n        case _STATE.TOUCH_DOLLY_PAN:\n            if (this.enableZoom === false && this.enablePan === false) return;\n            this._handleTouchMoveDollyPan(event);\n            this.update();\n            break;\n        case _STATE.TOUCH_DOLLY_ROTATE:\n            if (this.enableZoom === false && this.enableRotate === false) return;\n            this._handleTouchMoveDollyRotate(event);\n            this.update();\n            break;\n        default:\n            this.state = _STATE.NONE;\n    }\n}\nfunction onContextMenu(event) {\n    if (this.enabled === false) return;\n    event.preventDefault();\n}\nfunction interceptControlDown(event) {\n    if (event.key === \"Control\") {\n        this._controlActive = true;\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.addEventListener(\"keyup\", this._interceptControlUp, {\n            passive: true,\n            capture: true\n        });\n    }\n}\nfunction interceptControlUp(event) {\n    if (event.key === \"Control\") {\n        this._controlActive = false;\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.removeEventListener(\"keyup\", this._interceptControlUp, {\n            passive: true,\n            capture: true\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9scy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQVdlO0FBRWY7Ozs7O0NBS0MsR0FDRCxNQUFNVSxlQUFlO0lBQUVDLE1BQU07QUFBUztBQUV0Qzs7Ozs7Q0FLQyxHQUNELE1BQU1DLGNBQWM7SUFBRUQsTUFBTTtBQUFRO0FBRXBDOzs7OztDQUtDLEdBQ0QsTUFBTUUsWUFBWTtJQUFFRixNQUFNO0FBQU07QUFFaEMsTUFBTUcsT0FBTyxJQUFJTixzQ0FBR0E7QUFDcEIsTUFBTU8sU0FBUyxJQUFJUix3Q0FBS0E7QUFDeEIsTUFBTVMsY0FBY0MsS0FBS0MsR0FBRyxDQUFFLEtBQUtULDRDQUFTQSxDQUFDVSxPQUFPO0FBRXBELE1BQU1DLEtBQUssSUFBSWQsMENBQU9BO0FBQ3RCLE1BQU1lLFNBQVMsSUFBSUosS0FBS0ssRUFBRTtBQUUxQixNQUFNQyxTQUFTO0lBQ2RDLE1BQU0sQ0FBRTtJQUNSQyxRQUFRO0lBQ1JDLE9BQU87SUFDUEMsS0FBSztJQUNMQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsaUJBQWlCO0lBQ2pCQyxvQkFBb0I7QUFDckI7QUFDQSxNQUFNQyxPQUFPO0FBR2I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNkJDLEdBQ0QsTUFBTUMsc0JBQXNCakMsMkNBQVFBO0lBeVhuQ2tDLFFBQVNDLE9BQU8sRUFBRztRQUVsQixLQUFLLENBQUNELFFBQVNDO1FBRWYsSUFBSSxDQUFDQyxVQUFVLENBQUNDLGdCQUFnQixDQUFFLGVBQWUsSUFBSSxDQUFDQyxjQUFjO1FBQ3BFLElBQUksQ0FBQ0YsVUFBVSxDQUFDQyxnQkFBZ0IsQ0FBRSxpQkFBaUIsSUFBSSxDQUFDRSxZQUFZO1FBRXBFLElBQUksQ0FBQ0gsVUFBVSxDQUFDQyxnQkFBZ0IsQ0FBRSxlQUFlLElBQUksQ0FBQ0csY0FBYztRQUNwRSxJQUFJLENBQUNKLFVBQVUsQ0FBQ0MsZ0JBQWdCLENBQUUsU0FBUyxJQUFJLENBQUNJLGFBQWEsRUFBRTtZQUFFQyxTQUFTO1FBQU07UUFFaEYsTUFBTUMsV0FBVyxJQUFJLENBQUNQLFVBQVUsQ0FBQ1EsV0FBVyxJQUFJLGlDQUFpQztRQUNqRkQsU0FBU04sZ0JBQWdCLENBQUUsV0FBVyxJQUFJLENBQUNRLHFCQUFxQixFQUFFO1lBQUVILFNBQVM7WUFBTUksU0FBUztRQUFLO1FBRWpHLElBQUksQ0FBQ1YsVUFBVSxDQUFDVyxLQUFLLENBQUNDLFdBQVcsR0FBRyxRQUFRLHVCQUF1QjtJQUVwRTtJQUVBQyxhQUFhO1FBRVosSUFBSSxDQUFDYixVQUFVLENBQUNjLG1CQUFtQixDQUFFLGVBQWUsSUFBSSxDQUFDWixjQUFjO1FBQ3ZFLElBQUksQ0FBQ0YsVUFBVSxDQUFDYyxtQkFBbUIsQ0FBRSxlQUFlLElBQUksQ0FBQ0MsY0FBYztRQUN2RSxJQUFJLENBQUNmLFVBQVUsQ0FBQ2MsbUJBQW1CLENBQUUsYUFBYSxJQUFJLENBQUNYLFlBQVk7UUFDbkUsSUFBSSxDQUFDSCxVQUFVLENBQUNjLG1CQUFtQixDQUFFLGlCQUFpQixJQUFJLENBQUNYLFlBQVk7UUFFdkUsSUFBSSxDQUFDSCxVQUFVLENBQUNjLG1CQUFtQixDQUFFLFNBQVMsSUFBSSxDQUFDVCxhQUFhO1FBQ2hFLElBQUksQ0FBQ0wsVUFBVSxDQUFDYyxtQkFBbUIsQ0FBRSxlQUFlLElBQUksQ0FBQ1YsY0FBYztRQUV2RSxJQUFJLENBQUNZLHFCQUFxQjtRQUUxQixNQUFNVCxXQUFXLElBQUksQ0FBQ1AsVUFBVSxDQUFDUSxXQUFXLElBQUksaUNBQWlDO1FBQ2pGRCxTQUFTTyxtQkFBbUIsQ0FBRSxXQUFXLElBQUksQ0FBQ0wscUJBQXFCLEVBQUU7WUFBRUMsU0FBUztRQUFLO1FBRXJGLElBQUksQ0FBQ1YsVUFBVSxDQUFDVyxLQUFLLENBQUNDLFdBQVcsR0FBRztJQUVyQztJQUVBSyxVQUFVO1FBRVQsSUFBSSxDQUFDSixVQUFVO0lBRWhCO0lBRUE7Ozs7RUFJQyxHQUNESyxnQkFBZ0I7UUFFZixPQUFPLElBQUksQ0FBQ0MsVUFBVSxDQUFDQyxHQUFHO0lBRTNCO0lBRUE7Ozs7RUFJQyxHQUNEQyxvQkFBb0I7UUFFbkIsT0FBTyxJQUFJLENBQUNGLFVBQVUsQ0FBQ0csS0FBSztJQUU3QjtJQUVBOzs7O0VBSUMsR0FDREMsY0FBYztRQUViLE9BQU8sSUFBSSxDQUFDQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsVUFBVSxDQUFFLElBQUksQ0FBQ0MsTUFBTTtJQUVwRDtJQUVBOzs7OztFQUtDLEdBQ0RDLGtCQUFtQjVCLFVBQVUsRUFBRztRQUUvQkEsV0FBV0MsZ0JBQWdCLENBQUUsV0FBVyxJQUFJLENBQUM0QixVQUFVO1FBQ3ZELElBQUksQ0FBQ0Msb0JBQW9CLEdBQUc5QjtJQUU3QjtJQUVBOztFQUVDLEdBQ0RnQix3QkFBd0I7UUFFdkIsSUFBSyxJQUFJLENBQUNjLG9CQUFvQixLQUFLLE1BQU87WUFFekMsSUFBSSxDQUFDQSxvQkFBb0IsQ0FBQ2hCLG1CQUFtQixDQUFFLFdBQVcsSUFBSSxDQUFDZSxVQUFVO1lBQ3pFLElBQUksQ0FBQ0Msb0JBQW9CLEdBQUc7UUFFN0I7SUFFRDtJQUVBOztFQUVDLEdBQ0RDLFlBQVk7UUFFWCxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFFLElBQUksQ0FBQ04sTUFBTTtRQUM5QixJQUFJLENBQUNPLFNBQVMsQ0FBQ0QsSUFBSSxDQUFFLElBQUksQ0FBQ1QsTUFBTSxDQUFDQyxRQUFRO1FBQ3pDLElBQUksQ0FBQ1UsS0FBSyxHQUFHLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJO0lBRTlCO0lBRUE7OztFQUdDLEdBQ0RDLFFBQVE7UUFFUCxJQUFJLENBQUNWLE1BQU0sQ0FBQ00sSUFBSSxDQUFFLElBQUksQ0FBQ0QsT0FBTztRQUM5QixJQUFJLENBQUNSLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDUSxJQUFJLENBQUUsSUFBSSxDQUFDQyxTQUFTO1FBQ3pDLElBQUksQ0FBQ1YsTUFBTSxDQUFDWSxJQUFJLEdBQUcsSUFBSSxDQUFDRCxLQUFLO1FBRTdCLElBQUksQ0FBQ1gsTUFBTSxDQUFDYyxzQkFBc0I7UUFDbEMsSUFBSSxDQUFDQyxhQUFhLENBQUVqRTtRQUVwQixJQUFJLENBQUNrRSxNQUFNO1FBRVgsSUFBSSxDQUFDQyxLQUFLLEdBQUd0RCxPQUFPQyxJQUFJO0lBRXpCO0lBRUFvRCxTQUEyQjtZQUFuQkUsWUFBQUEsaUVBQVk7UUFFbkIsTUFBTWpCLFdBQVcsSUFBSSxDQUFDRCxNQUFNLENBQUNDLFFBQVE7UUFFckN6QyxHQUFHaUQsSUFBSSxDQUFFUixVQUFXa0IsR0FBRyxDQUFFLElBQUksQ0FBQ2hCLE1BQU07UUFFcEMsd0NBQXdDO1FBQ3hDM0MsR0FBRzRELGVBQWUsQ0FBRSxJQUFJLENBQUNDLEtBQUs7UUFFOUIsa0NBQWtDO1FBQ2xDLElBQUksQ0FBQzFCLFVBQVUsQ0FBQzJCLGNBQWMsQ0FBRTlEO1FBRWhDLElBQUssSUFBSSxDQUFDK0QsVUFBVSxJQUFJLElBQUksQ0FBQ04sS0FBSyxLQUFLdEQsT0FBT0MsSUFBSSxFQUFHO1lBRXBELElBQUksQ0FBQzRELFdBQVcsQ0FBRSxJQUFJLENBQUNDLHFCQUFxQixDQUFFUDtRQUUvQztRQUVBLElBQUssSUFBSSxDQUFDUSxhQUFhLEVBQUc7WUFFekIsSUFBSSxDQUFDL0IsVUFBVSxDQUFDRyxLQUFLLElBQUksSUFBSSxDQUFDNkIsZUFBZSxDQUFDN0IsS0FBSyxHQUFHLElBQUksQ0FBQzhCLGFBQWE7WUFDeEUsSUFBSSxDQUFDakMsVUFBVSxDQUFDQyxHQUFHLElBQUksSUFBSSxDQUFDK0IsZUFBZSxDQUFDL0IsR0FBRyxHQUFHLElBQUksQ0FBQ2dDLGFBQWE7UUFFckUsT0FBTztZQUVOLElBQUksQ0FBQ2pDLFVBQVUsQ0FBQ0csS0FBSyxJQUFJLElBQUksQ0FBQzZCLGVBQWUsQ0FBQzdCLEtBQUs7WUFDbkQsSUFBSSxDQUFDSCxVQUFVLENBQUNDLEdBQUcsSUFBSSxJQUFJLENBQUMrQixlQUFlLENBQUMvQixHQUFHO1FBRWhEO1FBRUEsOENBQThDO1FBRTlDLElBQUlpQyxNQUFNLElBQUksQ0FBQ0MsZUFBZTtRQUM5QixJQUFJQyxNQUFNLElBQUksQ0FBQ0MsZUFBZTtRQUU5QixJQUFLQyxTQUFVSixRQUFTSSxTQUFVRixNQUFRO1lBRXpDLElBQUtGLE1BQU0sQ0FBRXhFLEtBQUtLLEVBQUUsRUFBR21FLE9BQU9wRTtpQkFBYSxJQUFLb0UsTUFBTXhFLEtBQUtLLEVBQUUsRUFBR21FLE9BQU9wRTtZQUV2RSxJQUFLc0UsTUFBTSxDQUFFMUUsS0FBS0ssRUFBRSxFQUFHcUUsT0FBT3RFO2lCQUFhLElBQUtzRSxNQUFNMUUsS0FBS0ssRUFBRSxFQUFHcUUsT0FBT3RFO1lBRXZFLElBQUtvRSxPQUFPRSxLQUFNO2dCQUVqQixJQUFJLENBQUNwQyxVQUFVLENBQUNHLEtBQUssR0FBR3pDLEtBQUswRSxHQUFHLENBQUVGLEtBQUt4RSxLQUFLd0UsR0FBRyxDQUFFRSxLQUFLLElBQUksQ0FBQ3BDLFVBQVUsQ0FBQ0csS0FBSztZQUU1RSxPQUFPO2dCQUVOLElBQUksQ0FBQ0gsVUFBVSxDQUFDRyxLQUFLLEdBQUcsSUFBTSxDQUFDSCxVQUFVLENBQUNHLEtBQUssR0FBRyxDQUFFK0IsTUFBTUUsR0FBRSxJQUFNLElBQ2pFMUUsS0FBSzBFLEdBQUcsQ0FBRUYsS0FBSyxJQUFJLENBQUNsQyxVQUFVLENBQUNHLEtBQUssSUFDcEN6QyxLQUFLd0UsR0FBRyxDQUFFRSxLQUFLLElBQUksQ0FBQ3BDLFVBQVUsQ0FBQ0csS0FBSztZQUV0QztRQUVEO1FBRUEsNENBQTRDO1FBQzVDLElBQUksQ0FBQ0gsVUFBVSxDQUFDQyxHQUFHLEdBQUd2QyxLQUFLMEUsR0FBRyxDQUFFLElBQUksQ0FBQ0csYUFBYSxFQUFFN0UsS0FBS3dFLEdBQUcsQ0FBRSxJQUFJLENBQUNNLGFBQWEsRUFBRSxJQUFJLENBQUN4QyxVQUFVLENBQUNDLEdBQUc7UUFFckcsSUFBSSxDQUFDRCxVQUFVLENBQUN5QyxRQUFRO1FBR3hCLGlDQUFpQztRQUVqQyxJQUFLLElBQUksQ0FBQ1YsYUFBYSxLQUFLLE1BQU87WUFFbEMsSUFBSSxDQUFDdkIsTUFBTSxDQUFDa0MsZUFBZSxDQUFFLElBQUksQ0FBQ0MsVUFBVSxFQUFFLElBQUksQ0FBQ1YsYUFBYTtRQUVqRSxPQUFPO1lBRU4sSUFBSSxDQUFDekIsTUFBTSxDQUFDb0MsR0FBRyxDQUFFLElBQUksQ0FBQ0QsVUFBVTtRQUVqQztRQUVBLDZGQUE2RjtRQUM3RixJQUFJLENBQUNuQyxNQUFNLENBQUNnQixHQUFHLENBQUUsSUFBSSxDQUFDcUIsTUFBTTtRQUM1QixJQUFJLENBQUNyQyxNQUFNLENBQUNzQyxXQUFXLENBQUUsSUFBSSxDQUFDQyxlQUFlLEVBQUUsSUFBSSxDQUFDQyxlQUFlO1FBQ25FLElBQUksQ0FBQ3hDLE1BQU0sQ0FBQ29DLEdBQUcsQ0FBRSxJQUFJLENBQUNDLE1BQU07UUFFNUIsSUFBSUksY0FBYztRQUNsQiw4R0FBOEc7UUFDOUcsc0NBQXNDO1FBQ3RDLElBQUssSUFBSSxDQUFDQyxZQUFZLElBQUksSUFBSSxDQUFDQyxrQkFBa0IsSUFBSSxJQUFJLENBQUM5QyxNQUFNLENBQUMrQyxvQkFBb0IsRUFBRztZQUV2RixJQUFJLENBQUNwRCxVQUFVLENBQUNxRCxNQUFNLEdBQUcsSUFBSSxDQUFDQyxjQUFjLENBQUUsSUFBSSxDQUFDdEQsVUFBVSxDQUFDcUQsTUFBTTtRQUVyRSxPQUFPO1lBRU4sTUFBTUUsYUFBYSxJQUFJLENBQUN2RCxVQUFVLENBQUNxRCxNQUFNO1lBQ3pDLElBQUksQ0FBQ3JELFVBQVUsQ0FBQ3FELE1BQU0sR0FBRyxJQUFJLENBQUNDLGNBQWMsQ0FBRSxJQUFJLENBQUN0RCxVQUFVLENBQUNxRCxNQUFNLEdBQUcsSUFBSSxDQUFDRyxNQUFNO1lBQ2xGUCxjQUFjTSxjQUFjLElBQUksQ0FBQ3ZELFVBQVUsQ0FBQ3FELE1BQU07UUFFbkQ7UUFFQXhGLEdBQUc0RixnQkFBZ0IsQ0FBRSxJQUFJLENBQUN6RCxVQUFVO1FBRXBDLHVEQUF1RDtRQUN2RG5DLEdBQUc0RCxlQUFlLENBQUUsSUFBSSxDQUFDaUMsWUFBWTtRQUVyQ3BELFNBQVNRLElBQUksQ0FBRSxJQUFJLENBQUNOLE1BQU0sRUFBR29DLEdBQUcsQ0FBRS9FO1FBRWxDLElBQUksQ0FBQ3dDLE1BQU0sQ0FBQ3NELE1BQU0sQ0FBRSxJQUFJLENBQUNuRCxNQUFNO1FBRS9CLElBQUssSUFBSSxDQUFDdUIsYUFBYSxLQUFLLE1BQU87WUFFbEMsSUFBSSxDQUFDQyxlQUFlLENBQUM3QixLQUFLLElBQU0sSUFBSSxJQUFJLENBQUM4QixhQUFhO1lBQ3RELElBQUksQ0FBQ0QsZUFBZSxDQUFDL0IsR0FBRyxJQUFNLElBQUksSUFBSSxDQUFDZ0MsYUFBYTtZQUVwRCxJQUFJLENBQUNVLFVBQVUsQ0FBQ2lCLGNBQWMsQ0FBRSxJQUFJLElBQUksQ0FBQzNCLGFBQWE7UUFFdkQsT0FBTztZQUVOLElBQUksQ0FBQ0QsZUFBZSxDQUFDNkIsR0FBRyxDQUFFLEdBQUcsR0FBRztZQUVoQyxJQUFJLENBQUNsQixVQUFVLENBQUNrQixHQUFHLENBQUUsR0FBRyxHQUFHO1FBRTVCO1FBRUEseUJBQXlCO1FBQ3pCLElBQUssSUFBSSxDQUFDWCxZQUFZLElBQUksSUFBSSxDQUFDQyxrQkFBa0IsRUFBRztZQUVuRCxJQUFJVyxZQUFZO1lBQ2hCLElBQUssSUFBSSxDQUFDekQsTUFBTSxDQUFDMEQsbUJBQW1CLEVBQUc7Z0JBRXRDLHVDQUF1QztnQkFDdkMsMENBQTBDO2dCQUMxQyxNQUFNUixhQUFhMUYsR0FBR21HLE1BQU07Z0JBQzVCRixZQUFZLElBQUksQ0FBQ1IsY0FBYyxDQUFFQyxhQUFhLElBQUksQ0FBQ0MsTUFBTTtnQkFFekQsTUFBTVMsY0FBY1YsYUFBYU87Z0JBQ2pDLElBQUksQ0FBQ3pELE1BQU0sQ0FBQ0MsUUFBUSxDQUFDb0MsZUFBZSxDQUFFLElBQUksQ0FBQ3dCLGVBQWUsRUFBRUQ7Z0JBQzVELElBQUksQ0FBQzVELE1BQU0sQ0FBQzhELGlCQUFpQjtnQkFFN0JsQixjQUFjLENBQUMsQ0FBRWdCO1lBRWxCLE9BQU8sSUFBSyxJQUFJLENBQUM1RCxNQUFNLENBQUMrQyxvQkFBb0IsRUFBRztnQkFFOUMseURBQXlEO2dCQUN6RCxNQUFNZ0IsY0FBYyxJQUFJckgsMENBQU9BLENBQUUsSUFBSSxDQUFDc0gsTUFBTSxDQUFDQyxDQUFDLEVBQUUsSUFBSSxDQUFDRCxNQUFNLENBQUNFLENBQUMsRUFBRTtnQkFDL0RILFlBQVlJLFNBQVMsQ0FBRSxJQUFJLENBQUNuRSxNQUFNO2dCQUVsQyxNQUFNb0UsV0FBVyxJQUFJLENBQUNwRSxNQUFNLENBQUNZLElBQUk7Z0JBQ2pDLElBQUksQ0FBQ1osTUFBTSxDQUFDWSxJQUFJLEdBQUd2RCxLQUFLMEUsR0FBRyxDQUFFLElBQUksQ0FBQ3NDLE9BQU8sRUFBRWhILEtBQUt3RSxHQUFHLENBQUUsSUFBSSxDQUFDeUMsT0FBTyxFQUFFLElBQUksQ0FBQ3RFLE1BQU0sQ0FBQ1ksSUFBSSxHQUFHLElBQUksQ0FBQ3VDLE1BQU07Z0JBQ2pHLElBQUksQ0FBQ25ELE1BQU0sQ0FBQ2Msc0JBQXNCO2dCQUVsQzhCLGNBQWN3QixhQUFhLElBQUksQ0FBQ3BFLE1BQU0sQ0FBQ1ksSUFBSTtnQkFFM0MsTUFBTTJELGFBQWEsSUFBSTdILDBDQUFPQSxDQUFFLElBQUksQ0FBQ3NILE1BQU0sQ0FBQ0MsQ0FBQyxFQUFFLElBQUksQ0FBQ0QsTUFBTSxDQUFDRSxDQUFDLEVBQUU7Z0JBQzlESyxXQUFXSixTQUFTLENBQUUsSUFBSSxDQUFDbkUsTUFBTTtnQkFFakMsSUFBSSxDQUFDQSxNQUFNLENBQUNDLFFBQVEsQ0FBQ2tCLEdBQUcsQ0FBRW9ELFlBQWFoQyxHQUFHLENBQUV3QjtnQkFDNUMsSUFBSSxDQUFDL0QsTUFBTSxDQUFDOEQsaUJBQWlCO2dCQUU3QkwsWUFBWWpHLEdBQUdtRyxNQUFNO1lBRXRCLE9BQU87Z0JBRU5hLFFBQVFDLElBQUksQ0FBRTtnQkFDZCxJQUFJLENBQUM1QixZQUFZLEdBQUc7WUFFckI7WUFFQSxxQ0FBcUM7WUFDckMsSUFBS1ksY0FBYyxNQUFPO2dCQUV6QixJQUFLLElBQUksQ0FBQ2lCLGtCQUFrQixFQUFHO29CQUU5QixnRUFBZ0U7b0JBQ2hFLElBQUksQ0FBQ3ZFLE1BQU0sQ0FBQ3FELEdBQUcsQ0FBRSxHQUFHLEdBQUcsQ0FBRSxHQUN2Qm1CLGtCQUFrQixDQUFFLElBQUksQ0FBQzNFLE1BQU0sQ0FBQzRFLE1BQU0sRUFDdENyQixjQUFjLENBQUVFLFdBQ2hCbEIsR0FBRyxDQUFFLElBQUksQ0FBQ3ZDLE1BQU0sQ0FBQ0MsUUFBUTtnQkFFNUIsT0FBTztvQkFFTixzREFBc0Q7b0JBQ3REL0MsS0FBSzJILE1BQU0sQ0FBQ3BFLElBQUksQ0FBRSxJQUFJLENBQUNULE1BQU0sQ0FBQ0MsUUFBUTtvQkFDdEMvQyxLQUFLNEgsU0FBUyxDQUFDdEIsR0FBRyxDQUFFLEdBQUcsR0FBRyxDQUFFLEdBQUltQixrQkFBa0IsQ0FBRSxJQUFJLENBQUMzRSxNQUFNLENBQUM0RSxNQUFNO29CQUV0RSw0RkFBNEY7b0JBQzVGLHlCQUF5QjtvQkFDekIsSUFBS3ZILEtBQUswSCxHQUFHLENBQUUsSUFBSSxDQUFDL0UsTUFBTSxDQUFDZ0YsRUFBRSxDQUFDQyxHQUFHLENBQUUvSCxLQUFLNEgsU0FBUyxLQUFPMUgsYUFBYzt3QkFFckUsSUFBSSxDQUFDNEMsTUFBTSxDQUFDc0QsTUFBTSxDQUFFLElBQUksQ0FBQ25ELE1BQU07b0JBRWhDLE9BQU87d0JBRU5oRCxPQUFPK0gsNkJBQTZCLENBQUUsSUFBSSxDQUFDbEYsTUFBTSxDQUFDZ0YsRUFBRSxFQUFFLElBQUksQ0FBQzdFLE1BQU07d0JBQ2pFakQsS0FBS2lJLGNBQWMsQ0FBRWhJLFFBQVEsSUFBSSxDQUFDZ0QsTUFBTTtvQkFFekM7Z0JBRUQ7WUFFRDtRQUVELE9BQU8sSUFBSyxJQUFJLENBQUNILE1BQU0sQ0FBQytDLG9CQUFvQixFQUFHO1lBRTlDLE1BQU1xQixXQUFXLElBQUksQ0FBQ3BFLE1BQU0sQ0FBQ1ksSUFBSTtZQUNqQyxJQUFJLENBQUNaLE1BQU0sQ0FBQ1ksSUFBSSxHQUFHdkQsS0FBSzBFLEdBQUcsQ0FBRSxJQUFJLENBQUNzQyxPQUFPLEVBQUVoSCxLQUFLd0UsR0FBRyxDQUFFLElBQUksQ0FBQ3lDLE9BQU8sRUFBRSxJQUFJLENBQUN0RSxNQUFNLENBQUNZLElBQUksR0FBRyxJQUFJLENBQUN1QyxNQUFNO1lBRWpHLElBQUtpQixhQUFhLElBQUksQ0FBQ3BFLE1BQU0sQ0FBQ1ksSUFBSSxFQUFHO2dCQUVwQyxJQUFJLENBQUNaLE1BQU0sQ0FBQ2Msc0JBQXNCO2dCQUNsQzhCLGNBQWM7WUFFZjtRQUVEO1FBRUEsSUFBSSxDQUFDTyxNQUFNLEdBQUc7UUFDZCxJQUFJLENBQUNMLGtCQUFrQixHQUFHO1FBRTFCLHVCQUF1QjtRQUN2QiwrREFBK0Q7UUFDL0QseURBQXlEO1FBRXpELElBQUtGLGVBQ0osSUFBSSxDQUFDd0MsYUFBYSxDQUFDQyxpQkFBaUIsQ0FBRSxJQUFJLENBQUNyRixNQUFNLENBQUNDLFFBQVEsSUFBSzdCLFFBQy9ELElBQU0sS0FBSSxJQUFJLENBQUNrSCxlQUFlLENBQUNMLEdBQUcsQ0FBRSxJQUFJLENBQUNqRixNQUFNLENBQUN1RixVQUFVLENBQUMsSUFBTW5ILFFBQ2pFLElBQUksQ0FBQ29ILG1CQUFtQixDQUFDSCxpQkFBaUIsQ0FBRSxJQUFJLENBQUNsRixNQUFNLElBQUsvQixNQUFPO1lBRW5FLElBQUksQ0FBQzJDLGFBQWEsQ0FBRWpFO1lBRXBCLElBQUksQ0FBQ3NJLGFBQWEsQ0FBQzNFLElBQUksQ0FBRSxJQUFJLENBQUNULE1BQU0sQ0FBQ0MsUUFBUTtZQUM3QyxJQUFJLENBQUNxRixlQUFlLENBQUM3RSxJQUFJLENBQUUsSUFBSSxDQUFDVCxNQUFNLENBQUN1RixVQUFVO1lBQ2pELElBQUksQ0FBQ0MsbUJBQW1CLENBQUMvRSxJQUFJLENBQUUsSUFBSSxDQUFDTixNQUFNO1lBRTFDLE9BQU87UUFFUjtRQUVBLE9BQU87SUFFUjtJQUVBc0Isc0JBQXVCUCxTQUFTLEVBQUc7UUFFbEMsSUFBS0EsY0FBYyxNQUFPO1lBRXpCLE9BQU8sU0FBVyxLQUFLLElBQUksQ0FBQ3VFLGVBQWUsR0FBS3ZFO1FBRWpELE9BQU87WUFFTixPQUFPekQsU0FBUyxLQUFLLEtBQUssSUFBSSxDQUFDZ0ksZUFBZTtRQUUvQztJQUVEO0lBRUFDLGNBQWVDLEtBQUssRUFBRztRQUV0QixNQUFNQyxrQkFBa0J2SSxLQUFLMEgsR0FBRyxDQUFFWSxRQUFRO1FBQzFDLE9BQU90SSxLQUFLd0ksR0FBRyxDQUFFLE1BQU0sSUFBSSxDQUFDQyxTQUFTLEdBQUdGO0lBRXpDO0lBRUFwRSxZQUFhdUUsS0FBSyxFQUFHO1FBRXBCLElBQUksQ0FBQ3BFLGVBQWUsQ0FBQzdCLEtBQUssSUFBSWlHO0lBRS9CO0lBRUFDLFVBQVdELEtBQUssRUFBRztRQUVsQixJQUFJLENBQUNwRSxlQUFlLENBQUMvQixHQUFHLElBQUltRztJQUU3QjtJQUVBRSxTQUFVQyxRQUFRLEVBQUVDLFlBQVksRUFBRztRQUVsQzNJLEdBQUc0SSxtQkFBbUIsQ0FBRUQsY0FBYyxJQUFLLCtCQUErQjtRQUMxRTNJLEdBQUcrRixjQUFjLENBQUUsQ0FBRTJDO1FBRXJCLElBQUksQ0FBQzVELFVBQVUsQ0FBQ0MsR0FBRyxDQUFFL0U7SUFFdEI7SUFFQTZJLE9BQVFILFFBQVEsRUFBRUMsWUFBWSxFQUFHO1FBRWhDLElBQUssSUFBSSxDQUFDekIsa0JBQWtCLEtBQUssTUFBTztZQUV2Q2xILEdBQUc0SSxtQkFBbUIsQ0FBRUQsY0FBYztRQUV2QyxPQUFPO1lBRU4zSSxHQUFHNEksbUJBQW1CLENBQUVELGNBQWM7WUFDdEMzSSxHQUFHOEksWUFBWSxDQUFFLElBQUksQ0FBQ3RHLE1BQU0sQ0FBQ2dGLEVBQUUsRUFBRXhIO1FBRWxDO1FBRUFBLEdBQUcrRixjQUFjLENBQUUyQztRQUVuQixJQUFJLENBQUM1RCxVQUFVLENBQUNDLEdBQUcsQ0FBRS9FO0lBRXRCO0lBRUEsK0RBQStEO0lBQy9EK0ksS0FBTUMsTUFBTSxFQUFFQyxNQUFNLEVBQUc7UUFFdEIsTUFBTWxJLFVBQVUsSUFBSSxDQUFDQyxVQUFVO1FBRS9CLElBQUssSUFBSSxDQUFDd0IsTUFBTSxDQUFDMEQsbUJBQW1CLEVBQUc7WUFFdEMsY0FBYztZQUNkLE1BQU16RCxXQUFXLElBQUksQ0FBQ0QsTUFBTSxDQUFDQyxRQUFRO1lBQ3JDekMsR0FBR2lELElBQUksQ0FBRVIsVUFBV2tCLEdBQUcsQ0FBRSxJQUFJLENBQUNoQixNQUFNO1lBQ3BDLElBQUl1RyxpQkFBaUJsSixHQUFHbUcsTUFBTTtZQUU5Qiw2Q0FBNkM7WUFDN0MrQyxrQkFBa0JySixLQUFLc0osR0FBRyxDQUFFLElBQU0sQ0FBQzNHLE1BQU0sQ0FBQzRHLEdBQUcsR0FBRyxJQUFNdkosS0FBS0ssRUFBRSxHQUFHO1lBRWhFLHVFQUF1RTtZQUN2RSxJQUFJLENBQUN1SSxRQUFRLENBQUUsSUFBSU8sU0FBU0UsaUJBQWlCbkksUUFBUXNJLFlBQVksRUFBRSxJQUFJLENBQUM3RyxNQUFNLENBQUM0RSxNQUFNO1lBQ3JGLElBQUksQ0FBQ3lCLE1BQU0sQ0FBRSxJQUFJSSxTQUFTQyxpQkFBaUJuSSxRQUFRc0ksWUFBWSxFQUFFLElBQUksQ0FBQzdHLE1BQU0sQ0FBQzRFLE1BQU07UUFFcEYsT0FBTyxJQUFLLElBQUksQ0FBQzVFLE1BQU0sQ0FBQytDLG9CQUFvQixFQUFHO1lBRTlDLGVBQWU7WUFDZixJQUFJLENBQUNrRCxRQUFRLENBQUVPLFNBQVcsS0FBSSxDQUFDeEcsTUFBTSxDQUFDOEcsS0FBSyxHQUFHLElBQUksQ0FBQzlHLE1BQU0sQ0FBQytHLElBQUksSUFBSyxJQUFJLENBQUMvRyxNQUFNLENBQUNZLElBQUksR0FBR3JDLFFBQVF5SSxXQUFXLEVBQUUsSUFBSSxDQUFDaEgsTUFBTSxDQUFDNEUsTUFBTTtZQUM3SCxJQUFJLENBQUN5QixNQUFNLENBQUVJLFNBQVcsS0FBSSxDQUFDekcsTUFBTSxDQUFDaUgsR0FBRyxHQUFHLElBQUksQ0FBQ2pILE1BQU0sQ0FBQ2tILE1BQU0sSUFBSyxJQUFJLENBQUNsSCxNQUFNLENBQUNZLElBQUksR0FBR3JDLFFBQVFzSSxZQUFZLEVBQUUsSUFBSSxDQUFDN0csTUFBTSxDQUFDNEUsTUFBTTtRQUU3SCxPQUFPO1lBRU4sOENBQThDO1lBQzlDSixRQUFRQyxJQUFJLENBQUU7WUFDZCxJQUFJLENBQUMwQyxTQUFTLEdBQUc7UUFFbEI7SUFFRDtJQUVBQyxVQUFXQyxVQUFVLEVBQUc7UUFFdkIsSUFBSyxJQUFJLENBQUNySCxNQUFNLENBQUMwRCxtQkFBbUIsSUFBSSxJQUFJLENBQUMxRCxNQUFNLENBQUMrQyxvQkFBb0IsRUFBRztZQUUxRSxJQUFJLENBQUNJLE1BQU0sSUFBSWtFO1FBRWhCLE9BQU87WUFFTjdDLFFBQVFDLElBQUksQ0FBRTtZQUNkLElBQUksQ0FBQzZDLFVBQVUsR0FBRztRQUVuQjtJQUVEO0lBRUFDLFNBQVVGLFVBQVUsRUFBRztRQUV0QixJQUFLLElBQUksQ0FBQ3JILE1BQU0sQ0FBQzBELG1CQUFtQixJQUFJLElBQUksQ0FBQzFELE1BQU0sQ0FBQytDLG9CQUFvQixFQUFHO1lBRTFFLElBQUksQ0FBQ0ksTUFBTSxJQUFJa0U7UUFFaEIsT0FBTztZQUVON0MsUUFBUUMsSUFBSSxDQUFFO1lBQ2QsSUFBSSxDQUFDNkMsVUFBVSxHQUFHO1FBRW5CO0lBRUQ7SUFFQUUsc0JBQXVCdkQsQ0FBQyxFQUFFQyxDQUFDLEVBQUc7UUFFN0IsSUFBSyxDQUFFLElBQUksQ0FBQ3JCLFlBQVksRUFBRztZQUUxQjtRQUVEO1FBRUEsSUFBSSxDQUFDQyxrQkFBa0IsR0FBRztRQUUxQixNQUFNMkUsT0FBTyxJQUFJLENBQUNqSixVQUFVLENBQUNrSixxQkFBcUI7UUFDbEQsTUFBTUMsS0FBSzFELElBQUl3RCxLQUFLVixJQUFJO1FBQ3hCLE1BQU1hLEtBQUsxRCxJQUFJdUQsS0FBS1IsR0FBRztRQUN2QixNQUFNWSxJQUFJSixLQUFLSyxLQUFLO1FBQ3BCLE1BQU1DLElBQUlOLEtBQUtPLE1BQU07UUFFckIsSUFBSSxDQUFDaEUsTUFBTSxDQUFDQyxDQUFDLEdBQUcsS0FBTzRELElBQU0sSUFBSTtRQUNqQyxJQUFJLENBQUM3RCxNQUFNLENBQUNFLENBQUMsR0FBRyxDQUFJMEQsQ0FBQUEsS0FBS0csQ0FBQUEsSUFBTSxJQUFJO1FBRW5DLElBQUksQ0FBQ2xFLGVBQWUsQ0FBQ0wsR0FBRyxDQUFFLElBQUksQ0FBQ1EsTUFBTSxDQUFDQyxDQUFDLEVBQUUsSUFBSSxDQUFDRCxNQUFNLENBQUNFLENBQUMsRUFBRSxHQUFJQyxTQUFTLENBQUUsSUFBSSxDQUFDbkUsTUFBTSxFQUFHbUIsR0FBRyxDQUFFLElBQUksQ0FBQ25CLE1BQU0sQ0FBQ0MsUUFBUSxFQUFHZ0ksU0FBUztJQUUzSDtJQUVBaEYsZUFBZ0JpRixJQUFJLEVBQUc7UUFFdEIsT0FBTzdLLEtBQUswRSxHQUFHLENBQUUsSUFBSSxDQUFDb0csV0FBVyxFQUFFOUssS0FBS3dFLEdBQUcsQ0FBRSxJQUFJLENBQUN1RyxXQUFXLEVBQUVGO0lBRWhFO0lBRUEsRUFBRTtJQUNGLDRDQUE0QztJQUM1QyxFQUFFO0lBRUZHLHVCQUF3QkMsS0FBSyxFQUFHO1FBRS9CLElBQUksQ0FBQ0MsWUFBWSxDQUFDL0UsR0FBRyxDQUFFOEUsTUFBTUUsT0FBTyxFQUFFRixNQUFNRyxPQUFPO0lBRXBEO0lBRUFDLHNCQUF1QkosS0FBSyxFQUFHO1FBRTlCLElBQUksQ0FBQ2QscUJBQXFCLENBQUVjLE1BQU1FLE9BQU8sRUFBRUYsTUFBTUUsT0FBTztRQUN4RCxJQUFJLENBQUNHLFdBQVcsQ0FBQ25GLEdBQUcsQ0FBRThFLE1BQU1FLE9BQU8sRUFBRUYsTUFBTUcsT0FBTztJQUVuRDtJQUVBRyxvQkFBcUJOLEtBQUssRUFBRztRQUU1QixJQUFJLENBQUNPLFNBQVMsQ0FBQ3JGLEdBQUcsQ0FBRThFLE1BQU1FLE9BQU8sRUFBRUYsTUFBTUcsT0FBTztJQUVqRDtJQUVBSyx1QkFBd0JSLEtBQUssRUFBRztRQUUvQixJQUFJLENBQUNTLFVBQVUsQ0FBQ3ZGLEdBQUcsQ0FBRThFLE1BQU1FLE9BQU8sRUFBRUYsTUFBTUcsT0FBTztRQUVqRCxJQUFJLENBQUNPLFlBQVksQ0FBQ0MsVUFBVSxDQUFFLElBQUksQ0FBQ0YsVUFBVSxFQUFFLElBQUksQ0FBQ1IsWUFBWSxFQUFHaEYsY0FBYyxDQUFFLElBQUksQ0FBQzJGLFdBQVc7UUFFbkcsTUFBTTNLLFVBQVUsSUFBSSxDQUFDQyxVQUFVO1FBRS9CLElBQUksQ0FBQ2dELFdBQVcsQ0FBRS9ELFNBQVMsSUFBSSxDQUFDdUwsWUFBWSxDQUFDL0UsQ0FBQyxHQUFHMUYsUUFBUXNJLFlBQVksR0FBSSxjQUFjO1FBRXZGLElBQUksQ0FBQ2IsU0FBUyxDQUFFdkksU0FBUyxJQUFJLENBQUN1TCxZQUFZLENBQUM5RSxDQUFDLEdBQUczRixRQUFRc0ksWUFBWTtRQUVuRSxJQUFJLENBQUMwQixZQUFZLENBQUM5SCxJQUFJLENBQUUsSUFBSSxDQUFDc0ksVUFBVTtRQUV2QyxJQUFJLENBQUMvSCxNQUFNO0lBRVo7SUFFQW1JLHNCQUF1QmIsS0FBSyxFQUFHO1FBRTlCLElBQUksQ0FBQ2MsU0FBUyxDQUFDNUYsR0FBRyxDQUFFOEUsTUFBTUUsT0FBTyxFQUFFRixNQUFNRyxPQUFPO1FBRWhELElBQUksQ0FBQ1ksV0FBVyxDQUFDSixVQUFVLENBQUUsSUFBSSxDQUFDRyxTQUFTLEVBQUUsSUFBSSxDQUFDVCxXQUFXO1FBRTdELElBQUssSUFBSSxDQUFDVSxXQUFXLENBQUNuRixDQUFDLEdBQUcsR0FBSTtZQUU3QixJQUFJLENBQUNrRCxTQUFTLENBQUUsSUFBSSxDQUFDMUIsYUFBYSxDQUFFLElBQUksQ0FBQzJELFdBQVcsQ0FBQ25GLENBQUM7UUFFdkQsT0FBTyxJQUFLLElBQUksQ0FBQ21GLFdBQVcsQ0FBQ25GLENBQUMsR0FBRyxHQUFJO1lBRXBDLElBQUksQ0FBQ3FELFFBQVEsQ0FBRSxJQUFJLENBQUM3QixhQUFhLENBQUUsSUFBSSxDQUFDMkQsV0FBVyxDQUFDbkYsQ0FBQztRQUV0RDtRQUVBLElBQUksQ0FBQ3lFLFdBQVcsQ0FBQ2xJLElBQUksQ0FBRSxJQUFJLENBQUMySSxTQUFTO1FBRXJDLElBQUksQ0FBQ3BJLE1BQU07SUFFWjtJQUVBc0ksb0JBQXFCaEIsS0FBSyxFQUFHO1FBRTVCLElBQUksQ0FBQ2lCLE9BQU8sQ0FBQy9GLEdBQUcsQ0FBRThFLE1BQU1FLE9BQU8sRUFBRUYsTUFBTUcsT0FBTztRQUU5QyxJQUFJLENBQUNlLFNBQVMsQ0FBQ1AsVUFBVSxDQUFFLElBQUksQ0FBQ00sT0FBTyxFQUFFLElBQUksQ0FBQ1YsU0FBUyxFQUFHdEYsY0FBYyxDQUFFLElBQUksQ0FBQ2tHLFFBQVE7UUFFdkYsSUFBSSxDQUFDbEQsSUFBSSxDQUFFLElBQUksQ0FBQ2lELFNBQVMsQ0FBQ3ZGLENBQUMsRUFBRSxJQUFJLENBQUN1RixTQUFTLENBQUN0RixDQUFDO1FBRTdDLElBQUksQ0FBQzJFLFNBQVMsQ0FBQ3BJLElBQUksQ0FBRSxJQUFJLENBQUM4SSxPQUFPO1FBRWpDLElBQUksQ0FBQ3ZJLE1BQU07SUFFWjtJQUVBMEksa0JBQW1CcEIsS0FBSyxFQUFHO1FBRTFCLElBQUksQ0FBQ2QscUJBQXFCLENBQUVjLE1BQU1FLE9BQU8sRUFBRUYsTUFBTUcsT0FBTztRQUV4RCxJQUFLSCxNQUFNN0IsTUFBTSxHQUFHLEdBQUk7WUFFdkIsSUFBSSxDQUFDYyxRQUFRLENBQUUsSUFBSSxDQUFDN0IsYUFBYSxDQUFFNEMsTUFBTTdCLE1BQU07UUFFaEQsT0FBTyxJQUFLNkIsTUFBTTdCLE1BQU0sR0FBRyxHQUFJO1lBRTlCLElBQUksQ0FBQ1csU0FBUyxDQUFFLElBQUksQ0FBQzFCLGFBQWEsQ0FBRTRDLE1BQU03QixNQUFNO1FBRWpEO1FBRUEsSUFBSSxDQUFDekYsTUFBTTtJQUVaO0lBRUEySSxlQUFnQnJCLEtBQUssRUFBRztRQUV2QixJQUFJc0IsY0FBYztRQUVsQixPQUFTdEIsTUFBTXVCLElBQUk7WUFFbEIsS0FBSyxJQUFJLENBQUNDLElBQUksQ0FBQ0MsRUFBRTtnQkFFaEIsSUFBS3pCLE1BQU0wQixPQUFPLElBQUkxQixNQUFNMkIsT0FBTyxJQUFJM0IsTUFBTTRCLFFBQVEsRUFBRztvQkFFdkQsSUFBSyxJQUFJLENBQUNDLFlBQVksRUFBRzt3QkFFeEIsSUFBSSxDQUFDbkUsU0FBUyxDQUFFdkksU0FBUyxJQUFJLENBQUMyTSxjQUFjLEdBQUcsSUFBSSxDQUFDNUwsVUFBVSxDQUFDcUksWUFBWTtvQkFFNUU7Z0JBRUQsT0FBTztvQkFFTixJQUFLLElBQUksQ0FBQ00sU0FBUyxFQUFHO3dCQUVyQixJQUFJLENBQUNaLElBQUksQ0FBRSxHQUFHLElBQUksQ0FBQzhELFdBQVc7b0JBRS9CO2dCQUVEO2dCQUVBVCxjQUFjO2dCQUNkO1lBRUQsS0FBSyxJQUFJLENBQUNFLElBQUksQ0FBQ1EsTUFBTTtnQkFFcEIsSUFBS2hDLE1BQU0wQixPQUFPLElBQUkxQixNQUFNMkIsT0FBTyxJQUFJM0IsTUFBTTRCLFFBQVEsRUFBRztvQkFFdkQsSUFBSyxJQUFJLENBQUNDLFlBQVksRUFBRzt3QkFFeEIsSUFBSSxDQUFDbkUsU0FBUyxDQUFFLENBQUV2SSxTQUFTLElBQUksQ0FBQzJNLGNBQWMsR0FBRyxJQUFJLENBQUM1TCxVQUFVLENBQUNxSSxZQUFZO29CQUU5RTtnQkFFRCxPQUFPO29CQUVOLElBQUssSUFBSSxDQUFDTSxTQUFTLEVBQUc7d0JBRXJCLElBQUksQ0FBQ1osSUFBSSxDQUFFLEdBQUcsQ0FBRSxJQUFJLENBQUM4RCxXQUFXO29CQUVqQztnQkFFRDtnQkFFQVQsY0FBYztnQkFDZDtZQUVELEtBQUssSUFBSSxDQUFDRSxJQUFJLENBQUNTLElBQUk7Z0JBRWxCLElBQUtqQyxNQUFNMEIsT0FBTyxJQUFJMUIsTUFBTTJCLE9BQU8sSUFBSTNCLE1BQU00QixRQUFRLEVBQUc7b0JBRXZELElBQUssSUFBSSxDQUFDQyxZQUFZLEVBQUc7d0JBRXhCLElBQUksQ0FBQzNJLFdBQVcsQ0FBRS9ELFNBQVMsSUFBSSxDQUFDMk0sY0FBYyxHQUFHLElBQUksQ0FBQzVMLFVBQVUsQ0FBQ3FJLFlBQVk7b0JBRTlFO2dCQUVELE9BQU87b0JBRU4sSUFBSyxJQUFJLENBQUNNLFNBQVMsRUFBRzt3QkFFckIsSUFBSSxDQUFDWixJQUFJLENBQUUsSUFBSSxDQUFDOEQsV0FBVyxFQUFFO29CQUU5QjtnQkFFRDtnQkFFQVQsY0FBYztnQkFDZDtZQUVELEtBQUssSUFBSSxDQUFDRSxJQUFJLENBQUNVLEtBQUs7Z0JBRW5CLElBQUtsQyxNQUFNMEIsT0FBTyxJQUFJMUIsTUFBTTJCLE9BQU8sSUFBSTNCLE1BQU00QixRQUFRLEVBQUc7b0JBRXZELElBQUssSUFBSSxDQUFDQyxZQUFZLEVBQUc7d0JBRXhCLElBQUksQ0FBQzNJLFdBQVcsQ0FBRSxDQUFFL0QsU0FBUyxJQUFJLENBQUMyTSxjQUFjLEdBQUcsSUFBSSxDQUFDNUwsVUFBVSxDQUFDcUksWUFBWTtvQkFFaEY7Z0JBRUQsT0FBTztvQkFFTixJQUFLLElBQUksQ0FBQ00sU0FBUyxFQUFHO3dCQUVyQixJQUFJLENBQUNaLElBQUksQ0FBRSxDQUFFLElBQUksQ0FBQzhELFdBQVcsRUFBRTtvQkFFaEM7Z0JBRUQ7Z0JBRUFULGNBQWM7Z0JBQ2Q7UUFFRjtRQUVBLElBQUtBLGFBQWM7WUFFbEIsb0RBQW9EO1lBQ3BEdEIsTUFBTW1DLGNBQWM7WUFFcEIsSUFBSSxDQUFDekosTUFBTTtRQUVaO0lBR0Q7SUFFQTBKLHdCQUF5QnBDLEtBQUssRUFBRztRQUVoQyxJQUFLLElBQUksQ0FBQ3FDLFNBQVMsQ0FBQ2hILE1BQU0sS0FBSyxHQUFJO1lBRWxDLElBQUksQ0FBQzRFLFlBQVksQ0FBQy9FLEdBQUcsQ0FBRThFLE1BQU1zQyxLQUFLLEVBQUV0QyxNQUFNdUMsS0FBSztRQUVoRCxPQUFPO1lBRU4sTUFBTTVLLFdBQVcsSUFBSSxDQUFDNksseUJBQXlCLENBQUV4QztZQUVqRCxNQUFNckUsSUFBSSxNQUFRcUUsQ0FBQUEsTUFBTXNDLEtBQUssR0FBRzNLLFNBQVNnRSxDQUFDO1lBQzFDLE1BQU1DLElBQUksTUFBUW9FLENBQUFBLE1BQU11QyxLQUFLLEdBQUc1SyxTQUFTaUUsQ0FBQztZQUUxQyxJQUFJLENBQUNxRSxZQUFZLENBQUMvRSxHQUFHLENBQUVTLEdBQUdDO1FBRTNCO0lBRUQ7SUFFQTZHLHFCQUFzQnpDLEtBQUssRUFBRztRQUU3QixJQUFLLElBQUksQ0FBQ3FDLFNBQVMsQ0FBQ2hILE1BQU0sS0FBSyxHQUFJO1lBRWxDLElBQUksQ0FBQ2tGLFNBQVMsQ0FBQ3JGLEdBQUcsQ0FBRThFLE1BQU1zQyxLQUFLLEVBQUV0QyxNQUFNdUMsS0FBSztRQUU3QyxPQUFPO1lBRU4sTUFBTTVLLFdBQVcsSUFBSSxDQUFDNksseUJBQXlCLENBQUV4QztZQUVqRCxNQUFNckUsSUFBSSxNQUFRcUUsQ0FBQUEsTUFBTXNDLEtBQUssR0FBRzNLLFNBQVNnRSxDQUFDO1lBQzFDLE1BQU1DLElBQUksTUFBUW9FLENBQUFBLE1BQU11QyxLQUFLLEdBQUc1SyxTQUFTaUUsQ0FBQztZQUUxQyxJQUFJLENBQUMyRSxTQUFTLENBQUNyRixHQUFHLENBQUVTLEdBQUdDO1FBRXhCO0lBRUQ7SUFFQThHLHVCQUF3QjFDLEtBQUssRUFBRztRQUUvQixNQUFNckksV0FBVyxJQUFJLENBQUM2Syx5QkFBeUIsQ0FBRXhDO1FBRWpELE1BQU1YLEtBQUtXLE1BQU1zQyxLQUFLLEdBQUczSyxTQUFTZ0UsQ0FBQztRQUNuQyxNQUFNMkQsS0FBS1UsTUFBTXVDLEtBQUssR0FBRzVLLFNBQVNpRSxDQUFDO1FBRW5DLE1BQU1nQyxXQUFXN0ksS0FBSzROLElBQUksQ0FBRXRELEtBQUtBLEtBQUtDLEtBQUtBO1FBRTNDLElBQUksQ0FBQ2UsV0FBVyxDQUFDbkYsR0FBRyxDQUFFLEdBQUcwQztJQUUxQjtJQUVBZ0YsMEJBQTJCNUMsS0FBSyxFQUFHO1FBRWxDLElBQUssSUFBSSxDQUFDaEIsVUFBVSxFQUFHLElBQUksQ0FBQzBELHNCQUFzQixDQUFFMUM7UUFFcEQsSUFBSyxJQUFJLENBQUNuQixTQUFTLEVBQUcsSUFBSSxDQUFDNEQsb0JBQW9CLENBQUV6QztJQUVsRDtJQUVBNkMsNkJBQThCN0MsS0FBSyxFQUFHO1FBRXJDLElBQUssSUFBSSxDQUFDaEIsVUFBVSxFQUFHLElBQUksQ0FBQzBELHNCQUFzQixDQUFFMUM7UUFFcEQsSUFBSyxJQUFJLENBQUM2QixZQUFZLEVBQUcsSUFBSSxDQUFDTyx1QkFBdUIsQ0FBRXBDO0lBRXhEO0lBRUE4Qyx1QkFBd0I5QyxLQUFLLEVBQUc7UUFFL0IsSUFBSyxJQUFJLENBQUNxQyxTQUFTLENBQUNoSCxNQUFNLElBQUksR0FBSTtZQUVqQyxJQUFJLENBQUNvRixVQUFVLENBQUN2RixHQUFHLENBQUU4RSxNQUFNc0MsS0FBSyxFQUFFdEMsTUFBTXVDLEtBQUs7UUFFOUMsT0FBTztZQUVOLE1BQU01SyxXQUFXLElBQUksQ0FBQzZLLHlCQUF5QixDQUFFeEM7WUFFakQsTUFBTXJFLElBQUksTUFBUXFFLENBQUFBLE1BQU1zQyxLQUFLLEdBQUczSyxTQUFTZ0UsQ0FBQztZQUMxQyxNQUFNQyxJQUFJLE1BQVFvRSxDQUFBQSxNQUFNdUMsS0FBSyxHQUFHNUssU0FBU2lFLENBQUM7WUFFMUMsSUFBSSxDQUFDNkUsVUFBVSxDQUFDdkYsR0FBRyxDQUFFUyxHQUFHQztRQUV6QjtRQUVBLElBQUksQ0FBQzhFLFlBQVksQ0FBQ0MsVUFBVSxDQUFFLElBQUksQ0FBQ0YsVUFBVSxFQUFFLElBQUksQ0FBQ1IsWUFBWSxFQUFHaEYsY0FBYyxDQUFFLElBQUksQ0FBQzJGLFdBQVc7UUFFbkcsTUFBTTNLLFVBQVUsSUFBSSxDQUFDQyxVQUFVO1FBRS9CLElBQUksQ0FBQ2dELFdBQVcsQ0FBRS9ELFNBQVMsSUFBSSxDQUFDdUwsWUFBWSxDQUFDL0UsQ0FBQyxHQUFHMUYsUUFBUXNJLFlBQVksR0FBSSxjQUFjO1FBRXZGLElBQUksQ0FBQ2IsU0FBUyxDQUFFdkksU0FBUyxJQUFJLENBQUN1TCxZQUFZLENBQUM5RSxDQUFDLEdBQUczRixRQUFRc0ksWUFBWTtRQUVuRSxJQUFJLENBQUMwQixZQUFZLENBQUM5SCxJQUFJLENBQUUsSUFBSSxDQUFDc0ksVUFBVTtJQUV4QztJQUVBc0Msb0JBQXFCL0MsS0FBSyxFQUFHO1FBRTVCLElBQUssSUFBSSxDQUFDcUMsU0FBUyxDQUFDaEgsTUFBTSxLQUFLLEdBQUk7WUFFbEMsSUFBSSxDQUFDNEYsT0FBTyxDQUFDL0YsR0FBRyxDQUFFOEUsTUFBTXNDLEtBQUssRUFBRXRDLE1BQU11QyxLQUFLO1FBRTNDLE9BQU87WUFFTixNQUFNNUssV0FBVyxJQUFJLENBQUM2Syx5QkFBeUIsQ0FBRXhDO1lBRWpELE1BQU1yRSxJQUFJLE1BQVFxRSxDQUFBQSxNQUFNc0MsS0FBSyxHQUFHM0ssU0FBU2dFLENBQUM7WUFDMUMsTUFBTUMsSUFBSSxNQUFRb0UsQ0FBQUEsTUFBTXVDLEtBQUssR0FBRzVLLFNBQVNpRSxDQUFDO1lBRTFDLElBQUksQ0FBQ3FGLE9BQU8sQ0FBQy9GLEdBQUcsQ0FBRVMsR0FBR0M7UUFFdEI7UUFFQSxJQUFJLENBQUNzRixTQUFTLENBQUNQLFVBQVUsQ0FBRSxJQUFJLENBQUNNLE9BQU8sRUFBRSxJQUFJLENBQUNWLFNBQVMsRUFBR3RGLGNBQWMsQ0FBRSxJQUFJLENBQUNrRyxRQUFRO1FBRXZGLElBQUksQ0FBQ2xELElBQUksQ0FBRSxJQUFJLENBQUNpRCxTQUFTLENBQUN2RixDQUFDLEVBQUUsSUFBSSxDQUFDdUYsU0FBUyxDQUFDdEYsQ0FBQztRQUU3QyxJQUFJLENBQUMyRSxTQUFTLENBQUNwSSxJQUFJLENBQUUsSUFBSSxDQUFDOEksT0FBTztJQUVsQztJQUVBK0Isc0JBQXVCaEQsS0FBSyxFQUFHO1FBRTlCLE1BQU1ySSxXQUFXLElBQUksQ0FBQzZLLHlCQUF5QixDQUFFeEM7UUFFakQsTUFBTVgsS0FBS1csTUFBTXNDLEtBQUssR0FBRzNLLFNBQVNnRSxDQUFDO1FBQ25DLE1BQU0yRCxLQUFLVSxNQUFNdUMsS0FBSyxHQUFHNUssU0FBU2lFLENBQUM7UUFFbkMsTUFBTWdDLFdBQVc3SSxLQUFLNE4sSUFBSSxDQUFFdEQsS0FBS0EsS0FBS0MsS0FBS0E7UUFFM0MsSUFBSSxDQUFDd0IsU0FBUyxDQUFDNUYsR0FBRyxDQUFFLEdBQUcwQztRQUV2QixJQUFJLENBQUNtRCxXQUFXLENBQUM3RixHQUFHLENBQUUsR0FBR25HLEtBQUt3SSxHQUFHLENBQUUsSUFBSSxDQUFDdUQsU0FBUyxDQUFDbEYsQ0FBQyxHQUFHLElBQUksQ0FBQ3lFLFdBQVcsQ0FBQ3pFLENBQUMsRUFBRSxJQUFJLENBQUM0QixTQUFTO1FBRXhGLElBQUksQ0FBQ3NCLFNBQVMsQ0FBRSxJQUFJLENBQUNpQyxXQUFXLENBQUNuRixDQUFDO1FBRWxDLElBQUksQ0FBQ3lFLFdBQVcsQ0FBQ2xJLElBQUksQ0FBRSxJQUFJLENBQUMySSxTQUFTO1FBRXJDLE1BQU1tQyxVQUFVLENBQUVqRCxNQUFNc0MsS0FBSyxHQUFHM0ssU0FBU2dFLENBQUMsSUFBSztRQUMvQyxNQUFNdUgsVUFBVSxDQUFFbEQsTUFBTXVDLEtBQUssR0FBRzVLLFNBQVNpRSxDQUFDLElBQUs7UUFFL0MsSUFBSSxDQUFDc0QscUJBQXFCLENBQUUrRCxTQUFTQztJQUV0QztJQUVBQyx5QkFBMEJuRCxLQUFLLEVBQUc7UUFFakMsSUFBSyxJQUFJLENBQUNoQixVQUFVLEVBQUcsSUFBSSxDQUFDZ0UscUJBQXFCLENBQUVoRDtRQUVuRCxJQUFLLElBQUksQ0FBQ25CLFNBQVMsRUFBRyxJQUFJLENBQUNrRSxtQkFBbUIsQ0FBRS9DO0lBRWpEO0lBRUFvRCw0QkFBNkJwRCxLQUFLLEVBQUc7UUFFcEMsSUFBSyxJQUFJLENBQUNoQixVQUFVLEVBQUcsSUFBSSxDQUFDZ0UscUJBQXFCLENBQUVoRDtRQUVuRCxJQUFLLElBQUksQ0FBQzZCLFlBQVksRUFBRyxJQUFJLENBQUNpQixzQkFBc0IsQ0FBRTlDO0lBRXZEO0lBRUEsV0FBVztJQUVYcUQsWUFBYXJELEtBQUssRUFBRztRQUVwQixJQUFJLENBQUNxQyxTQUFTLENBQUNpQixJQUFJLENBQUV0RCxNQUFNdUQsU0FBUztJQUVyQztJQUVBQyxlQUFnQnhELEtBQUssRUFBRztRQUV2QixPQUFPLElBQUksQ0FBQ3lELGlCQUFpQixDQUFFekQsTUFBTXVELFNBQVMsQ0FBRTtRQUVoRCxJQUFNLElBQUlHLElBQUksR0FBR0EsSUFBSSxJQUFJLENBQUNyQixTQUFTLENBQUNoSCxNQUFNLEVBQUVxSSxJQUFPO1lBRWxELElBQUssSUFBSSxDQUFDckIsU0FBUyxDQUFFcUIsRUFBRyxJQUFJMUQsTUFBTXVELFNBQVMsRUFBRztnQkFFN0MsSUFBSSxDQUFDbEIsU0FBUyxDQUFDc0IsTUFBTSxDQUFFRCxHQUFHO2dCQUMxQjtZQUVEO1FBRUQ7SUFFRDtJQUVBRSxtQkFBb0I1RCxLQUFLLEVBQUc7UUFFM0IsSUFBTSxJQUFJMEQsSUFBSSxHQUFHQSxJQUFJLElBQUksQ0FBQ3JCLFNBQVMsQ0FBQ2hILE1BQU0sRUFBRXFJLElBQU87WUFFbEQsSUFBSyxJQUFJLENBQUNyQixTQUFTLENBQUVxQixFQUFHLElBQUkxRCxNQUFNdUQsU0FBUyxFQUFHLE9BQU87UUFFdEQ7UUFFQSxPQUFPO0lBRVI7SUFFQU0sY0FBZTdELEtBQUssRUFBRztRQUV0QixJQUFJckksV0FBVyxJQUFJLENBQUM4TCxpQkFBaUIsQ0FBRXpELE1BQU11RCxTQUFTLENBQUU7UUFFeEQsSUFBSzVMLGFBQWFtTSxXQUFZO1lBRTdCbk0sV0FBVyxJQUFJeEQsMENBQU9BO1lBQ3RCLElBQUksQ0FBQ3NQLGlCQUFpQixDQUFFekQsTUFBTXVELFNBQVMsQ0FBRSxHQUFHNUw7UUFFN0M7UUFFQUEsU0FBU3VELEdBQUcsQ0FBRThFLE1BQU1zQyxLQUFLLEVBQUV0QyxNQUFNdUMsS0FBSztJQUV2QztJQUVBQywwQkFBMkJ4QyxLQUFLLEVBQUc7UUFFbEMsTUFBTXVELFlBQVksTUFBUUEsU0FBUyxLQUFLLElBQUksQ0FBQ2xCLFNBQVMsQ0FBRSxFQUFHLEdBQUssSUFBSSxDQUFDQSxTQUFTLENBQUUsRUFBRyxHQUFHLElBQUksQ0FBQ0EsU0FBUyxDQUFFLEVBQUc7UUFFekcsT0FBTyxJQUFJLENBQUNvQixpQkFBaUIsQ0FBRUYsVUFBVztJQUUzQztJQUVBLEVBQUU7SUFFRlEsa0JBQW1CL0QsS0FBSyxFQUFHO1FBRTFCLE1BQU1nRSxPQUFPaEUsTUFBTWlFLFNBQVM7UUFFNUIsd0RBQXdEO1FBQ3hELE1BQU1DLFdBQVc7WUFDaEJoRSxTQUFTRixNQUFNRSxPQUFPO1lBQ3RCQyxTQUFTSCxNQUFNRyxPQUFPO1lBQ3RCaEMsUUFBUTZCLE1BQU03QixNQUFNO1FBQ3JCO1FBRUEsT0FBUzZGO1lBRVIsS0FBSztnQkFDSkUsU0FBUy9GLE1BQU0sSUFBSTtnQkFDbkI7WUFFRCxLQUFLO2dCQUNKK0YsU0FBUy9GLE1BQU0sSUFBSTtnQkFDbkI7UUFFRjtRQUVBLDRDQUE0QztRQUM1QyxJQUFLNkIsTUFBTTBCLE9BQU8sSUFBSSxDQUFFLElBQUksQ0FBQ3lDLGNBQWMsRUFBRztZQUU3Q0QsU0FBUy9GLE1BQU0sSUFBSTtRQUVwQjtRQUVBLE9BQU8rRjtJQUVSO0lBLzBDQTs7Ozs7RUFLQyxHQUNERSxZQUFhMU0sTUFBTSxFQUFFeEIsYUFBYSxJQUFJLENBQUc7UUFFeEMsS0FBSyxDQUFFd0IsUUFBUXhCO1FBRWYsSUFBSSxDQUFDeUMsS0FBSyxHQUFHdEQsT0FBT0MsSUFBSTtRQUV4Qjs7Ozs7R0FLQyxHQUNELElBQUksQ0FBQ3VDLE1BQU0sR0FBRyxJQUFJekQsMENBQU9BO1FBRXpCOzs7Ozs7R0FNQyxHQUNELElBQUksQ0FBQzhGLE1BQU0sR0FBRyxJQUFJOUYsMENBQU9BO1FBRXpCOzs7OztHQUtDLEdBQ0QsSUFBSSxDQUFDeUwsV0FBVyxHQUFHO1FBRW5COzs7OztHQUtDLEdBQ0QsSUFBSSxDQUFDQyxXQUFXLEdBQUd1RTtRQUVuQjs7Ozs7R0FLQyxHQUNELElBQUksQ0FBQ3RJLE9BQU8sR0FBRztRQUVmOzs7OztHQUtDLEdBQ0QsSUFBSSxDQUFDQyxPQUFPLEdBQUdxSTtRQUVmOzs7OztHQUtDLEdBQ0QsSUFBSSxDQUFDakssZUFBZSxHQUFHO1FBRXZCOzs7OztHQUtDLEdBQ0QsSUFBSSxDQUFDQyxlQUFlLEdBQUdnSztRQUV2Qjs7Ozs7R0FLQyxHQUNELElBQUksQ0FBQ3pLLGFBQWEsR0FBRztRQUVyQjs7Ozs7R0FLQyxHQUNELElBQUksQ0FBQ0MsYUFBYSxHQUFHOUUsS0FBS0ssRUFBRTtRQUU1Qjs7Ozs7O0dBTUMsR0FDRCxJQUFJLENBQUNvRSxlQUFlLEdBQUcsQ0FBRTZLO1FBRXpCOzs7Ozs7R0FNQyxHQUNELElBQUksQ0FBQzNLLGVBQWUsR0FBRzJLO1FBRXZCOzs7Ozs7O0dBT0MsR0FDRCxJQUFJLENBQUNqTCxhQUFhLEdBQUc7UUFFckI7Ozs7Ozs7R0FPQyxHQUNELElBQUksQ0FBQ0UsYUFBYSxHQUFHO1FBRXJCOzs7OztHQUtDLEdBQ0QsSUFBSSxDQUFDMEYsVUFBVSxHQUFHO1FBRWxCOzs7OztHQUtDLEdBQ0QsSUFBSSxDQUFDeEIsU0FBUyxHQUFHO1FBRWpCOzs7Ozs7Ozs7R0FTQyxHQUNELElBQUksQ0FBQ3FFLFlBQVksR0FBRztRQUVwQjs7Ozs7R0FLQyxHQUNELElBQUksQ0FBQ2pCLFdBQVcsR0FBRztRQUVuQjs7Ozs7R0FLQyxHQUNELElBQUksQ0FBQ2tCLGNBQWMsR0FBRztRQUV0Qjs7Ozs7R0FLQyxHQUNELElBQUksQ0FBQ2pELFNBQVMsR0FBRztRQUVqQjs7Ozs7R0FLQyxHQUNELElBQUksQ0FBQ3NDLFFBQVEsR0FBRztRQUVoQjs7Ozs7OztHQU9DLEdBQ0QsSUFBSSxDQUFDL0Usa0JBQWtCLEdBQUc7UUFFMUI7Ozs7OztHQU1DLEdBQ0QsSUFBSSxDQUFDMkYsV0FBVyxHQUFHO1FBRW5COzs7OztHQUtDLEdBQ0QsSUFBSSxDQUFDeEgsWUFBWSxHQUFHO1FBRXBCOzs7Ozs7Ozs7R0FTQyxHQUNELElBQUksQ0FBQ3RCLFVBQVUsR0FBRztRQUVsQjs7Ozs7Ozs7R0FRQyxHQUNELElBQUksQ0FBQ2tFLGVBQWUsR0FBRztRQUV2Qjs7Ozs7Ozs7Ozs7O0dBWUMsR0FDRCxJQUFJLENBQUNxRSxJQUFJLEdBQUc7WUFBRVMsTUFBTTtZQUFhUixJQUFJO1lBQVdTLE9BQU87WUFBY0YsUUFBUTtRQUFZO1FBRXpGOzs7Ozs7Ozs7OztHQVdDLEdBQ0QsSUFBSSxDQUFDc0MsWUFBWSxHQUFHO1lBQUVyQyxNQUFNbE8sd0NBQUtBLENBQUN3QixNQUFNO1lBQUVnUCxRQUFReFEsd0NBQUtBLENBQUN5QixLQUFLO1lBQUUwTSxPQUFPbk8sd0NBQUtBLENBQUMwQixHQUFHO1FBQUM7UUFFaEY7Ozs7Ozs7Ozs7R0FVQyxHQUNELElBQUksQ0FBQytPLE9BQU8sR0FBRztZQUFFQyxLQUFLdlEsd0NBQUtBLENBQUNxQixNQUFNO1lBQUVtUCxLQUFLeFEsd0NBQUtBLENBQUN5USxTQUFTO1FBQUM7UUFFekQ7Ozs7R0FJQyxHQUNELElBQUksQ0FBQ3pNLE9BQU8sR0FBRyxJQUFJLENBQUNMLE1BQU0sQ0FBQytNLEtBQUs7UUFFaEM7Ozs7R0FJQyxHQUNELElBQUksQ0FBQ3hNLFNBQVMsR0FBRyxJQUFJLENBQUNWLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDaU4sS0FBSztRQUUzQzs7OztHQUlDLEdBQ0QsSUFBSSxDQUFDdk0sS0FBSyxHQUFHLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJO1FBRTdCLHdDQUF3QztRQUN4QyxJQUFJLENBQUNOLG9CQUFvQixHQUFHO1FBRTVCLFlBQVk7UUFFWixJQUFJLENBQUM4RSxhQUFhLEdBQUcsSUFBSTFJLDBDQUFPQTtRQUNoQyxJQUFJLENBQUM0SSxlQUFlLEdBQUcsSUFBSWhKLDZDQUFVQTtRQUNyQyxJQUFJLENBQUNrSixtQkFBbUIsR0FBRyxJQUFJOUksMENBQU9BO1FBRXRDLGlDQUFpQztRQUNqQyxJQUFJLENBQUMyRSxLQUFLLEdBQUcsSUFBSS9FLDZDQUFVQSxHQUFHNlEsa0JBQWtCLENBQUVuTixPQUFPZ0YsRUFBRSxFQUFFLElBQUl0SSwwQ0FBT0EsQ0FBRSxHQUFHLEdBQUc7UUFDaEYsSUFBSSxDQUFDMkcsWUFBWSxHQUFHLElBQUksQ0FBQ2hDLEtBQUssQ0FBQzZMLEtBQUssR0FBR0UsTUFBTTtRQUU3Qyw0Q0FBNEM7UUFDNUMsSUFBSSxDQUFDek4sVUFBVSxHQUFHLElBQUlwRCw0Q0FBU0E7UUFDL0IsSUFBSSxDQUFDb0YsZUFBZSxHQUFHLElBQUlwRiw0Q0FBU0E7UUFFcEMsSUFBSSxDQUFDNEcsTUFBTSxHQUFHO1FBQ2QsSUFBSSxDQUFDYixVQUFVLEdBQUcsSUFBSTVGLDBDQUFPQTtRQUU3QixJQUFJLENBQUM2TCxZQUFZLEdBQUcsSUFBSTlMLDBDQUFPQTtRQUMvQixJQUFJLENBQUNzTSxVQUFVLEdBQUcsSUFBSXRNLDBDQUFPQTtRQUM3QixJQUFJLENBQUN1TSxZQUFZLEdBQUcsSUFBSXZNLDBDQUFPQTtRQUUvQixJQUFJLENBQUNvTSxTQUFTLEdBQUcsSUFBSXBNLDBDQUFPQTtRQUM1QixJQUFJLENBQUM4TSxPQUFPLEdBQUcsSUFBSTlNLDBDQUFPQTtRQUMxQixJQUFJLENBQUMrTSxTQUFTLEdBQUcsSUFBSS9NLDBDQUFPQTtRQUU1QixJQUFJLENBQUNrTSxXQUFXLEdBQUcsSUFBSWxNLDBDQUFPQTtRQUM5QixJQUFJLENBQUMyTSxTQUFTLEdBQUcsSUFBSTNNLDBDQUFPQTtRQUM1QixJQUFJLENBQUM0TSxXQUFXLEdBQUcsSUFBSTVNLDBDQUFPQTtRQUU5QixJQUFJLENBQUNvSCxlQUFlLEdBQUcsSUFBSW5ILDBDQUFPQTtRQUNsQyxJQUFJLENBQUNzSCxNQUFNLEdBQUcsSUFBSXZILDBDQUFPQTtRQUN6QixJQUFJLENBQUNxRyxrQkFBa0IsR0FBRztRQUUxQixJQUFJLENBQUM2SCxTQUFTLEdBQUcsRUFBRTtRQUNuQixJQUFJLENBQUNvQixpQkFBaUIsR0FBRyxDQUFDO1FBRTFCLElBQUksQ0FBQ1UsY0FBYyxHQUFHO1FBRXRCLGtCQUFrQjtRQUVsQixJQUFJLENBQUNsTixjQUFjLEdBQUc4TixjQUFjQyxJQUFJLENBQUUsSUFBSTtRQUM5QyxJQUFJLENBQUM1TyxjQUFjLEdBQUc2TyxjQUFjRCxJQUFJLENBQUUsSUFBSTtRQUM5QyxJQUFJLENBQUMzTyxZQUFZLEdBQUc2TyxZQUFZRixJQUFJLENBQUUsSUFBSTtRQUMxQyxJQUFJLENBQUMxTyxjQUFjLEdBQUc2TyxjQUFjSCxJQUFJLENBQUUsSUFBSTtRQUM5QyxJQUFJLENBQUN6TyxhQUFhLEdBQUc2TyxhQUFhSixJQUFJLENBQUUsSUFBSTtRQUM1QyxJQUFJLENBQUNqTixVQUFVLEdBQUdzTixVQUFVTCxJQUFJLENBQUUsSUFBSTtRQUV0QyxJQUFJLENBQUNNLGFBQWEsR0FBR0MsYUFBYVAsSUFBSSxDQUFFLElBQUk7UUFDNUMsSUFBSSxDQUFDUSxZQUFZLEdBQUdDLFlBQVlULElBQUksQ0FBRSxJQUFJO1FBRTFDLElBQUksQ0FBQ1UsWUFBWSxHQUFHQyxZQUFZWCxJQUFJLENBQUUsSUFBSTtRQUMxQyxJQUFJLENBQUNZLFlBQVksR0FBR0MsWUFBWWIsSUFBSSxDQUFFLElBQUk7UUFFMUMsSUFBSSxDQUFDck8scUJBQXFCLEdBQUdtUCxxQkFBcUJkLElBQUksQ0FBRSxJQUFJO1FBQzVELElBQUksQ0FBQ2UsbUJBQW1CLEdBQUdDLG1CQUFtQmhCLElBQUksQ0FBRSxJQUFJO1FBRXhELEVBQUU7UUFFRixJQUFLLElBQUksQ0FBQzlPLFVBQVUsS0FBSyxNQUFPO1lBRS9CLElBQUksQ0FBQ0YsT0FBTyxDQUFFLElBQUksQ0FBQ0UsVUFBVTtRQUU5QjtRQUVBLElBQUksQ0FBQ3dDLE1BQU07SUFFWjtBQTQ5QkQ7QUFFQSxTQUFTdU0sY0FBZWpGLEtBQUs7SUFFNUIsSUFBSyxJQUFJLENBQUNpRyxPQUFPLEtBQUssT0FBUTtJQUU5QixJQUFLLElBQUksQ0FBQzVELFNBQVMsQ0FBQ2hILE1BQU0sS0FBSyxHQUFJO1FBRWxDLElBQUksQ0FBQ25GLFVBQVUsQ0FBQ2dRLGlCQUFpQixDQUFFbEcsTUFBTXVELFNBQVM7UUFFbEQsSUFBSSxDQUFDck4sVUFBVSxDQUFDQyxnQkFBZ0IsQ0FBRSxlQUFlLElBQUksQ0FBQ2MsY0FBYztRQUNwRSxJQUFJLENBQUNmLFVBQVUsQ0FBQ0MsZ0JBQWdCLENBQUUsYUFBYSxJQUFJLENBQUNFLFlBQVk7SUFFakU7SUFFQSxFQUFFO0lBRUYsSUFBSyxJQUFJLENBQUN1TixrQkFBa0IsQ0FBRTVELFFBQVU7SUFFeEMsRUFBRTtJQUVGLElBQUksQ0FBQ3FELFdBQVcsQ0FBRXJEO0lBRWxCLElBQUtBLE1BQU1tRyxXQUFXLEtBQUssU0FBVTtRQUVwQyxJQUFJLENBQUNiLGFBQWEsQ0FBRXRGO0lBRXJCLE9BQU87UUFFTixJQUFJLENBQUMwRixZQUFZLENBQUUxRjtJQUVwQjtBQUVEO0FBRUEsU0FBUytFLGNBQWUvRSxLQUFLO0lBRTVCLElBQUssSUFBSSxDQUFDaUcsT0FBTyxLQUFLLE9BQVE7SUFFOUIsSUFBS2pHLE1BQU1tRyxXQUFXLEtBQUssU0FBVTtRQUVwQyxJQUFJLENBQUNYLFlBQVksQ0FBRXhGO0lBRXBCLE9BQU87UUFFTixJQUFJLENBQUM0RixZQUFZLENBQUU1RjtJQUVwQjtBQUVEO0FBRUEsU0FBU2tGLFlBQWFsRixLQUFLO0lBRTFCLElBQUksQ0FBQ3dELGNBQWMsQ0FBRXhEO0lBRXJCLE9BQVMsSUFBSSxDQUFDcUMsU0FBUyxDQUFDaEgsTUFBTTtRQUU3QixLQUFLO1lBRUosSUFBSSxDQUFDbkYsVUFBVSxDQUFDa1EscUJBQXFCLENBQUVwRyxNQUFNdUQsU0FBUztZQUV0RCxJQUFJLENBQUNyTixVQUFVLENBQUNjLG1CQUFtQixDQUFFLGVBQWUsSUFBSSxDQUFDQyxjQUFjO1lBQ3ZFLElBQUksQ0FBQ2YsVUFBVSxDQUFDYyxtQkFBbUIsQ0FBRSxhQUFhLElBQUksQ0FBQ1gsWUFBWTtZQUVuRSxJQUFJLENBQUNvQyxhQUFhLENBQUU5RDtZQUVwQixJQUFJLENBQUNnRSxLQUFLLEdBQUd0RCxPQUFPQyxJQUFJO1lBRXhCO1FBRUQsS0FBSztZQUVKLE1BQU1pTyxZQUFZLElBQUksQ0FBQ2xCLFNBQVMsQ0FBRSxFQUFHO1lBQ3JDLE1BQU0xSyxXQUFXLElBQUksQ0FBQzhMLGlCQUFpQixDQUFFRixVQUFXO1lBRXBELG9FQUFvRTtZQUNwRSxJQUFJLENBQUMrQixhQUFhLENBQUU7Z0JBQUUvQixXQUFXQTtnQkFBV2pCLE9BQU8zSyxTQUFTZ0UsQ0FBQztnQkFBRTRHLE9BQU81SyxTQUFTaUUsQ0FBQztZQUFDO1lBRWpGO0lBRUY7QUFFRDtBQUVBLFNBQVMrSixZQUFhM0YsS0FBSztJQUUxQixJQUFJcUc7SUFFSixPQUFTckcsTUFBTXNHLE1BQU07UUFFcEIsS0FBSztZQUVKRCxjQUFjLElBQUksQ0FBQy9CLFlBQVksQ0FBQ3JDLElBQUk7WUFDcEM7UUFFRCxLQUFLO1lBRUpvRSxjQUFjLElBQUksQ0FBQy9CLFlBQVksQ0FBQ0MsTUFBTTtZQUN0QztRQUVELEtBQUs7WUFFSjhCLGNBQWMsSUFBSSxDQUFDL0IsWUFBWSxDQUFDcEMsS0FBSztZQUNyQztRQUVEO1lBRUNtRSxjQUFjLENBQUU7SUFFbEI7SUFFQSxPQUFTQTtRQUVSLEtBQUt0Uyx3Q0FBS0EsQ0FBQ3lCLEtBQUs7WUFFZixJQUFLLElBQUksQ0FBQ3dKLFVBQVUsS0FBSyxPQUFRO1lBRWpDLElBQUksQ0FBQ29CLHFCQUFxQixDQUFFSjtZQUU1QixJQUFJLENBQUNySCxLQUFLLEdBQUd0RCxPQUFPRyxLQUFLO1lBRXpCO1FBRUQsS0FBS3pCLHdDQUFLQSxDQUFDd0IsTUFBTTtZQUVoQixJQUFLeUssTUFBTTBCLE9BQU8sSUFBSTFCLE1BQU0yQixPQUFPLElBQUkzQixNQUFNNEIsUUFBUSxFQUFHO2dCQUV2RCxJQUFLLElBQUksQ0FBQy9DLFNBQVMsS0FBSyxPQUFRO2dCQUVoQyxJQUFJLENBQUN5QixtQkFBbUIsQ0FBRU47Z0JBRTFCLElBQUksQ0FBQ3JILEtBQUssR0FBR3RELE9BQU9JLEdBQUc7WUFFeEIsT0FBTztnQkFFTixJQUFLLElBQUksQ0FBQ29NLFlBQVksS0FBSyxPQUFRO2dCQUVuQyxJQUFJLENBQUM5QixzQkFBc0IsQ0FBRUM7Z0JBRTdCLElBQUksQ0FBQ3JILEtBQUssR0FBR3RELE9BQU9FLE1BQU07WUFFM0I7WUFFQTtRQUVELEtBQUt4Qix3Q0FBS0EsQ0FBQzBCLEdBQUc7WUFFYixJQUFLdUssTUFBTTBCLE9BQU8sSUFBSTFCLE1BQU0yQixPQUFPLElBQUkzQixNQUFNNEIsUUFBUSxFQUFHO2dCQUV2RCxJQUFLLElBQUksQ0FBQ0MsWUFBWSxLQUFLLE9BQVE7Z0JBRW5DLElBQUksQ0FBQzlCLHNCQUFzQixDQUFFQztnQkFFN0IsSUFBSSxDQUFDckgsS0FBSyxHQUFHdEQsT0FBT0UsTUFBTTtZQUUzQixPQUFPO2dCQUVOLElBQUssSUFBSSxDQUFDc0osU0FBUyxLQUFLLE9BQVE7Z0JBRWhDLElBQUksQ0FBQ3lCLG1CQUFtQixDQUFFTjtnQkFFMUIsSUFBSSxDQUFDckgsS0FBSyxHQUFHdEQsT0FBT0ksR0FBRztZQUV4QjtZQUVBO1FBRUQ7WUFFQyxJQUFJLENBQUNrRCxLQUFLLEdBQUd0RCxPQUFPQyxJQUFJO0lBRTFCO0lBRUEsSUFBSyxJQUFJLENBQUNxRCxLQUFLLEtBQUt0RCxPQUFPQyxJQUFJLEVBQUc7UUFFakMsSUFBSSxDQUFDbUQsYUFBYSxDQUFFL0Q7SUFFckI7QUFFRDtBQUVBLFNBQVNtUixZQUFhN0YsS0FBSztJQUUxQixPQUFTLElBQUksQ0FBQ3JILEtBQUs7UUFFbEIsS0FBS3RELE9BQU9FLE1BQU07WUFFakIsSUFBSyxJQUFJLENBQUNzTSxZQUFZLEtBQUssT0FBUTtZQUVuQyxJQUFJLENBQUNyQixzQkFBc0IsQ0FBRVI7WUFFN0I7UUFFRCxLQUFLM0ssT0FBT0csS0FBSztZQUVoQixJQUFLLElBQUksQ0FBQ3dKLFVBQVUsS0FBSyxPQUFRO1lBRWpDLElBQUksQ0FBQzZCLHFCQUFxQixDQUFFYjtZQUU1QjtRQUVELEtBQUszSyxPQUFPSSxHQUFHO1lBRWQsSUFBSyxJQUFJLENBQUNvSixTQUFTLEtBQUssT0FBUTtZQUVoQyxJQUFJLENBQUNtQyxtQkFBbUIsQ0FBRWhCO1lBRTFCO0lBRUY7QUFFRDtBQUVBLFNBQVNvRixhQUFjcEYsS0FBSztJQUUzQixJQUFLLElBQUksQ0FBQ2lHLE9BQU8sS0FBSyxTQUFTLElBQUksQ0FBQ2pILFVBQVUsS0FBSyxTQUFTLElBQUksQ0FBQ3JHLEtBQUssS0FBS3RELE9BQU9DLElBQUksRUFBRztJQUV6RjBLLE1BQU1tQyxjQUFjO0lBRXBCLElBQUksQ0FBQzFKLGFBQWEsQ0FBRS9EO0lBRXBCLElBQUksQ0FBQzBNLGlCQUFpQixDQUFFLElBQUksQ0FBQzJDLGlCQUFpQixDQUFFL0Q7SUFFaEQsSUFBSSxDQUFDdkgsYUFBYSxDQUFFOUQ7QUFFckI7QUFFQSxTQUFTMFEsVUFBV3JGLEtBQUs7SUFFeEIsSUFBSyxJQUFJLENBQUNpRyxPQUFPLEtBQUssT0FBUTtJQUU5QixJQUFJLENBQUM1RSxjQUFjLENBQUVyQjtBQUV0QjtBQUVBLFNBQVN1RixhQUFjdkYsS0FBSztJQUUzQixJQUFJLENBQUM2RCxhQUFhLENBQUU3RDtJQUVwQixPQUFTLElBQUksQ0FBQ3FDLFNBQVMsQ0FBQ2hILE1BQU07UUFFN0IsS0FBSztZQUVKLE9BQVMsSUFBSSxDQUFDbUosT0FBTyxDQUFDQyxHQUFHO2dCQUV4QixLQUFLdlEsd0NBQUtBLENBQUNxQixNQUFNO29CQUVoQixJQUFLLElBQUksQ0FBQ3NNLFlBQVksS0FBSyxPQUFRO29CQUVuQyxJQUFJLENBQUNPLHVCQUF1QixDQUFFcEM7b0JBRTlCLElBQUksQ0FBQ3JILEtBQUssR0FBR3RELE9BQU9LLFlBQVk7b0JBRWhDO2dCQUVELEtBQUt4Qix3Q0FBS0EsQ0FBQ3VCLEdBQUc7b0JBRWIsSUFBSyxJQUFJLENBQUNvSixTQUFTLEtBQUssT0FBUTtvQkFFaEMsSUFBSSxDQUFDNEQsb0JBQW9CLENBQUV6QztvQkFFM0IsSUFBSSxDQUFDckgsS0FBSyxHQUFHdEQsT0FBT00sU0FBUztvQkFFN0I7Z0JBRUQ7b0JBRUMsSUFBSSxDQUFDZ0QsS0FBSyxHQUFHdEQsT0FBT0MsSUFBSTtZQUUxQjtZQUVBO1FBRUQsS0FBSztZQUVKLE9BQVMsSUFBSSxDQUFDa1AsT0FBTyxDQUFDRSxHQUFHO2dCQUV4QixLQUFLeFEsd0NBQUtBLENBQUN5USxTQUFTO29CQUVuQixJQUFLLElBQUksQ0FBQzNGLFVBQVUsS0FBSyxTQUFTLElBQUksQ0FBQ0gsU0FBUyxLQUFLLE9BQVE7b0JBRTdELElBQUksQ0FBQytELHlCQUF5QixDQUFFNUM7b0JBRWhDLElBQUksQ0FBQ3JILEtBQUssR0FBR3RELE9BQU9PLGVBQWU7b0JBRW5DO2dCQUVELEtBQUsxQix3Q0FBS0EsQ0FBQ3FTLFlBQVk7b0JBRXRCLElBQUssSUFBSSxDQUFDdkgsVUFBVSxLQUFLLFNBQVMsSUFBSSxDQUFDNkMsWUFBWSxLQUFLLE9BQVE7b0JBRWhFLElBQUksQ0FBQ2dCLDRCQUE0QixDQUFFN0M7b0JBRW5DLElBQUksQ0FBQ3JILEtBQUssR0FBR3RELE9BQU9RLGtCQUFrQjtvQkFFdEM7Z0JBRUQ7b0JBRUMsSUFBSSxDQUFDOEMsS0FBSyxHQUFHdEQsT0FBT0MsSUFBSTtZQUUxQjtZQUVBO1FBRUQ7WUFFQyxJQUFJLENBQUNxRCxLQUFLLEdBQUd0RCxPQUFPQyxJQUFJO0lBRTFCO0lBRUEsSUFBSyxJQUFJLENBQUNxRCxLQUFLLEtBQUt0RCxPQUFPQyxJQUFJLEVBQUc7UUFFakMsSUFBSSxDQUFDbUQsYUFBYSxDQUFFL0Q7SUFFckI7QUFFRDtBQUVBLFNBQVMrUSxZQUFhekYsS0FBSztJQUUxQixJQUFJLENBQUM2RCxhQUFhLENBQUU3RDtJQUVwQixPQUFTLElBQUksQ0FBQ3JILEtBQUs7UUFFbEIsS0FBS3RELE9BQU9LLFlBQVk7WUFFdkIsSUFBSyxJQUFJLENBQUNtTSxZQUFZLEtBQUssT0FBUTtZQUVuQyxJQUFJLENBQUNpQixzQkFBc0IsQ0FBRTlDO1lBRTdCLElBQUksQ0FBQ3RILE1BQU07WUFFWDtRQUVELEtBQUtyRCxPQUFPTSxTQUFTO1lBRXBCLElBQUssSUFBSSxDQUFDa0osU0FBUyxLQUFLLE9BQVE7WUFFaEMsSUFBSSxDQUFDa0UsbUJBQW1CLENBQUUvQztZQUUxQixJQUFJLENBQUN0SCxNQUFNO1lBRVg7UUFFRCxLQUFLckQsT0FBT08sZUFBZTtZQUUxQixJQUFLLElBQUksQ0FBQ29KLFVBQVUsS0FBSyxTQUFTLElBQUksQ0FBQ0gsU0FBUyxLQUFLLE9BQVE7WUFFN0QsSUFBSSxDQUFDc0Usd0JBQXdCLENBQUVuRDtZQUUvQixJQUFJLENBQUN0SCxNQUFNO1lBRVg7UUFFRCxLQUFLckQsT0FBT1Esa0JBQWtCO1lBRTdCLElBQUssSUFBSSxDQUFDbUosVUFBVSxLQUFLLFNBQVMsSUFBSSxDQUFDNkMsWUFBWSxLQUFLLE9BQVE7WUFFaEUsSUFBSSxDQUFDdUIsMkJBQTJCLENBQUVwRDtZQUVsQyxJQUFJLENBQUN0SCxNQUFNO1lBRVg7UUFFRDtZQUVDLElBQUksQ0FBQ0MsS0FBSyxHQUFHdEQsT0FBT0MsSUFBSTtJQUUxQjtBQUVEO0FBRUEsU0FBUzZQLGNBQWVuRixLQUFLO0lBRTVCLElBQUssSUFBSSxDQUFDaUcsT0FBTyxLQUFLLE9BQVE7SUFFOUJqRyxNQUFNbUMsY0FBYztBQUVyQjtBQUVBLFNBQVMyRCxxQkFBc0I5RixLQUFLO0lBRW5DLElBQUtBLE1BQU13RyxHQUFHLEtBQUssV0FBWTtRQUU5QixJQUFJLENBQUNyQyxjQUFjLEdBQUc7UUFFdEIsTUFBTTFOLFdBQVcsSUFBSSxDQUFDUCxVQUFVLENBQUNRLFdBQVcsSUFBSSxpQ0FBaUM7UUFFakZELFNBQVNOLGdCQUFnQixDQUFFLFNBQVMsSUFBSSxDQUFDNFAsbUJBQW1CLEVBQUU7WUFBRXZQLFNBQVM7WUFBTUksU0FBUztRQUFLO0lBRTlGO0FBRUQ7QUFFQSxTQUFTb1AsbUJBQW9CaEcsS0FBSztJQUVqQyxJQUFLQSxNQUFNd0csR0FBRyxLQUFLLFdBQVk7UUFFOUIsSUFBSSxDQUFDckMsY0FBYyxHQUFHO1FBRXRCLE1BQU0xTixXQUFXLElBQUksQ0FBQ1AsVUFBVSxDQUFDUSxXQUFXLElBQUksaUNBQWlDO1FBRWpGRCxTQUFTTyxtQkFBbUIsQ0FBRSxTQUFTLElBQUksQ0FBQytPLG1CQUFtQixFQUFFO1lBQUV2UCxTQUFTO1lBQU1JLFNBQVM7UUFBSztJQUVqRztBQUVEO0FBRXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9scy5qcz9kMWZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbnRyb2xzLFxuXHRNT1VTRSxcblx0UXVhdGVybmlvbixcblx0U3BoZXJpY2FsLFxuXHRUT1VDSCxcblx0VmVjdG9yMixcblx0VmVjdG9yMyxcblx0UGxhbmUsXG5cdFJheSxcblx0TWF0aFV0aWxzXG59IGZyb20gJ3RocmVlJztcblxuLyoqXG4gKiBGaXJlcyB3aGVuIHRoZSBjYW1lcmEgaGFzIGJlZW4gdHJhbnNmb3JtZWQgYnkgdGhlIGNvbnRyb2xzLlxuICpcbiAqIEBldmVudCBPcmJpdENvbnRyb2xzI2NoYW5nZVxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY29uc3QgX2NoYW5nZUV2ZW50ID0geyB0eXBlOiAnY2hhbmdlJyB9O1xuXG4vKipcbiAqIEZpcmVzIHdoZW4gYW4gaW50ZXJhY3Rpb24gd2FzIGluaXRpYXRlZC5cbiAqXG4gKiBAZXZlbnQgT3JiaXRDb250cm9scyNzdGFydFxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY29uc3QgX3N0YXJ0RXZlbnQgPSB7IHR5cGU6ICdzdGFydCcgfTtcblxuLyoqXG4gKiBGaXJlcyB3aGVuIGFuIGludGVyYWN0aW9uIGhhcyBmaW5pc2hlZC5cbiAqXG4gKiBAZXZlbnQgT3JiaXRDb250cm9scyNlbmRcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmNvbnN0IF9lbmRFdmVudCA9IHsgdHlwZTogJ2VuZCcgfTtcblxuY29uc3QgX3JheSA9IG5ldyBSYXkoKTtcbmNvbnN0IF9wbGFuZSA9IG5ldyBQbGFuZSgpO1xuY29uc3QgX1RJTFRfTElNSVQgPSBNYXRoLmNvcyggNzAgKiBNYXRoVXRpbHMuREVHMlJBRCApO1xuXG5jb25zdCBfdiA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdHdvUEkgPSAyICogTWF0aC5QSTtcblxuY29uc3QgX1NUQVRFID0ge1xuXHROT05FOiAtIDEsXG5cdFJPVEFURTogMCxcblx0RE9MTFk6IDEsXG5cdFBBTjogMixcblx0VE9VQ0hfUk9UQVRFOiAzLFxuXHRUT1VDSF9QQU46IDQsXG5cdFRPVUNIX0RPTExZX1BBTjogNSxcblx0VE9VQ0hfRE9MTFlfUk9UQVRFOiA2XG59O1xuY29uc3QgX0VQUyA9IDAuMDAwMDAxO1xuXG5cbi8qKlxuICogT3JiaXQgY29udHJvbHMgYWxsb3cgdGhlIGNhbWVyYSB0byBvcmJpdCBhcm91bmQgYSB0YXJnZXQuXG4gKlxuICogT3JiaXRDb250cm9scyBwZXJmb3JtcyBvcmJpdGluZywgZG9sbHlpbmcgKHpvb21pbmcpLCBhbmQgcGFubmluZy4gVW5saWtlIHtAbGluayBUcmFja2JhbGxDb250cm9sc30sXG4gKiBpdCBtYWludGFpbnMgdGhlIFwidXBcIiBkaXJlY3Rpb24gYG9iamVjdC51cGAgKCtZIGJ5IGRlZmF1bHQpLlxuICpcbiAqIC0gT3JiaXQ6IExlZnQgbW91c2UgLyB0b3VjaDogb25lLWZpbmdlciBtb3ZlLlxuICogLSBab29tOiBNaWRkbGUgbW91c2UsIG9yIG1vdXNld2hlZWwgLyB0b3VjaDogdHdvLWZpbmdlciBzcHJlYWQgb3Igc3F1aXNoLlxuICogLSBQYW46IFJpZ2h0IG1vdXNlLCBvciBsZWZ0IG1vdXNlICsgY3RybC9tZXRhL3NoaWZ0S2V5LCBvciBhcnJvdyBrZXlzIC8gdG91Y2g6IHR3by1maW5nZXIgbW92ZS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgY29udHJvbHMgPSBuZXcgT3JiaXRDb250cm9scyggY2FtZXJhLCByZW5kZXJlci5kb21FbGVtZW50ICk7XG4gKlxuICogLy8gY29udHJvbHMudXBkYXRlKCkgbXVzdCBiZSBjYWxsZWQgYWZ0ZXIgYW55IG1hbnVhbCBjaGFuZ2VzIHRvIHRoZSBjYW1lcmEncyB0cmFuc2Zvcm1cbiAqIGNhbWVyYS5wb3NpdGlvbi5zZXQoIDAsIDIwLCAxMDAgKTtcbiAqIGNvbnRyb2xzLnVwZGF0ZSgpO1xuICpcbiAqIGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gKlxuICogXHQvLyByZXF1aXJlZCBpZiBjb250cm9scy5lbmFibGVEYW1waW5nIG9yIGNvbnRyb2xzLmF1dG9Sb3RhdGUgYXJlIHNldCB0byB0cnVlXG4gKiBcdGNvbnRyb2xzLnVwZGF0ZSgpO1xuICpcbiAqIFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhICk7XG4gKlxuICogfVxuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIENvbnRyb2xzXG4gKiBAdGhyZWVfaW1wb3J0IGltcG9ydCB7IE9yYml0Q29udHJvbHMgfSBmcm9tICd0aHJlZS9hZGRvbnMvY29udHJvbHMvT3JiaXRDb250cm9scy5qcyc7XG4gKi9cbmNsYXNzIE9yYml0Q29udHJvbHMgZXh0ZW5kcyBDb250cm9scyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY29udHJvbHMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSBvYmplY3QgdGhhdCBpcyBtYW5hZ2VkIGJ5IHRoZSBjb250cm9scy5cblx0ICogQHBhcmFtIHs/SFRNTERPTUVsZW1lbnR9IGRvbUVsZW1lbnQgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgZm9yIGV2ZW50IGxpc3RlbmVycy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBvYmplY3QsIGRvbUVsZW1lbnQgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIG9iamVjdCwgZG9tRWxlbWVudCApO1xuXG5cdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5OT05FO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGZvY3VzIHBvaW50IG9mIHRoZSBjb250cm9scywgdGhlIGBvYmplY3RgIG9yYml0cyBhcm91bmQgdGhpcy5cblx0XHQgKiBJdCBjYW4gYmUgdXBkYXRlZCBtYW51YWxseSBhdCBhbnkgcG9pbnQgdG8gY2hhbmdlIHRoZSBmb2N1cyBvZiB0aGUgY29udHJvbHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLnRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZm9jdXMgcG9pbnQgb2YgdGhlIGBtaW5UYXJnZXRSYWRpdXNgIGFuZCBgbWF4VGFyZ2V0UmFkaXVzYCBsaW1pdHMuXG5cdFx0ICogSXQgY2FuIGJlIHVwZGF0ZWQgbWFudWFsbHkgYXQgYW55IHBvaW50IHRvIGNoYW5nZSB0aGUgY2VudGVyIG9mIGludGVyZXN0XG5cdFx0ICogZm9yIHRoZSBgdGFyZ2V0YC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IzfVxuXHRcdCAqL1xuXHRcdHRoaXMuY3Vyc29yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBmYXIgeW91IGNhbiBkb2xseSBpbiAocGVyc3BlY3RpdmUgY2FtZXJhIG9ubHkpLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5taW5EaXN0YW5jZSA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgZmFyIHlvdSBjYW4gZG9sbHkgb3V0IChwZXJzcGVjdGl2ZSBjYW1lcmEgb25seSkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IEluZmluaXR5XG5cdFx0ICovXG5cdFx0dGhpcy5tYXhEaXN0YW5jZSA9IEluZmluaXR5O1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhciB5b3UgY2FuIHpvb20gaW4gKG9ydGhvZ3JhcGhpYyBjYW1lcmEgb25seSkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLm1pblpvb20gPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhciB5b3UgY2FuIHpvb20gb3V0IChvcnRob2dyYXBoaWMgY2FtZXJhIG9ubHkpLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCBJbmZpbml0eVxuXHRcdCAqL1xuXHRcdHRoaXMubWF4Wm9vbSA9IEluZmluaXR5O1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGNsb3NlIHlvdSBjYW4gZ2V0IHRoZSB0YXJnZXQgdG8gdGhlIDNEIGBjdXJzb3JgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5taW5UYXJnZXRSYWRpdXMgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhciB5b3UgY2FuIG1vdmUgdGhlIHRhcmdldCBmcm9tIHRoZSAzRCBgY3Vyc29yYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgSW5maW5pdHlcblx0XHQgKi9cblx0XHR0aGlzLm1heFRhcmdldFJhZGl1cyA9IEluZmluaXR5O1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhciB5b3UgY2FuIG9yYml0IHZlcnRpY2FsbHksIGxvd2VyIGxpbWl0LiBSYW5nZSBpcyBgWzAsIE1hdGguUEldYCByYWRpYW5zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5taW5Qb2xhckFuZ2xlID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBmYXIgeW91IGNhbiBvcmJpdCB2ZXJ0aWNhbGx5LCB1cHBlciBsaW1pdC4gUmFuZ2UgaXMgYFswLCBNYXRoLlBJXWAgcmFkaWFucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgTWF0aC5QSVxuXHRcdCAqL1xuXHRcdHRoaXMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgaG9yaXpvbnRhbGx5LCBsb3dlciBsaW1pdC4gSWYgc2V0LCB0aGUgaW50ZXJ2YWwgYFsgbWluLCBtYXggXWBcblx0XHQgKiBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIGBbIC0gMiBQSSwgMiBQSSBdYCwgd2l0aCBgKCBtYXggLSBtaW4gPCAyIFBJIClgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAtSW5maW5pdHlcblx0XHQgKi9cblx0XHR0aGlzLm1pbkF6aW11dGhBbmdsZSA9IC0gSW5maW5pdHk7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgaG9yaXpvbnRhbGx5LCB1cHBlciBsaW1pdC4gSWYgc2V0LCB0aGUgaW50ZXJ2YWwgYFsgbWluLCBtYXggXWBcblx0XHQgKiBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIGBbIC0gMiBQSSwgMiBQSSBdYCwgd2l0aCBgKCBtYXggLSBtaW4gPCAyIFBJIClgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAtSW5maW5pdHlcblx0XHQgKi9cblx0XHR0aGlzLm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0IHRvIGB0cnVlYCB0byBlbmFibGUgZGFtcGluZyAoaW5lcnRpYSksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGdpdmUgYSBzZW5zZSBvZiB3ZWlnaHRcblx0XHQgKiB0byB0aGUgY29udHJvbHMuIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgYHVwZGF0ZSgpYCBpbiB5b3VyIGFuaW1hdGlvblxuXHRcdCAqIGxvb3AuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZW5hYmxlRGFtcGluZyA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRhbXBpbmcgaW5lcnRpYSB1c2VkIGlmIGBlbmFibGVEYW1waW5nYCBpcyBzZXQgdG8gYHRydWVgLlxuXHRcdCAqXG5cdFx0ICogTm90ZSB0aGF0IGZvciB0aGlzIHRvIHdvcmssIHlvdSBtdXN0IGNhbGwgYHVwZGF0ZSgpYCBpbiB5b3VyIGFuaW1hdGlvbiBsb29wLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwLjA1XG5cdFx0ICovXG5cdFx0dGhpcy5kYW1waW5nRmFjdG9yID0gMC4wNTtcblxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIHpvb21pbmcgKGRvbGx5aW5nKSBvZiB0aGUgY2FtZXJhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBTcGVlZCBvZiB6b29taW5nIC8gZG9sbHlpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnpvb21TcGVlZCA9IDEuMDtcblxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIHJvdGF0aW9uIG9mIHRoZSBjYW1lcmEuXG5cdFx0ICpcblx0XHQgKiBOb3RlIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gZGlzYWJsZSBhIHNpbmdsZSBheGlzIGJ5IHNldHRpbmcgdGhlIG1pbiBhbmQgbWF4IG9mIHRoZVxuXHRcdCAqIGBtaW5Qb2xhckFuZ2xlYCBvciBgbWluQXppbXV0aEFuZ2xlYCB0byB0aGUgc2FtZSB2YWx1ZSwgd2hpY2ggd2lsbCBjYXVzZSB0aGUgdmVydGljYWxcblx0XHQgKiBvciBob3Jpem9udGFsIHJvdGF0aW9uIHRvIGJlIGZpeGVkIGF0IHRoYXQgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5lbmFibGVSb3RhdGUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogU3BlZWQgb2Ygcm90YXRpb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnJvdGF0ZVNwZWVkID0gMS4wO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhc3QgdG8gcm90YXRlIHRoZSBjYW1lcmEgd2hlbiB0aGUga2V5Ym9hcmQgaXMgdXNlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMua2V5Um90YXRlU3BlZWQgPSAxLjA7XG5cblx0XHQvKipcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSBjYW1lcmEgcGFubmluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmVuYWJsZVBhbiA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBTcGVlZCBvZiBwYW5uaW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5wYW5TcGVlZCA9IDEuMDtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgaG93IHRoZSBjYW1lcmEncyBwb3NpdGlvbiBpcyB0cmFuc2xhdGVkIHdoZW4gcGFubmluZy4gSWYgYHRydWVgLCB0aGUgY2FtZXJhIHBhbnNcblx0XHQgKiBpbiBzY3JlZW4gc3BhY2UuIE90aGVyd2lzZSwgdGhlIGNhbWVyYSBwYW5zIGluIHRoZSBwbGFuZSBvcnRob2dvbmFsIHRvIHRoZSBjYW1lcmEncyB1cFxuXHRcdCAqIGRpcmVjdGlvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLnNjcmVlblNwYWNlUGFubmluZyA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgZmFzdCB0byBwYW4gdGhlIGNhbWVyYSB3aGVuIHRoZSBrZXlib2FyZCBpcyB1c2VkIGluXG5cdFx0ICogcGl4ZWxzIHBlciBrZXlwcmVzcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgN1xuXHRcdCAqL1xuXHRcdHRoaXMua2V5UGFuU3BlZWQgPSA3LjA7XG5cblx0XHQvKipcblx0XHQgKiBTZXR0aW5nIHRoaXMgcHJvcGVydHkgdG8gYHRydWVgIGFsbG93cyB0byB6b29tIHRvIHRoZSBjdXJzb3IncyBwb3NpdGlvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy56b29tVG9DdXJzb3IgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldCB0byB0cnVlIHRvIGF1dG9tYXRpY2FsbHkgcm90YXRlIGFyb3VuZCB0aGUgdGFyZ2V0XG5cdFx0ICpcblx0XHQgKiBOb3RlIHRoYXQgaWYgdGhpcyBpcyBlbmFibGVkLCB5b3UgbXVzdCBjYWxsIGB1cGRhdGUoKWAgaW4geW91ciBhbmltYXRpb24gbG9vcC5cblx0XHQgKiBJZiB5b3Ugd2FudCB0aGUgYXV0by1yb3RhdGUgc3BlZWQgdG8gYmUgaW5kZXBlbmRlbnQgb2YgdGhlIGZyYW1lIHJhdGUgKHRoZSByZWZyZXNoXG5cdFx0ICogcmF0ZSBvZiB0aGUgZGlzcGxheSksIHlvdSBtdXN0IHBhc3MgdGhlIHRpbWUgYGRlbHRhVGltZWAsIGluIHNlY29uZHMsIHRvIGB1cGRhdGUoKWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b1JvdGF0ZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhc3QgdG8gcm90YXRlIGFyb3VuZCB0aGUgdGFyZ2V0IGlmIGBhdXRvUm90YXRlYCBpcyBgdHJ1ZWAuIFRoZSBkZWZhdWx0ICBlcXVhdGVzIHRvIDMwIHNlY29uZHNcblx0XHQgKiBwZXIgb3JiaXQgYXQgNjBmcHMuXG5cdFx0ICpcblx0XHQgKiBOb3RlIHRoYXQgaWYgYGF1dG9Sb3RhdGVgIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgYHVwZGF0ZSgpYCBpbiB5b3VyIGFuaW1hdGlvbiBsb29wLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAyXG5cdFx0ICovXG5cdFx0dGhpcy5hdXRvUm90YXRlU3BlZWQgPSAyLjA7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIG9iamVjdCBjb250YWlucyByZWZlcmVuY2VzIHRvIHRoZSBrZXljb2RlcyBmb3IgY29udHJvbGxpbmcgY2FtZXJhIHBhbm5pbmcuXG5cdFx0ICpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIGNvbnRyb2xzLmtleXMgPSB7XG5cdFx0ICogXHRMRUZUOiAnQXJyb3dMZWZ0JywgLy9sZWZ0IGFycm93XG5cdFx0ICogXHRVUDogJ0Fycm93VXAnLCAvLyB1cCBhcnJvd1xuXHRcdCAqIFx0UklHSFQ6ICdBcnJvd1JpZ2h0JywgLy8gcmlnaHQgYXJyb3dcblx0XHQgKiBcdEJPVFRPTTogJ0Fycm93RG93bicgLy8gZG93biBhcnJvd1xuXHRcdCAqIH1cblx0XHQgKiBgYGBcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMua2V5cyA9IHsgTEVGVDogJ0Fycm93TGVmdCcsIFVQOiAnQXJyb3dVcCcsIFJJR0hUOiAnQXJyb3dSaWdodCcsIEJPVFRPTTogJ0Fycm93RG93bicgfTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgb2JqZWN0IGNvbnRhaW5zIHJlZmVyZW5jZXMgdG8gdGhlIG1vdXNlIGFjdGlvbnMgdXNlZCBieSB0aGUgY29udHJvbHMuXG5cdFx0ICpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIGNvbnRyb2xzLm1vdXNlQnV0dG9ucyA9IHtcblx0XHQgKiBcdExFRlQ6IFRIUkVFLk1PVVNFLlJPVEFURSxcblx0XHQgKiBcdE1JRERMRTogVEhSRUUuTU9VU0UuRE9MTFksXG5cdFx0ICogXHRSSUdIVDogVEhSRUUuTU9VU0UuUEFOXG5cdFx0ICogfVxuXHRcdCAqIGBgYFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5tb3VzZUJ1dHRvbnMgPSB7IExFRlQ6IE1PVVNFLlJPVEFURSwgTUlERExFOiBNT1VTRS5ET0xMWSwgUklHSFQ6IE1PVVNFLlBBTiB9O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBvYmplY3QgY29udGFpbnMgcmVmZXJlbmNlcyB0byB0aGUgdG91Y2ggYWN0aW9ucyB1c2VkIGJ5IHRoZSBjb250cm9scy5cblx0XHQgKlxuXHRcdCAqIGBgYGpzXG5cdFx0ICogY29udHJvbHMubW91c2VCdXR0b25zID0ge1xuXHRcdCAqIFx0T05FOiBUSFJFRS5UT1VDSC5ST1RBVEUsXG5cdFx0ICogXHRUV086IFRIUkVFLlRPVUNILkRPTExZX1BBTlxuXHRcdCAqIH1cblx0XHQgKiBgYGBcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMudG91Y2hlcyA9IHsgT05FOiBUT1VDSC5ST1RBVEUsIFRXTzogVE9VQ0guRE9MTFlfUEFOIH07XG5cblx0XHQvKipcblx0XHQgKiBVc2VkIGludGVybmFsbHkgYnkgYHNhdmVTdGF0ZSgpYCBhbmQgYHJlc2V0KClgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjN9XG5cdFx0ICovXG5cdFx0dGhpcy50YXJnZXQwID0gdGhpcy50YXJnZXQuY2xvbmUoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFVzZWQgaW50ZXJuYWxseSBieSBgc2F2ZVN0YXRlKClgIGFuZCBgcmVzZXQoKWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XG5cblx0XHQvKipcblx0XHQgKiBVc2VkIGludGVybmFsbHkgYnkgYHNhdmVTdGF0ZSgpYCBhbmQgYHJlc2V0KClgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnpvb20wID0gdGhpcy5vYmplY3Quem9vbTtcblxuXHRcdC8vIHRoZSB0YXJnZXQgRE9NIGVsZW1lbnQgZm9yIGtleSBldmVudHNcblx0XHR0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzID0gbnVsbDtcblxuXHRcdC8vIGludGVybmFsc1xuXG5cdFx0dGhpcy5fbGFzdFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHR0aGlzLl9sYXN0UXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cdFx0dGhpcy5fbGFzdFRhcmdldFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIHNvIGNhbWVyYS51cCBpcyB0aGUgb3JiaXQgYXhpc1xuXHRcdHRoaXMuX3F1YXQgPSBuZXcgUXVhdGVybmlvbigpLnNldEZyb21Vbml0VmVjdG9ycyggb2JqZWN0LnVwLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApICk7XG5cdFx0dGhpcy5fcXVhdEludmVyc2UgPSB0aGlzLl9xdWF0LmNsb25lKCkuaW52ZXJ0KCk7XG5cblx0XHQvLyBjdXJyZW50IHBvc2l0aW9uIGluIHNwaGVyaWNhbCBjb29yZGluYXRlc1xuXHRcdHRoaXMuX3NwaGVyaWNhbCA9IG5ldyBTcGhlcmljYWwoKTtcblx0XHR0aGlzLl9zcGhlcmljYWxEZWx0YSA9IG5ldyBTcGhlcmljYWwoKTtcblxuXHRcdHRoaXMuX3NjYWxlID0gMTtcblx0XHR0aGlzLl9wYW5PZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dGhpcy5fcm90YXRlU3RhcnQgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHRoaXMuX3JvdGF0ZUVuZCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dGhpcy5fcm90YXRlRGVsdGEgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0dGhpcy5fcGFuU3RhcnQgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHRoaXMuX3BhbkVuZCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dGhpcy5fcGFuRGVsdGEgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0dGhpcy5fZG9sbHlTdGFydCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dGhpcy5fZG9sbHlFbmQgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHRoaXMuX2RvbGx5RGVsdGEgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0dGhpcy5fZG9sbHlEaXJlY3Rpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHRoaXMuX21vdXNlID0gbmV3IFZlY3RvcjIoKTtcblx0XHR0aGlzLl9wZXJmb3JtQ3Vyc29yWm9vbSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fcG9pbnRlcnMgPSBbXTtcblx0XHR0aGlzLl9wb2ludGVyUG9zaXRpb25zID0ge307XG5cblx0XHR0aGlzLl9jb250cm9sQWN0aXZlID0gZmFsc2U7XG5cblx0XHQvLyBldmVudCBsaXN0ZW5lcnNcblxuXHRcdHRoaXMuX29uUG9pbnRlck1vdmUgPSBvblBvaW50ZXJNb3ZlLmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLl9vblBvaW50ZXJEb3duID0gb25Qb2ludGVyRG93bi5iaW5kKCB0aGlzICk7XG5cdFx0dGhpcy5fb25Qb2ludGVyVXAgPSBvblBvaW50ZXJVcC5iaW5kKCB0aGlzICk7XG5cdFx0dGhpcy5fb25Db250ZXh0TWVudSA9IG9uQ29udGV4dE1lbnUuYmluZCggdGhpcyApO1xuXHRcdHRoaXMuX29uTW91c2VXaGVlbCA9IG9uTW91c2VXaGVlbC5iaW5kKCB0aGlzICk7XG5cdFx0dGhpcy5fb25LZXlEb3duID0gb25LZXlEb3duLmJpbmQoIHRoaXMgKTtcblxuXHRcdHRoaXMuX29uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKCB0aGlzICk7XG5cdFx0dGhpcy5fb25Ub3VjaE1vdmUgPSBvblRvdWNoTW92ZS5iaW5kKCB0aGlzICk7XG5cblx0XHR0aGlzLl9vbk1vdXNlRG93biA9IG9uTW91c2VEb3duLmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLl9vbk1vdXNlTW92ZSA9IG9uTW91c2VNb3ZlLmJpbmQoIHRoaXMgKTtcblxuXHRcdHRoaXMuX2ludGVyY2VwdENvbnRyb2xEb3duID0gaW50ZXJjZXB0Q29udHJvbERvd24uYmluZCggdGhpcyApO1xuXHRcdHRoaXMuX2ludGVyY2VwdENvbnRyb2xVcCA9IGludGVyY2VwdENvbnRyb2xVcC5iaW5kKCB0aGlzICk7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmRvbUVsZW1lbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuY29ubmVjdCggdGhpcy5kb21FbGVtZW50ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRjb25uZWN0KCBlbGVtZW50ICkge1xuXG5cdFx0c3VwZXIuY29ubmVjdCggZWxlbWVudCApO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdwb2ludGVyZG93bicsIHRoaXMuX29uUG9pbnRlckRvd24gKTtcblx0XHR0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJjYW5jZWwnLCB0aGlzLl9vblBvaW50ZXJVcCApO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIHRoaXMuX29uQ29udGV4dE1lbnUgKTtcblx0XHR0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3doZWVsJywgdGhpcy5fb25Nb3VzZVdoZWVsLCB7IHBhc3NpdmU6IGZhbHNlIH0gKTtcblxuXHRcdGNvbnN0IGRvY3VtZW50ID0gdGhpcy5kb21FbGVtZW50LmdldFJvb3ROb2RlKCk7IC8vIG9mZnNjcmVlbiBjYW52YXMgY29tcGF0aWJpbGl0eVxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgdGhpcy5faW50ZXJjZXB0Q29udHJvbERvd24sIHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogdHJ1ZSB9ICk7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQuc3R5bGUudG91Y2hBY3Rpb24gPSAnbm9uZSc7IC8vIGRpc2FibGUgdG91Y2ggc2Nyb2xsXG5cblx0fVxuXG5cdGRpc2Nvbm5lY3QoKSB7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJkb3duJywgdGhpcy5fb25Qb2ludGVyRG93biApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblBvaW50ZXJNb3ZlICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdwb2ludGVydXAnLCB0aGlzLl9vblBvaW50ZXJVcCApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcmNhbmNlbCcsIHRoaXMuX29uUG9pbnRlclVwICk7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3doZWVsJywgdGhpcy5fb25Nb3VzZVdoZWVsICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIHRoaXMuX29uQ29udGV4dE1lbnUgKTtcblxuXHRcdHRoaXMuc3RvcExpc3RlblRvS2V5RXZlbnRzKCk7XG5cblx0XHRjb25zdCBkb2N1bWVudCA9IHRoaXMuZG9tRWxlbWVudC5nZXRSb290Tm9kZSgpOyAvLyBvZmZzY3JlZW4gY2FudmFzIGNvbXBhdGliaWxpdHlcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMuX2ludGVyY2VwdENvbnRyb2xEb3duLCB7IGNhcHR1cmU6IHRydWUgfSApO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LnN0eWxlLnRvdWNoQWN0aW9uID0gJ2F1dG8nO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5kaXNjb25uZWN0KCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIGN1cnJlbnQgdmVydGljYWwgcm90YXRpb24sIGluIHJhZGlhbnMuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGN1cnJlbnQgdmVydGljYWwgcm90YXRpb24sIGluIHJhZGlhbnMuXG5cdCAqL1xuXHRnZXRQb2xhckFuZ2xlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3NwaGVyaWNhbC5waGk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIGN1cnJlbnQgaG9yaXpvbnRhbCByb3RhdGlvbiwgaW4gcmFkaWFucy5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VycmVudCBob3Jpem9udGFsIHJvdGF0aW9uLCBpbiByYWRpYW5zLlxuXHQgKi9cblx0Z2V0QXppbXV0aGFsQW5nbGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fc3BoZXJpY2FsLnRoZXRhO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhIHRvIHRoZSB0YXJnZXQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYSB0byB0aGUgdGFyZ2V0LlxuXHQgKi9cblx0Z2V0RGlzdGFuY2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5vYmplY3QucG9zaXRpb24uZGlzdGFuY2VUbyggdGhpcy50YXJnZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMga2V5IGV2ZW50IGxpc3RlbmVycyB0byB0aGUgZ2l2ZW4gRE9NIGVsZW1lbnQuXG5cdCAqIGB3aW5kb3dgIGlzIGEgcmVjb21tZW5kZWQgYXJndW1lbnQgZm9yIHVzaW5nIHRoaXMgbWV0aG9kLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0hUTUxET01FbGVtZW50fSBkb21FbGVtZW50IC0gVGhlIERPTSBlbGVtZW50XG5cdCAqL1xuXHRsaXN0ZW5Ub0tleUV2ZW50cyggZG9tRWxlbWVudCApIHtcblxuXHRcdGRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24gKTtcblx0XHR0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzID0gZG9tRWxlbWVudDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIGtleSBldmVudCBsaXN0ZW5lciBwcmV2aW91c2x5IGRlZmluZWQgd2l0aCBgbGlzdGVuVG9LZXlFdmVudHMoKWAuXG5cdCAqL1xuXHRzdG9wTGlzdGVuVG9LZXlFdmVudHMoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2RvbUVsZW1lbnRLZXlFdmVudHMgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2RvbUVsZW1lbnRLZXlFdmVudHMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24gKTtcblx0XHRcdHRoaXMuX2RvbUVsZW1lbnRLZXlFdmVudHMgPSBudWxsO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU2F2ZSB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY29udHJvbHMuIFRoaXMgY2FuIGxhdGVyIGJlIHJlY292ZXJlZCB3aXRoIGByZXNldCgpYC5cblx0ICovXG5cdHNhdmVTdGF0ZSgpIHtcblxuXHRcdHRoaXMudGFyZ2V0MC5jb3B5KCB0aGlzLnRhcmdldCApO1xuXHRcdHRoaXMucG9zaXRpb24wLmNvcHkoIHRoaXMub2JqZWN0LnBvc2l0aW9uICk7XG5cdFx0dGhpcy56b29tMCA9IHRoaXMub2JqZWN0Lnpvb207XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNldCB0aGUgY29udHJvbHMgdG8gdGhlaXIgc3RhdGUgZnJvbSBlaXRoZXIgdGhlIGxhc3QgdGltZSB0aGUgYHNhdmVTdGF0ZSgpYFxuXHQgKiB3YXMgY2FsbGVkLCBvciB0aGUgaW5pdGlhbCBzdGF0ZS5cblx0ICovXG5cdHJlc2V0KCkge1xuXG5cdFx0dGhpcy50YXJnZXQuY29weSggdGhpcy50YXJnZXQwICk7XG5cdFx0dGhpcy5vYmplY3QucG9zaXRpb24uY29weSggdGhpcy5wb3NpdGlvbjAgKTtcblx0XHR0aGlzLm9iamVjdC56b29tID0gdGhpcy56b29tMDtcblxuXHRcdHRoaXMub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9jaGFuZ2VFdmVudCApO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuTk9ORTtcblxuXHR9XG5cblx0dXBkYXRlKCBkZWx0YVRpbWUgPSBudWxsICkge1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLm9iamVjdC5wb3NpdGlvbjtcblxuXHRcdF92LmNvcHkoIHBvc2l0aW9uICkuc3ViKCB0aGlzLnRhcmdldCApO1xuXG5cdFx0Ly8gcm90YXRlIG9mZnNldCB0byBcInktYXhpcy1pcy11cFwiIHNwYWNlXG5cdFx0X3YuYXBwbHlRdWF0ZXJuaW9uKCB0aGlzLl9xdWF0ICk7XG5cblx0XHQvLyBhbmdsZSBmcm9tIHotYXhpcyBhcm91bmQgeS1heGlzXG5cdFx0dGhpcy5fc3BoZXJpY2FsLnNldEZyb21WZWN0b3IzKCBfdiApO1xuXG5cdFx0aWYgKCB0aGlzLmF1dG9Sb3RhdGUgJiYgdGhpcy5zdGF0ZSA9PT0gX1NUQVRFLk5PTkUgKSB7XG5cblx0XHRcdHRoaXMuX3JvdGF0ZUxlZnQoIHRoaXMuX2dldEF1dG9Sb3RhdGlvbkFuZ2xlKCBkZWx0YVRpbWUgKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZURhbXBpbmcgKSB7XG5cblx0XHRcdHRoaXMuX3NwaGVyaWNhbC50aGV0YSArPSB0aGlzLl9zcGhlcmljYWxEZWx0YS50aGV0YSAqIHRoaXMuZGFtcGluZ0ZhY3Rvcjtcblx0XHRcdHRoaXMuX3NwaGVyaWNhbC5waGkgKz0gdGhpcy5fc3BoZXJpY2FsRGVsdGEucGhpICogdGhpcy5kYW1waW5nRmFjdG9yO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5fc3BoZXJpY2FsLnRoZXRhICs9IHRoaXMuX3NwaGVyaWNhbERlbHRhLnRoZXRhO1xuXHRcdFx0dGhpcy5fc3BoZXJpY2FsLnBoaSArPSB0aGlzLl9zcGhlcmljYWxEZWx0YS5waGk7XG5cblx0XHR9XG5cblx0XHQvLyByZXN0cmljdCB0aGV0YSB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXG5cblx0XHRsZXQgbWluID0gdGhpcy5taW5BemltdXRoQW5nbGU7XG5cdFx0bGV0IG1heCA9IHRoaXMubWF4QXppbXV0aEFuZ2xlO1xuXG5cdFx0aWYgKCBpc0Zpbml0ZSggbWluICkgJiYgaXNGaW5pdGUoIG1heCApICkge1xuXG5cdFx0XHRpZiAoIG1pbiA8IC0gTWF0aC5QSSApIG1pbiArPSBfdHdvUEk7IGVsc2UgaWYgKCBtaW4gPiBNYXRoLlBJICkgbWluIC09IF90d29QSTtcblxuXHRcdFx0aWYgKCBtYXggPCAtIE1hdGguUEkgKSBtYXggKz0gX3R3b1BJOyBlbHNlIGlmICggbWF4ID4gTWF0aC5QSSApIG1heCAtPSBfdHdvUEk7XG5cblx0XHRcdGlmICggbWluIDw9IG1heCApIHtcblxuXHRcdFx0XHR0aGlzLl9zcGhlcmljYWwudGhldGEgPSBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCB0aGlzLl9zcGhlcmljYWwudGhldGEgKSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3NwaGVyaWNhbC50aGV0YSA9ICggdGhpcy5fc3BoZXJpY2FsLnRoZXRhID4gKCBtaW4gKyBtYXggKSAvIDIgKSA/XG5cdFx0XHRcdFx0TWF0aC5tYXgoIG1pbiwgdGhpcy5fc3BoZXJpY2FsLnRoZXRhICkgOlxuXHRcdFx0XHRcdE1hdGgubWluKCBtYXgsIHRoaXMuX3NwaGVyaWNhbC50aGV0YSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xuXHRcdHRoaXMuX3NwaGVyaWNhbC5waGkgPSBNYXRoLm1heCggdGhpcy5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbiggdGhpcy5tYXhQb2xhckFuZ2xlLCB0aGlzLl9zcGhlcmljYWwucGhpICkgKTtcblxuXHRcdHRoaXMuX3NwaGVyaWNhbC5tYWtlU2FmZSgpO1xuXG5cblx0XHQvLyBtb3ZlIHRhcmdldCB0byBwYW5uZWQgbG9jYXRpb25cblxuXHRcdGlmICggdGhpcy5lbmFibGVEYW1waW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHRoaXMuX3Bhbk9mZnNldCwgdGhpcy5kYW1waW5nRmFjdG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnRhcmdldC5hZGQoIHRoaXMuX3Bhbk9mZnNldCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gTGltaXQgdGhlIHRhcmdldCBkaXN0YW5jZSBmcm9tIHRoZSBjdXJzb3IgdG8gY3JlYXRlIGEgc3BoZXJlIGFyb3VuZCB0aGUgY2VudGVyIG9mIGludGVyZXN0XG5cdFx0dGhpcy50YXJnZXQuc3ViKCB0aGlzLmN1cnNvciApO1xuXHRcdHRoaXMudGFyZ2V0LmNsYW1wTGVuZ3RoKCB0aGlzLm1pblRhcmdldFJhZGl1cywgdGhpcy5tYXhUYXJnZXRSYWRpdXMgKTtcblx0XHR0aGlzLnRhcmdldC5hZGQoIHRoaXMuY3Vyc29yICk7XG5cblx0XHRsZXQgem9vbUNoYW5nZWQgPSBmYWxzZTtcblx0XHQvLyBhZGp1c3QgdGhlIGNhbWVyYSBwb3NpdGlvbiBiYXNlZCBvbiB6b29tIG9ubHkgaWYgd2UncmUgbm90IHpvb21pbmcgdG8gdGhlIGN1cnNvciBvciBpZiBpdCdzIGFuIG9ydGhvIGNhbWVyYVxuXHRcdC8vIHdlIGFkanVzdCB6b29tIGxhdGVyIGluIHRoZXNlIGNhc2VzXG5cdFx0aWYgKCB0aGlzLnpvb21Ub0N1cnNvciAmJiB0aGlzLl9wZXJmb3JtQ3Vyc29yWm9vbSB8fCB0aGlzLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0dGhpcy5fc3BoZXJpY2FsLnJhZGl1cyA9IHRoaXMuX2NsYW1wRGlzdGFuY2UoIHRoaXMuX3NwaGVyaWNhbC5yYWRpdXMgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IHByZXZSYWRpdXMgPSB0aGlzLl9zcGhlcmljYWwucmFkaXVzO1xuXHRcdFx0dGhpcy5fc3BoZXJpY2FsLnJhZGl1cyA9IHRoaXMuX2NsYW1wRGlzdGFuY2UoIHRoaXMuX3NwaGVyaWNhbC5yYWRpdXMgKiB0aGlzLl9zY2FsZSApO1xuXHRcdFx0em9vbUNoYW5nZWQgPSBwcmV2UmFkaXVzICE9IHRoaXMuX3NwaGVyaWNhbC5yYWRpdXM7XG5cblx0XHR9XG5cblx0XHRfdi5zZXRGcm9tU3BoZXJpY2FsKCB0aGlzLl9zcGhlcmljYWwgKTtcblxuXHRcdC8vIHJvdGF0ZSBvZmZzZXQgYmFjayB0byBcImNhbWVyYS11cC12ZWN0b3ItaXMtdXBcIiBzcGFjZVxuXHRcdF92LmFwcGx5UXVhdGVybmlvbiggdGhpcy5fcXVhdEludmVyc2UgKTtcblxuXHRcdHBvc2l0aW9uLmNvcHkoIHRoaXMudGFyZ2V0ICkuYWRkKCBfdiApO1xuXG5cdFx0dGhpcy5vYmplY3QubG9va0F0KCB0aGlzLnRhcmdldCApO1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZURhbXBpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuX3NwaGVyaWNhbERlbHRhLnRoZXRhICo9ICggMSAtIHRoaXMuZGFtcGluZ0ZhY3RvciApO1xuXHRcdFx0dGhpcy5fc3BoZXJpY2FsRGVsdGEucGhpICo9ICggMSAtIHRoaXMuZGFtcGluZ0ZhY3RvciApO1xuXG5cdFx0XHR0aGlzLl9wYW5PZmZzZXQubXVsdGlwbHlTY2FsYXIoIDEgLSB0aGlzLmRhbXBpbmdGYWN0b3IgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuX3NwaGVyaWNhbERlbHRhLnNldCggMCwgMCwgMCApO1xuXG5cdFx0XHR0aGlzLl9wYW5PZmZzZXQuc2V0KCAwLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHQvLyBhZGp1c3QgY2FtZXJhIHBvc2l0aW9uXG5cdFx0aWYgKCB0aGlzLnpvb21Ub0N1cnNvciAmJiB0aGlzLl9wZXJmb3JtQ3Vyc29yWm9vbSApIHtcblxuXHRcdFx0bGV0IG5ld1JhZGl1cyA9IG51bGw7XG5cdFx0XHRpZiAoIHRoaXMub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdFx0Ly8gbW92ZSB0aGUgY2FtZXJhIGRvd24gdGhlIHBvaW50ZXIgcmF5XG5cdFx0XHRcdC8vIHRoaXMgbWV0aG9kIGF2b2lkcyBmbG9hdGluZyBwb2ludCBlcnJvclxuXHRcdFx0XHRjb25zdCBwcmV2UmFkaXVzID0gX3YubGVuZ3RoKCk7XG5cdFx0XHRcdG5ld1JhZGl1cyA9IHRoaXMuX2NsYW1wRGlzdGFuY2UoIHByZXZSYWRpdXMgKiB0aGlzLl9zY2FsZSApO1xuXG5cdFx0XHRcdGNvbnN0IHJhZGl1c0RlbHRhID0gcHJldlJhZGl1cyAtIG5ld1JhZGl1cztcblx0XHRcdFx0dGhpcy5vYmplY3QucG9zaXRpb24uYWRkU2NhbGVkVmVjdG9yKCB0aGlzLl9kb2xseURpcmVjdGlvbiwgcmFkaXVzRGVsdGEgKTtcblx0XHRcdFx0dGhpcy5vYmplY3QudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdFx0XHR6b29tQ2hhbmdlZCA9ICEhIHJhZGl1c0RlbHRhO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0aGlzLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0XHQvLyBhZGp1c3QgdGhlIG9ydGhvIGNhbWVyYSBwb3NpdGlvbiBiYXNlZCBvbiB6b29tIGNoYW5nZXNcblx0XHRcdFx0Y29uc3QgbW91c2VCZWZvcmUgPSBuZXcgVmVjdG9yMyggdGhpcy5fbW91c2UueCwgdGhpcy5fbW91c2UueSwgMCApO1xuXHRcdFx0XHRtb3VzZUJlZm9yZS51bnByb2plY3QoIHRoaXMub2JqZWN0ICk7XG5cblx0XHRcdFx0Y29uc3QgcHJldlpvb20gPSB0aGlzLm9iamVjdC56b29tO1xuXHRcdFx0XHR0aGlzLm9iamVjdC56b29tID0gTWF0aC5tYXgoIHRoaXMubWluWm9vbSwgTWF0aC5taW4oIHRoaXMubWF4Wm9vbSwgdGhpcy5vYmplY3Quem9vbSAvIHRoaXMuX3NjYWxlICkgKTtcblx0XHRcdFx0dGhpcy5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0XHRcdHpvb21DaGFuZ2VkID0gcHJldlpvb20gIT09IHRoaXMub2JqZWN0Lnpvb207XG5cblx0XHRcdFx0Y29uc3QgbW91c2VBZnRlciA9IG5ldyBWZWN0b3IzKCB0aGlzLl9tb3VzZS54LCB0aGlzLl9tb3VzZS55LCAwICk7XG5cdFx0XHRcdG1vdXNlQWZ0ZXIudW5wcm9qZWN0KCB0aGlzLm9iamVjdCApO1xuXG5cdFx0XHRcdHRoaXMub2JqZWN0LnBvc2l0aW9uLnN1YiggbW91c2VBZnRlciApLmFkZCggbW91c2VCZWZvcmUgKTtcblx0XHRcdFx0dGhpcy5vYmplY3QudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdFx0XHRuZXdSYWRpdXMgPSBfdi5sZW5ndGgoKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSB6b29tIHRvIGN1cnNvciBkaXNhYmxlZC4nICk7XG5cdFx0XHRcdHRoaXMuem9vbVRvQ3Vyc29yID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaGFuZGxlIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHRhcmdldFxuXHRcdFx0aWYgKCBuZXdSYWRpdXMgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCB0aGlzLnNjcmVlblNwYWNlUGFubmluZyApIHtcblxuXHRcdFx0XHRcdC8vIHBvc2l0aW9uIHRoZSBvcmJpdCB0YXJnZXQgaW4gZnJvbnQgb2YgdGhlIG5ldyBjYW1lcmEgcG9zaXRpb25cblx0XHRcdFx0XHR0aGlzLnRhcmdldC5zZXQoIDAsIDAsIC0gMSApXG5cdFx0XHRcdFx0XHQudHJhbnNmb3JtRGlyZWN0aW9uKCB0aGlzLm9iamVjdC5tYXRyaXggKVxuXHRcdFx0XHRcdFx0Lm11bHRpcGx5U2NhbGFyKCBuZXdSYWRpdXMgKVxuXHRcdFx0XHRcdFx0LmFkZCggdGhpcy5vYmplY3QucG9zaXRpb24gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gZ2V0IHRoZSByYXkgYW5kIHRyYW5zbGF0aW9uIHBsYW5lIHRvIGNvbXB1dGUgdGFyZ2V0XG5cdFx0XHRcdFx0X3JheS5vcmlnaW4uY29weSggdGhpcy5vYmplY3QucG9zaXRpb24gKTtcblx0XHRcdFx0XHRfcmF5LmRpcmVjdGlvbi5zZXQoIDAsIDAsIC0gMSApLnRyYW5zZm9ybURpcmVjdGlvbiggdGhpcy5vYmplY3QubWF0cml4ICk7XG5cblx0XHRcdFx0XHQvLyBpZiB0aGUgY2FtZXJhIGlzIDIwIGRlZ3JlZXMgYWJvdmUgdGhlIGhvcml6b24gdGhlbiBkb24ndCBhZGp1c3QgdGhlIGZvY3VzIHRhcmdldCB0byBhdm9pZFxuXHRcdFx0XHRcdC8vIGV4dHJlbWVseSBsYXJnZSB2YWx1ZXNcblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCB0aGlzLm9iamVjdC51cC5kb3QoIF9yYXkuZGlyZWN0aW9uICkgKSA8IF9USUxUX0xJTUlUICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLm9iamVjdC5sb29rQXQoIHRoaXMudGFyZ2V0ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRfcGxhbmUuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQoIHRoaXMub2JqZWN0LnVwLCB0aGlzLnRhcmdldCApO1xuXHRcdFx0XHRcdFx0X3JheS5pbnRlcnNlY3RQbGFuZSggX3BsYW5lLCB0aGlzLnRhcmdldCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdGNvbnN0IHByZXZab29tID0gdGhpcy5vYmplY3Quem9vbTtcblx0XHRcdHRoaXMub2JqZWN0Lnpvb20gPSBNYXRoLm1heCggdGhpcy5taW5ab29tLCBNYXRoLm1pbiggdGhpcy5tYXhab29tLCB0aGlzLm9iamVjdC56b29tIC8gdGhpcy5fc2NhbGUgKSApO1xuXG5cdFx0XHRpZiAoIHByZXZab29tICE9PSB0aGlzLm9iamVjdC56b29tICkge1xuXG5cdFx0XHRcdHRoaXMub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRcdFx0em9vbUNoYW5nZWQgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLl9zY2FsZSA9IDE7XG5cdFx0dGhpcy5fcGVyZm9ybUN1cnNvclpvb20gPSBmYWxzZTtcblxuXHRcdC8vIHVwZGF0ZSBjb25kaXRpb24gaXM6XG5cdFx0Ly8gbWluKGNhbWVyYSBkaXNwbGFjZW1lbnQsIGNhbWVyYSByb3RhdGlvbiBpbiByYWRpYW5zKV4yID4gRVBTXG5cdFx0Ly8gdXNpbmcgc21hbGwtYW5nbGUgYXBwcm94aW1hdGlvbiBjb3MoeC8yKSA9IDEgLSB4XjIgLyA4XG5cblx0XHRpZiAoIHpvb21DaGFuZ2VkIHx8XG5cdFx0XHR0aGlzLl9sYXN0UG9zaXRpb24uZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMub2JqZWN0LnBvc2l0aW9uICkgPiBfRVBTIHx8XG5cdFx0XHQ4ICogKCAxIC0gdGhpcy5fbGFzdFF1YXRlcm5pb24uZG90KCB0aGlzLm9iamVjdC5xdWF0ZXJuaW9uICkgKSA+IF9FUFMgfHxcblx0XHRcdHRoaXMuX2xhc3RUYXJnZXRQb3NpdGlvbi5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy50YXJnZXQgKSA+IF9FUFMgKSB7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggX2NoYW5nZUV2ZW50ICk7XG5cblx0XHRcdHRoaXMuX2xhc3RQb3NpdGlvbi5jb3B5KCB0aGlzLm9iamVjdC5wb3NpdGlvbiApO1xuXHRcdFx0dGhpcy5fbGFzdFF1YXRlcm5pb24uY29weSggdGhpcy5vYmplY3QucXVhdGVybmlvbiApO1xuXHRcdFx0dGhpcy5fbGFzdFRhcmdldFBvc2l0aW9uLmNvcHkoIHRoaXMudGFyZ2V0ICk7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRfZ2V0QXV0b1JvdGF0aW9uQW5nbGUoIGRlbHRhVGltZSApIHtcblxuXHRcdGlmICggZGVsdGFUaW1lICE9PSBudWxsICkge1xuXG5cdFx0XHRyZXR1cm4gKCBfdHdvUEkgLyA2MCAqIHRoaXMuYXV0b1JvdGF0ZVNwZWVkICkgKiBkZWx0YVRpbWU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gX3R3b1BJIC8gNjAgLyA2MCAqIHRoaXMuYXV0b1JvdGF0ZVNwZWVkO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfZ2V0Wm9vbVNjYWxlKCBkZWx0YSApIHtcblxuXHRcdGNvbnN0IG5vcm1hbGl6ZWREZWx0YSA9IE1hdGguYWJzKCBkZWx0YSAqIDAuMDEgKTtcblx0XHRyZXR1cm4gTWF0aC5wb3coIDAuOTUsIHRoaXMuem9vbVNwZWVkICogbm9ybWFsaXplZERlbHRhICk7XG5cblx0fVxuXG5cdF9yb3RhdGVMZWZ0KCBhbmdsZSApIHtcblxuXHRcdHRoaXMuX3NwaGVyaWNhbERlbHRhLnRoZXRhIC09IGFuZ2xlO1xuXG5cdH1cblxuXHRfcm90YXRlVXAoIGFuZ2xlICkge1xuXG5cdFx0dGhpcy5fc3BoZXJpY2FsRGVsdGEucGhpIC09IGFuZ2xlO1xuXG5cdH1cblxuXHRfcGFuTGVmdCggZGlzdGFuY2UsIG9iamVjdE1hdHJpeCApIHtcblxuXHRcdF92LnNldEZyb21NYXRyaXhDb2x1bW4oIG9iamVjdE1hdHJpeCwgMCApOyAvLyBnZXQgWCBjb2x1bW4gb2Ygb2JqZWN0TWF0cml4XG5cdFx0X3YubXVsdGlwbHlTY2FsYXIoIC0gZGlzdGFuY2UgKTtcblxuXHRcdHRoaXMuX3Bhbk9mZnNldC5hZGQoIF92ICk7XG5cblx0fVxuXG5cdF9wYW5VcCggZGlzdGFuY2UsIG9iamVjdE1hdHJpeCApIHtcblxuXHRcdGlmICggdGhpcy5zY3JlZW5TcGFjZVBhbm5pbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdF92LnNldEZyb21NYXRyaXhDb2x1bW4oIG9iamVjdE1hdHJpeCwgMSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3Yuc2V0RnJvbU1hdHJpeENvbHVtbiggb2JqZWN0TWF0cml4LCAwICk7XG5cdFx0XHRfdi5jcm9zc1ZlY3RvcnMoIHRoaXMub2JqZWN0LnVwLCBfdiApO1xuXG5cdFx0fVxuXG5cdFx0X3YubXVsdGlwbHlTY2FsYXIoIGRpc3RhbmNlICk7XG5cblx0XHR0aGlzLl9wYW5PZmZzZXQuYWRkKCBfdiApO1xuXG5cdH1cblxuXHQvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcblx0X3BhbiggZGVsdGFYLCBkZWx0YVkgKSB7XG5cblx0XHRjb25zdCBlbGVtZW50ID0gdGhpcy5kb21FbGVtZW50O1xuXG5cdFx0aWYgKCB0aGlzLm9iamVjdC5pc1BlcnNwZWN0aXZlQ2FtZXJhICkge1xuXG5cdFx0XHQvLyBwZXJzcGVjdGl2ZVxuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLm9iamVjdC5wb3NpdGlvbjtcblx0XHRcdF92LmNvcHkoIHBvc2l0aW9uICkuc3ViKCB0aGlzLnRhcmdldCApO1xuXHRcdFx0bGV0IHRhcmdldERpc3RhbmNlID0gX3YubGVuZ3RoKCk7XG5cblx0XHRcdC8vIGhhbGYgb2YgdGhlIGZvdiBpcyBjZW50ZXIgdG8gdG9wIG9mIHNjcmVlblxuXHRcdFx0dGFyZ2V0RGlzdGFuY2UgKj0gTWF0aC50YW4oICggdGhpcy5vYmplY3QuZm92IC8gMiApICogTWF0aC5QSSAvIDE4MC4wICk7XG5cblx0XHRcdC8vIHdlIHVzZSBvbmx5IGNsaWVudEhlaWdodCBoZXJlIHNvIGFzcGVjdCByYXRpbyBkb2VzIG5vdCBkaXN0b3J0IHNwZWVkXG5cdFx0XHR0aGlzLl9wYW5MZWZ0KCAyICogZGVsdGFYICogdGFyZ2V0RGlzdGFuY2UgLyBlbGVtZW50LmNsaWVudEhlaWdodCwgdGhpcy5vYmplY3QubWF0cml4ICk7XG5cdFx0XHR0aGlzLl9wYW5VcCggMiAqIGRlbHRhWSAqIHRhcmdldERpc3RhbmNlIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsIHRoaXMub2JqZWN0Lm1hdHJpeCApO1xuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdC8vIG9ydGhvZ3JhcGhpY1xuXHRcdFx0dGhpcy5fcGFuTGVmdCggZGVsdGFYICogKCB0aGlzLm9iamVjdC5yaWdodCAtIHRoaXMub2JqZWN0LmxlZnQgKSAvIHRoaXMub2JqZWN0Lnpvb20gLyBlbGVtZW50LmNsaWVudFdpZHRoLCB0aGlzLm9iamVjdC5tYXRyaXggKTtcblx0XHRcdHRoaXMuX3BhblVwKCBkZWx0YVkgKiAoIHRoaXMub2JqZWN0LnRvcCAtIHRoaXMub2JqZWN0LmJvdHRvbSApIC8gdGhpcy5vYmplY3Quem9vbSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCB0aGlzLm9iamVjdC5tYXRyaXggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGNhbWVyYSBuZWl0aGVyIG9ydGhvZ3JhcGhpYyBub3IgcGVyc3BlY3RpdmVcblx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIHBhbiBkaXNhYmxlZC4nICk7XG5cdFx0XHR0aGlzLmVuYWJsZVBhbiA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfZG9sbHlPdXQoIGRvbGx5U2NhbGUgKSB7XG5cblx0XHRpZiAoIHRoaXMub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEgfHwgdGhpcy5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdHRoaXMuX3NjYWxlIC89IGRvbGx5U2NhbGU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBkb2xseS96b29tIGRpc2FibGVkLicgKTtcblx0XHRcdHRoaXMuZW5hYmxlWm9vbSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfZG9sbHlJbiggZG9sbHlTY2FsZSApIHtcblxuXHRcdGlmICggdGhpcy5vYmplY3QuaXNQZXJzcGVjdGl2ZUNhbWVyYSB8fCB0aGlzLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0dGhpcy5fc2NhbGUgKj0gZG9sbHlTY2FsZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIGRvbGx5L3pvb20gZGlzYWJsZWQuJyApO1xuXHRcdFx0dGhpcy5lbmFibGVab29tID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdF91cGRhdGVab29tUGFyYW1ldGVycyggeCwgeSApIHtcblxuXHRcdGlmICggISB0aGlzLnpvb21Ub0N1cnNvciApIHtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcGVyZm9ybUN1cnNvclpvb20gPSB0cnVlO1xuXG5cdFx0Y29uc3QgcmVjdCA9IHRoaXMuZG9tRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRjb25zdCBkeCA9IHggLSByZWN0LmxlZnQ7XG5cdFx0Y29uc3QgZHkgPSB5IC0gcmVjdC50b3A7XG5cdFx0Y29uc3QgdyA9IHJlY3Qud2lkdGg7XG5cdFx0Y29uc3QgaCA9IHJlY3QuaGVpZ2h0O1xuXG5cdFx0dGhpcy5fbW91c2UueCA9ICggZHggLyB3ICkgKiAyIC0gMTtcblx0XHR0aGlzLl9tb3VzZS55ID0gLSAoIGR5IC8gaCApICogMiArIDE7XG5cblx0XHR0aGlzLl9kb2xseURpcmVjdGlvbi5zZXQoIHRoaXMuX21vdXNlLngsIHRoaXMuX21vdXNlLnksIDEgKS51bnByb2plY3QoIHRoaXMub2JqZWN0ICkuc3ViKCB0aGlzLm9iamVjdC5wb3NpdGlvbiApLm5vcm1hbGl6ZSgpO1xuXG5cdH1cblxuXHRfY2xhbXBEaXN0YW5jZSggZGlzdCApIHtcblxuXHRcdHJldHVybiBNYXRoLm1heCggdGhpcy5taW5EaXN0YW5jZSwgTWF0aC5taW4oIHRoaXMubWF4RGlzdGFuY2UsIGRpc3QgKSApO1xuXG5cdH1cblxuXHQvL1xuXHQvLyBldmVudCBjYWxsYmFja3MgLSB1cGRhdGUgdGhlIG9iamVjdCBzdGF0ZVxuXHQvL1xuXG5cdF9oYW5kbGVNb3VzZURvd25Sb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5fcm90YXRlU3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdF9oYW5kbGVNb3VzZURvd25Eb2xseSggZXZlbnQgKSB7XG5cblx0XHR0aGlzLl91cGRhdGVab29tUGFyYW1ldGVycyggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WCApO1xuXHRcdHRoaXMuX2RvbGx5U3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdF9oYW5kbGVNb3VzZURvd25QYW4oIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5fcGFuU3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdF9oYW5kbGVNb3VzZU1vdmVSb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5fcm90YXRlRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0dGhpcy5fcm90YXRlRGVsdGEuc3ViVmVjdG9ycyggdGhpcy5fcm90YXRlRW5kLCB0aGlzLl9yb3RhdGVTdGFydCApLm11bHRpcGx5U2NhbGFyKCB0aGlzLnJvdGF0ZVNwZWVkICk7XG5cblx0XHRjb25zdCBlbGVtZW50ID0gdGhpcy5kb21FbGVtZW50O1xuXG5cdFx0dGhpcy5fcm90YXRlTGVmdCggX3R3b1BJICogdGhpcy5fcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7IC8vIHllcywgaGVpZ2h0XG5cblx0XHR0aGlzLl9yb3RhdGVVcCggX3R3b1BJICogdGhpcy5fcm90YXRlRGVsdGEueSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cblx0XHR0aGlzLl9yb3RhdGVTdGFydC5jb3B5KCB0aGlzLl9yb3RhdGVFbmQgKTtcblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0fVxuXG5cdF9oYW5kbGVNb3VzZU1vdmVEb2xseSggZXZlbnQgKSB7XG5cblx0XHR0aGlzLl9kb2xseUVuZC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdHRoaXMuX2RvbGx5RGVsdGEuc3ViVmVjdG9ycyggdGhpcy5fZG9sbHlFbmQsIHRoaXMuX2RvbGx5U3RhcnQgKTtcblxuXHRcdGlmICggdGhpcy5fZG9sbHlEZWx0YS55ID4gMCApIHtcblxuXHRcdFx0dGhpcy5fZG9sbHlPdXQoIHRoaXMuX2dldFpvb21TY2FsZSggdGhpcy5fZG9sbHlEZWx0YS55ICkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuX2RvbGx5RGVsdGEueSA8IDAgKSB7XG5cblx0XHRcdHRoaXMuX2RvbGx5SW4oIHRoaXMuX2dldFpvb21TY2FsZSggdGhpcy5fZG9sbHlEZWx0YS55ICkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX2RvbGx5U3RhcnQuY29weSggdGhpcy5fZG9sbHlFbmQgKTtcblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0fVxuXG5cdF9oYW5kbGVNb3VzZU1vdmVQYW4oIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5fcGFuRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0dGhpcy5fcGFuRGVsdGEuc3ViVmVjdG9ycyggdGhpcy5fcGFuRW5kLCB0aGlzLl9wYW5TdGFydCApLm11bHRpcGx5U2NhbGFyKCB0aGlzLnBhblNwZWVkICk7XG5cblx0XHR0aGlzLl9wYW4oIHRoaXMuX3BhbkRlbHRhLngsIHRoaXMuX3BhbkRlbHRhLnkgKTtcblxuXHRcdHRoaXMuX3BhblN0YXJ0LmNvcHkoIHRoaXMuX3BhbkVuZCApO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cblx0X2hhbmRsZU1vdXNlV2hlZWwoIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5fdXBkYXRlWm9vbVBhcmFtZXRlcnMoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdGlmICggZXZlbnQuZGVsdGFZIDwgMCApIHtcblxuXHRcdFx0dGhpcy5fZG9sbHlJbiggdGhpcy5fZ2V0Wm9vbVNjYWxlKCBldmVudC5kZWx0YVkgKSApO1xuXG5cdFx0fSBlbHNlIGlmICggZXZlbnQuZGVsdGFZID4gMCApIHtcblxuXHRcdFx0dGhpcy5fZG9sbHlPdXQoIHRoaXMuX2dldFpvb21TY2FsZSggZXZlbnQuZGVsdGFZICkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0fVxuXG5cdF9oYW5kbGVLZXlEb3duKCBldmVudCApIHtcblxuXHRcdGxldCBuZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0c3dpdGNoICggZXZlbnQuY29kZSApIHtcblxuXHRcdFx0Y2FzZSB0aGlzLmtleXMuVVA6XG5cblx0XHRcdFx0aWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9yb3RhdGVVcCggX3R3b1BJICogdGhpcy5rZXlSb3RhdGVTcGVlZCAvIHRoaXMuZG9tRWxlbWVudC5jbGllbnRIZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVBhbiApIHtcblxuXHRcdFx0XHRcdFx0dGhpcy5fcGFuKCAwLCB0aGlzLmtleVBhblNwZWVkICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgdGhpcy5rZXlzLkJPVFRPTTpcblxuXHRcdFx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSApIHtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3JvdGF0ZVVwKCAtIF90d29QSSAqIHRoaXMua2V5Um90YXRlU3BlZWQgLyB0aGlzLmRvbUVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVQYW4gKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3BhbiggMCwgLSB0aGlzLmtleVBhblNwZWVkICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgdGhpcy5rZXlzLkxFRlQ6XG5cblx0XHRcdFx0aWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9yb3RhdGVMZWZ0KCBfdHdvUEkgKiB0aGlzLmtleVJvdGF0ZVNwZWVkIC8gdGhpcy5kb21FbGVtZW50LmNsaWVudEhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9wYW4oIHRoaXMua2V5UGFuU3BlZWQsIDAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSB0aGlzLmtleXMuUklHSFQ6XG5cblx0XHRcdFx0aWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9yb3RhdGVMZWZ0KCAtIF90d29QSSAqIHRoaXMua2V5Um90YXRlU3BlZWQgLyB0aGlzLmRvbUVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVQYW4gKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3BhbiggLSB0aGlzLmtleVBhblNwZWVkLCAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0XHRpZiAoIG5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHQvLyBwcmV2ZW50IHRoZSBicm93c2VyIGZyb20gc2Nyb2xsaW5nIG9uIGN1cnNvciBrZXlzXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cblx0fVxuXG5cdF9oYW5kbGVUb3VjaFN0YXJ0Um90YXRlKCBldmVudCApIHtcblxuXHRcdGlmICggdGhpcy5fcG9pbnRlcnMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHR0aGlzLl9yb3RhdGVTdGFydC5zZXQoIGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLl9nZXRTZWNvbmRQb2ludGVyUG9zaXRpb24oIGV2ZW50ICk7XG5cblx0XHRcdGNvbnN0IHggPSAwLjUgKiAoIGV2ZW50LnBhZ2VYICsgcG9zaXRpb24ueCApO1xuXHRcdFx0Y29uc3QgeSA9IDAuNSAqICggZXZlbnQucGFnZVkgKyBwb3NpdGlvbi55ICk7XG5cblx0XHRcdHRoaXMuX3JvdGF0ZVN0YXJ0LnNldCggeCwgeSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfaGFuZGxlVG91Y2hTdGFydFBhbiggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuX3BvaW50ZXJzLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdFx0dGhpcy5fcGFuU3RhcnQuc2V0KCBldmVudC5wYWdlWCwgZXZlbnQucGFnZVkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5fZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKCBldmVudCApO1xuXG5cdFx0XHRjb25zdCB4ID0gMC41ICogKCBldmVudC5wYWdlWCArIHBvc2l0aW9uLnggKTtcblx0XHRcdGNvbnN0IHkgPSAwLjUgKiAoIGV2ZW50LnBhZ2VZICsgcG9zaXRpb24ueSApO1xuXG5cdFx0XHR0aGlzLl9wYW5TdGFydC5zZXQoIHgsIHkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0X2hhbmRsZVRvdWNoU3RhcnREb2xseSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuX2dldFNlY29uZFBvaW50ZXJQb3NpdGlvbiggZXZlbnQgKTtcblxuXHRcdGNvbnN0IGR4ID0gZXZlbnQucGFnZVggLSBwb3NpdGlvbi54O1xuXHRcdGNvbnN0IGR5ID0gZXZlbnQucGFnZVkgLSBwb3NpdGlvbi55O1xuXG5cdFx0Y29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoIGR4ICogZHggKyBkeSAqIGR5ICk7XG5cblx0XHR0aGlzLl9kb2xseVN0YXJ0LnNldCggMCwgZGlzdGFuY2UgKTtcblxuXHR9XG5cblx0X2hhbmRsZVRvdWNoU3RhcnREb2xseVBhbiggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSApIHRoaXMuX2hhbmRsZVRvdWNoU3RhcnREb2xseSggZXZlbnQgKTtcblxuXHRcdGlmICggdGhpcy5lbmFibGVQYW4gKSB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0UGFuKCBldmVudCApO1xuXG5cdH1cblxuXHRfaGFuZGxlVG91Y2hTdGFydERvbGx5Um90YXRlKCBldmVudCApIHtcblxuXHRcdGlmICggdGhpcy5lbmFibGVab29tICkgdGhpcy5faGFuZGxlVG91Y2hTdGFydERvbGx5KCBldmVudCApO1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZVJvdGF0ZSApIHRoaXMuX2hhbmRsZVRvdWNoU3RhcnRSb3RhdGUoIGV2ZW50ICk7XG5cblx0fVxuXG5cdF9oYW5kbGVUb3VjaE1vdmVSb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLl9wb2ludGVycy5sZW5ndGggPT0gMSApIHtcblxuXHRcdFx0dGhpcy5fcm90YXRlRW5kLnNldCggZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuX2dldFNlY29uZFBvaW50ZXJQb3NpdGlvbiggZXZlbnQgKTtcblxuXHRcdFx0Y29uc3QgeCA9IDAuNSAqICggZXZlbnQucGFnZVggKyBwb3NpdGlvbi54ICk7XG5cdFx0XHRjb25zdCB5ID0gMC41ICogKCBldmVudC5wYWdlWSArIHBvc2l0aW9uLnkgKTtcblxuXHRcdFx0dGhpcy5fcm90YXRlRW5kLnNldCggeCwgeSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcm90YXRlRGVsdGEuc3ViVmVjdG9ycyggdGhpcy5fcm90YXRlRW5kLCB0aGlzLl9yb3RhdGVTdGFydCApLm11bHRpcGx5U2NhbGFyKCB0aGlzLnJvdGF0ZVNwZWVkICk7XG5cblx0XHRjb25zdCBlbGVtZW50ID0gdGhpcy5kb21FbGVtZW50O1xuXG5cdFx0dGhpcy5fcm90YXRlTGVmdCggX3R3b1BJICogdGhpcy5fcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7IC8vIHllcywgaGVpZ2h0XG5cblx0XHR0aGlzLl9yb3RhdGVVcCggX3R3b1BJICogdGhpcy5fcm90YXRlRGVsdGEueSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cblx0XHR0aGlzLl9yb3RhdGVTdGFydC5jb3B5KCB0aGlzLl9yb3RhdGVFbmQgKTtcblxuXHR9XG5cblx0X2hhbmRsZVRvdWNoTW92ZVBhbiggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuX3BvaW50ZXJzLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdFx0dGhpcy5fcGFuRW5kLnNldCggZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuX2dldFNlY29uZFBvaW50ZXJQb3NpdGlvbiggZXZlbnQgKTtcblxuXHRcdFx0Y29uc3QgeCA9IDAuNSAqICggZXZlbnQucGFnZVggKyBwb3NpdGlvbi54ICk7XG5cdFx0XHRjb25zdCB5ID0gMC41ICogKCBldmVudC5wYWdlWSArIHBvc2l0aW9uLnkgKTtcblxuXHRcdFx0dGhpcy5fcGFuRW5kLnNldCggeCwgeSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcGFuRGVsdGEuc3ViVmVjdG9ycyggdGhpcy5fcGFuRW5kLCB0aGlzLl9wYW5TdGFydCApLm11bHRpcGx5U2NhbGFyKCB0aGlzLnBhblNwZWVkICk7XG5cblx0XHR0aGlzLl9wYW4oIHRoaXMuX3BhbkRlbHRhLngsIHRoaXMuX3BhbkRlbHRhLnkgKTtcblxuXHRcdHRoaXMuX3BhblN0YXJ0LmNvcHkoIHRoaXMuX3BhbkVuZCApO1xuXG5cdH1cblxuXHRfaGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLl9nZXRTZWNvbmRQb2ludGVyUG9zaXRpb24oIGV2ZW50ICk7XG5cblx0XHRjb25zdCBkeCA9IGV2ZW50LnBhZ2VYIC0gcG9zaXRpb24ueDtcblx0XHRjb25zdCBkeSA9IGV2ZW50LnBhZ2VZIC0gcG9zaXRpb24ueTtcblxuXHRcdGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCBkeCAqIGR4ICsgZHkgKiBkeSApO1xuXG5cdFx0dGhpcy5fZG9sbHlFbmQuc2V0KCAwLCBkaXN0YW5jZSApO1xuXG5cdFx0dGhpcy5fZG9sbHlEZWx0YS5zZXQoIDAsIE1hdGgucG93KCB0aGlzLl9kb2xseUVuZC55IC8gdGhpcy5fZG9sbHlTdGFydC55LCB0aGlzLnpvb21TcGVlZCApICk7XG5cblx0XHR0aGlzLl9kb2xseU91dCggdGhpcy5fZG9sbHlEZWx0YS55ICk7XG5cblx0XHR0aGlzLl9kb2xseVN0YXJ0LmNvcHkoIHRoaXMuX2RvbGx5RW5kICk7XG5cblx0XHRjb25zdCBjZW50ZXJYID0gKCBldmVudC5wYWdlWCArIHBvc2l0aW9uLnggKSAqIDAuNTtcblx0XHRjb25zdCBjZW50ZXJZID0gKCBldmVudC5wYWdlWSArIHBvc2l0aW9uLnkgKSAqIDAuNTtcblxuXHRcdHRoaXMuX3VwZGF0ZVpvb21QYXJhbWV0ZXJzKCBjZW50ZXJYLCBjZW50ZXJZICk7XG5cblx0fVxuXG5cdF9oYW5kbGVUb3VjaE1vdmVEb2xseVBhbiggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSApIHRoaXMuX2hhbmRsZVRvdWNoTW92ZURvbGx5KCBldmVudCApO1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZVBhbiApIHRoaXMuX2hhbmRsZVRvdWNoTW92ZVBhbiggZXZlbnQgKTtcblxuXHR9XG5cblx0X2hhbmRsZVRvdWNoTW92ZURvbGx5Um90YXRlKCBldmVudCApIHtcblxuXHRcdGlmICggdGhpcy5lbmFibGVab29tICkgdGhpcy5faGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlICkgdGhpcy5faGFuZGxlVG91Y2hNb3ZlUm90YXRlKCBldmVudCApO1xuXG5cdH1cblxuXHQvLyBwb2ludGVyc1xuXG5cdF9hZGRQb2ludGVyKCBldmVudCApIHtcblxuXHRcdHRoaXMuX3BvaW50ZXJzLnB1c2goIGV2ZW50LnBvaW50ZXJJZCApO1xuXG5cdH1cblxuXHRfcmVtb3ZlUG9pbnRlciggZXZlbnQgKSB7XG5cblx0XHRkZWxldGUgdGhpcy5fcG9pbnRlclBvc2l0aW9uc1sgZXZlbnQucG9pbnRlcklkIF07XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLl9wb2ludGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdGhpcy5fcG9pbnRlcnNbIGkgXSA9PSBldmVudC5wb2ludGVySWQgKSB7XG5cblx0XHRcdFx0dGhpcy5fcG9pbnRlcnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRfaXNUcmFja2luZ1BvaW50ZXIoIGV2ZW50ICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5fcG9pbnRlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuX3BvaW50ZXJzWyBpIF0gPT0gZXZlbnQucG9pbnRlcklkICkgcmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdF90cmFja1BvaW50ZXIoIGV2ZW50ICkge1xuXG5cdFx0bGV0IHBvc2l0aW9uID0gdGhpcy5fcG9pbnRlclBvc2l0aW9uc1sgZXZlbnQucG9pbnRlcklkIF07XG5cblx0XHRpZiAoIHBvc2l0aW9uID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHBvc2l0aW9uID0gbmV3IFZlY3RvcjIoKTtcblx0XHRcdHRoaXMuX3BvaW50ZXJQb3NpdGlvbnNbIGV2ZW50LnBvaW50ZXJJZCBdID0gcG9zaXRpb247XG5cblx0XHR9XG5cblx0XHRwb3NpdGlvbi5zZXQoIGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSApO1xuXG5cdH1cblxuXHRfZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKCBldmVudCApIHtcblxuXHRcdGNvbnN0IHBvaW50ZXJJZCA9ICggZXZlbnQucG9pbnRlcklkID09PSB0aGlzLl9wb2ludGVyc1sgMCBdICkgPyB0aGlzLl9wb2ludGVyc1sgMSBdIDogdGhpcy5fcG9pbnRlcnNbIDAgXTtcblxuXHRcdHJldHVybiB0aGlzLl9wb2ludGVyUG9zaXRpb25zWyBwb2ludGVySWQgXTtcblxuXHR9XG5cblx0Ly9cblxuXHRfY3VzdG9tV2hlZWxFdmVudCggZXZlbnQgKSB7XG5cblx0XHRjb25zdCBtb2RlID0gZXZlbnQuZGVsdGFNb2RlO1xuXG5cdFx0Ly8gbWluaW1hbCB3aGVlbCBldmVudCBhbHRlcmVkIHRvIG1lZXQgZGVsdGEtem9vbSBkZW1hbmRcblx0XHRjb25zdCBuZXdFdmVudCA9IHtcblx0XHRcdGNsaWVudFg6IGV2ZW50LmNsaWVudFgsXG5cdFx0XHRjbGllbnRZOiBldmVudC5jbGllbnRZLFxuXHRcdFx0ZGVsdGFZOiBldmVudC5kZWx0YVksXG5cdFx0fTtcblxuXHRcdHN3aXRjaCAoIG1vZGUgKSB7XG5cblx0XHRcdGNhc2UgMTogLy8gTElORV9NT0RFXG5cdFx0XHRcdG5ld0V2ZW50LmRlbHRhWSAqPSAxNjtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjogLy8gUEFHRV9NT0RFXG5cdFx0XHRcdG5ld0V2ZW50LmRlbHRhWSAqPSAxMDA7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZGV0ZWN0IGlmIGV2ZW50IHdhcyB0cmlnZ2VyZWQgYnkgcGluY2hpbmdcblx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgJiYgISB0aGlzLl9jb250cm9sQWN0aXZlICkge1xuXG5cdFx0XHRuZXdFdmVudC5kZWx0YVkgKj0gMTA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3RXZlbnQ7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uUG9pbnRlckRvd24oIGV2ZW50ICkge1xuXG5cdGlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRpZiAoIHRoaXMuX3BvaW50ZXJzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdHRoaXMuZG9tRWxlbWVudC5zZXRQb2ludGVyQ2FwdHVyZSggZXZlbnQucG9pbnRlcklkICk7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJtb3ZlJywgdGhpcy5fb25Qb2ludGVyTW92ZSApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAncG9pbnRlcnVwJywgdGhpcy5fb25Qb2ludGVyVXAgKTtcblxuXHR9XG5cblx0Ly9cblxuXHRpZiAoIHRoaXMuX2lzVHJhY2tpbmdQb2ludGVyKCBldmVudCApICkgcmV0dXJuO1xuXG5cdC8vXG5cblx0dGhpcy5fYWRkUG9pbnRlciggZXZlbnQgKTtcblxuXHRpZiAoIGV2ZW50LnBvaW50ZXJUeXBlID09PSAndG91Y2gnICkge1xuXG5cdFx0dGhpcy5fb25Ub3VjaFN0YXJ0KCBldmVudCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLl9vbk1vdXNlRG93biggZXZlbnQgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gb25Qb2ludGVyTW92ZSggZXZlbnQgKSB7XG5cblx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdGlmICggZXZlbnQucG9pbnRlclR5cGUgPT09ICd0b3VjaCcgKSB7XG5cblx0XHR0aGlzLl9vblRvdWNoTW92ZSggZXZlbnQgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGhpcy5fb25Nb3VzZU1vdmUoIGV2ZW50ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uUG9pbnRlclVwKCBldmVudCApIHtcblxuXHR0aGlzLl9yZW1vdmVQb2ludGVyKCBldmVudCApO1xuXG5cdHN3aXRjaCAoIHRoaXMuX3BvaW50ZXJzLmxlbmd0aCApIHtcblxuXHRcdGNhc2UgMDpcblxuXHRcdFx0dGhpcy5kb21FbGVtZW50LnJlbGVhc2VQb2ludGVyQ2FwdHVyZSggZXZlbnQucG9pbnRlcklkICk7XG5cblx0XHRcdHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblBvaW50ZXJNb3ZlICk7XG5cdFx0XHR0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJ1cCcsIHRoaXMuX29uUG9pbnRlclVwICk7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggX2VuZEV2ZW50ICk7XG5cblx0XHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuTk9ORTtcblxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIDE6XG5cblx0XHRcdGNvbnN0IHBvaW50ZXJJZCA9IHRoaXMuX3BvaW50ZXJzWyAwIF07XG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuX3BvaW50ZXJQb3NpdGlvbnNbIHBvaW50ZXJJZCBdO1xuXG5cdFx0XHQvLyBtaW5pbWFsIHBsYWNlaG9sZGVyIGV2ZW50IC0gYWxsb3dzIHN0YXRlIGNvcnJlY3Rpb24gb24gcG9pbnRlci11cFxuXHRcdFx0dGhpcy5fb25Ub3VjaFN0YXJ0KCB7IHBvaW50ZXJJZDogcG9pbnRlcklkLCBwYWdlWDogcG9zaXRpb24ueCwgcGFnZVk6IHBvc2l0aW9uLnkgfSApO1xuXG5cdFx0XHRicmVhaztcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gb25Nb3VzZURvd24oIGV2ZW50ICkge1xuXG5cdGxldCBtb3VzZUFjdGlvbjtcblxuXHRzd2l0Y2ggKCBldmVudC5idXR0b24gKSB7XG5cblx0XHRjYXNlIDA6XG5cblx0XHRcdG1vdXNlQWN0aW9uID0gdGhpcy5tb3VzZUJ1dHRvbnMuTEVGVDtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAxOlxuXG5cdFx0XHRtb3VzZUFjdGlvbiA9IHRoaXMubW91c2VCdXR0b25zLk1JRERMRTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAyOlxuXG5cdFx0XHRtb3VzZUFjdGlvbiA9IHRoaXMubW91c2VCdXR0b25zLlJJR0hUO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXG5cdFx0XHRtb3VzZUFjdGlvbiA9IC0gMTtcblxuXHR9XG5cblx0c3dpdGNoICggbW91c2VBY3Rpb24gKSB7XG5cblx0XHRjYXNlIE1PVVNFLkRPTExZOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdHRoaXMuX2hhbmRsZU1vdXNlRG93bkRvbGx5KCBldmVudCApO1xuXG5cdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLkRPTExZO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgTU9VU0UuUk9UQVRFOlxuXG5cdFx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSApIHtcblxuXHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHR0aGlzLl9oYW5kbGVNb3VzZURvd25QYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5QQU47XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0dGhpcy5faGFuZGxlTW91c2VEb3duUm90YXRlKCBldmVudCApO1xuXG5cdFx0XHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuUk9UQVRFO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBNT1VTRS5QQU46XG5cblx0XHRcdGlmICggZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5ICkge1xuXG5cdFx0XHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdHRoaXMuX2hhbmRsZU1vdXNlRG93blJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLlJPVEFURTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHR0aGlzLl9oYW5kbGVNb3VzZURvd25QYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5QQU47XG5cblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXG5cdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLk5PTkU7XG5cblx0fVxuXG5cdGlmICggdGhpcy5zdGF0ZSAhPT0gX1NUQVRFLk5PTkUgKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9zdGFydEV2ZW50ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uTW91c2VNb3ZlKCBldmVudCApIHtcblxuXHRzd2l0Y2ggKCB0aGlzLnN0YXRlICkge1xuXG5cdFx0Y2FzZSBfU1RBVEUuUk9UQVRFOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0dGhpcy5faGFuZGxlTW91c2VNb3ZlUm90YXRlKCBldmVudCApO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgX1NUQVRFLkRPTExZOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdHRoaXMuX2hhbmRsZU1vdXNlTW92ZURvbGx5KCBldmVudCApO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgX1NUQVRFLlBBTjpcblxuXHRcdFx0aWYgKCB0aGlzLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdHRoaXMuX2hhbmRsZU1vdXNlTW92ZVBhbiggZXZlbnQgKTtcblxuXHRcdFx0YnJlYWs7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uTW91c2VXaGVlbCggZXZlbnQgKSB7XG5cblx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlIHx8IHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgfHwgdGhpcy5zdGF0ZSAhPT0gX1NUQVRFLk5PTkUgKSByZXR1cm47XG5cblx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9zdGFydEV2ZW50ICk7XG5cblx0dGhpcy5faGFuZGxlTW91c2VXaGVlbCggdGhpcy5fY3VzdG9tV2hlZWxFdmVudCggZXZlbnQgKSApO1xuXG5cdHRoaXMuZGlzcGF0Y2hFdmVudCggX2VuZEV2ZW50ICk7XG5cbn1cblxuZnVuY3Rpb24gb25LZXlEb3duKCBldmVudCApIHtcblxuXHRpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0dGhpcy5faGFuZGxlS2V5RG93biggZXZlbnQgKTtcblxufVxuXG5mdW5jdGlvbiBvblRvdWNoU3RhcnQoIGV2ZW50ICkge1xuXG5cdHRoaXMuX3RyYWNrUG9pbnRlciggZXZlbnQgKTtcblxuXHRzd2l0Y2ggKCB0aGlzLl9wb2ludGVycy5sZW5ndGggKSB7XG5cblx0XHRjYXNlIDE6XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMudG91Y2hlcy5PTkUgKSB7XG5cblx0XHRcdFx0Y2FzZSBUT1VDSC5ST1RBVEU6XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdHRoaXMuX2hhbmRsZVRvdWNoU3RhcnRSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLlRPVUNIX1JPVEFURTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgVE9VQ0guUEFOOlxuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHR0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0UGFuKCBldmVudCApO1xuXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5UT1VDSF9QQU47XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5OT05FO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAyOlxuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLnRvdWNoZXMuVFdPICkge1xuXG5cdFx0XHRcdGNhc2UgVE9VQ0guRE9MTFlfUEFOOlxuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVpvb20gPT09IGZhbHNlICYmIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdHRoaXMuX2hhbmRsZVRvdWNoU3RhcnREb2xseVBhbiggZXZlbnQgKTtcblxuXHRcdFx0XHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuVE9VQ0hfRE9MTFlfUEFOO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBUT1VDSC5ET0xMWV9ST1RBVEU6XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgJiYgdGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0dGhpcy5faGFuZGxlVG91Y2hTdGFydERvbGx5Um90YXRlKCBldmVudCApO1xuXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5UT1VDSF9ET0xMWV9ST1RBVEU7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5OT05FO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0ZGVmYXVsdDpcblxuXHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5OT05FO1xuXG5cdH1cblxuXHRpZiAoIHRoaXMuc3RhdGUgIT09IF9TVEFURS5OT05FICkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCBfc3RhcnRFdmVudCApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBvblRvdWNoTW92ZSggZXZlbnQgKSB7XG5cblx0dGhpcy5fdHJhY2tQb2ludGVyKCBldmVudCApO1xuXG5cdHN3aXRjaCAoIHRoaXMuc3RhdGUgKSB7XG5cblx0XHRjYXNlIF9TVEFURS5UT1VDSF9ST1RBVEU6XG5cblx0XHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHR0aGlzLl9oYW5kbGVUb3VjaE1vdmVSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBfU1RBVEUuVE9VQ0hfUEFOOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0dGhpcy5faGFuZGxlVG91Y2hNb3ZlUGFuKCBldmVudCApO1xuXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgX1NUQVRFLlRPVUNIX0RPTExZX1BBTjpcblxuXHRcdFx0aWYgKCB0aGlzLmVuYWJsZVpvb20gPT09IGZhbHNlICYmIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0dGhpcy5faGFuZGxlVG91Y2hNb3ZlRG9sbHlQYW4oIGV2ZW50ICk7XG5cblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBfU1RBVEUuVE9VQ0hfRE9MTFlfUk9UQVRFOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgJiYgdGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHR0aGlzLl9oYW5kbGVUb3VjaE1vdmVEb2xseVJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0dGhpcy51cGRhdGUoKTtcblxuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXG5cdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLk5PTkU7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uQ29udGV4dE1lbnUoIGV2ZW50ICkge1xuXG5cdGlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG59XG5cbmZ1bmN0aW9uIGludGVyY2VwdENvbnRyb2xEb3duKCBldmVudCApIHtcblxuXHRpZiAoIGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnICkge1xuXG5cdFx0dGhpcy5fY29udHJvbEFjdGl2ZSA9IHRydWU7XG5cblx0XHRjb25zdCBkb2N1bWVudCA9IHRoaXMuZG9tRWxlbWVudC5nZXRSb290Tm9kZSgpOyAvLyBvZmZzY3JlZW4gY2FudmFzIGNvbXBhdGliaWxpdHlcblxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdrZXl1cCcsIHRoaXMuX2ludGVyY2VwdENvbnRyb2xVcCwgeyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiB0cnVlIH0gKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gaW50ZXJjZXB0Q29udHJvbFVwKCBldmVudCApIHtcblxuXHRpZiAoIGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnICkge1xuXG5cdFx0dGhpcy5fY29udHJvbEFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgZG9jdW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQuZ2V0Um9vdE5vZGUoKTsgLy8gb2Zmc2NyZWVuIGNhbnZhcyBjb21wYXRpYmlsaXR5XG5cblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5dXAnLCB0aGlzLl9pbnRlcmNlcHRDb250cm9sVXAsIHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogdHJ1ZSB9ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IE9yYml0Q29udHJvbHMgfTtcbiJdLCJuYW1lcyI6WyJDb250cm9scyIsIk1PVVNFIiwiUXVhdGVybmlvbiIsIlNwaGVyaWNhbCIsIlRPVUNIIiwiVmVjdG9yMiIsIlZlY3RvcjMiLCJQbGFuZSIsIlJheSIsIk1hdGhVdGlscyIsIl9jaGFuZ2VFdmVudCIsInR5cGUiLCJfc3RhcnRFdmVudCIsIl9lbmRFdmVudCIsIl9yYXkiLCJfcGxhbmUiLCJfVElMVF9MSU1JVCIsIk1hdGgiLCJjb3MiLCJERUcyUkFEIiwiX3YiLCJfdHdvUEkiLCJQSSIsIl9TVEFURSIsIk5PTkUiLCJST1RBVEUiLCJET0xMWSIsIlBBTiIsIlRPVUNIX1JPVEFURSIsIlRPVUNIX1BBTiIsIlRPVUNIX0RPTExZX1BBTiIsIlRPVUNIX0RPTExZX1JPVEFURSIsIl9FUFMiLCJPcmJpdENvbnRyb2xzIiwiY29ubmVjdCIsImVsZW1lbnQiLCJkb21FbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9vblBvaW50ZXJEb3duIiwiX29uUG9pbnRlclVwIiwiX29uQ29udGV4dE1lbnUiLCJfb25Nb3VzZVdoZWVsIiwicGFzc2l2ZSIsImRvY3VtZW50IiwiZ2V0Um9vdE5vZGUiLCJfaW50ZXJjZXB0Q29udHJvbERvd24iLCJjYXB0dXJlIiwic3R5bGUiLCJ0b3VjaEFjdGlvbiIsImRpc2Nvbm5lY3QiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX29uUG9pbnRlck1vdmUiLCJzdG9wTGlzdGVuVG9LZXlFdmVudHMiLCJkaXNwb3NlIiwiZ2V0UG9sYXJBbmdsZSIsIl9zcGhlcmljYWwiLCJwaGkiLCJnZXRBemltdXRoYWxBbmdsZSIsInRoZXRhIiwiZ2V0RGlzdGFuY2UiLCJvYmplY3QiLCJwb3NpdGlvbiIsImRpc3RhbmNlVG8iLCJ0YXJnZXQiLCJsaXN0ZW5Ub0tleUV2ZW50cyIsIl9vbktleURvd24iLCJfZG9tRWxlbWVudEtleUV2ZW50cyIsInNhdmVTdGF0ZSIsInRhcmdldDAiLCJjb3B5IiwicG9zaXRpb24wIiwiem9vbTAiLCJ6b29tIiwicmVzZXQiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiZGlzcGF0Y2hFdmVudCIsInVwZGF0ZSIsInN0YXRlIiwiZGVsdGFUaW1lIiwic3ViIiwiYXBwbHlRdWF0ZXJuaW9uIiwiX3F1YXQiLCJzZXRGcm9tVmVjdG9yMyIsImF1dG9Sb3RhdGUiLCJfcm90YXRlTGVmdCIsIl9nZXRBdXRvUm90YXRpb25BbmdsZSIsImVuYWJsZURhbXBpbmciLCJfc3BoZXJpY2FsRGVsdGEiLCJkYW1waW5nRmFjdG9yIiwibWluIiwibWluQXppbXV0aEFuZ2xlIiwibWF4IiwibWF4QXppbXV0aEFuZ2xlIiwiaXNGaW5pdGUiLCJtaW5Qb2xhckFuZ2xlIiwibWF4UG9sYXJBbmdsZSIsIm1ha2VTYWZlIiwiYWRkU2NhbGVkVmVjdG9yIiwiX3Bhbk9mZnNldCIsImFkZCIsImN1cnNvciIsImNsYW1wTGVuZ3RoIiwibWluVGFyZ2V0UmFkaXVzIiwibWF4VGFyZ2V0UmFkaXVzIiwiem9vbUNoYW5nZWQiLCJ6b29tVG9DdXJzb3IiLCJfcGVyZm9ybUN1cnNvclpvb20iLCJpc09ydGhvZ3JhcGhpY0NhbWVyYSIsInJhZGl1cyIsIl9jbGFtcERpc3RhbmNlIiwicHJldlJhZGl1cyIsIl9zY2FsZSIsInNldEZyb21TcGhlcmljYWwiLCJfcXVhdEludmVyc2UiLCJsb29rQXQiLCJtdWx0aXBseVNjYWxhciIsInNldCIsIm5ld1JhZGl1cyIsImlzUGVyc3BlY3RpdmVDYW1lcmEiLCJsZW5ndGgiLCJyYWRpdXNEZWx0YSIsIl9kb2xseURpcmVjdGlvbiIsInVwZGF0ZU1hdHJpeFdvcmxkIiwibW91c2VCZWZvcmUiLCJfbW91c2UiLCJ4IiwieSIsInVucHJvamVjdCIsInByZXZab29tIiwibWluWm9vbSIsIm1heFpvb20iLCJtb3VzZUFmdGVyIiwiY29uc29sZSIsIndhcm4iLCJzY3JlZW5TcGFjZVBhbm5pbmciLCJ0cmFuc2Zvcm1EaXJlY3Rpb24iLCJtYXRyaXgiLCJvcmlnaW4iLCJkaXJlY3Rpb24iLCJhYnMiLCJ1cCIsImRvdCIsInNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50IiwiaW50ZXJzZWN0UGxhbmUiLCJfbGFzdFBvc2l0aW9uIiwiZGlzdGFuY2VUb1NxdWFyZWQiLCJfbGFzdFF1YXRlcm5pb24iLCJxdWF0ZXJuaW9uIiwiX2xhc3RUYXJnZXRQb3NpdGlvbiIsImF1dG9Sb3RhdGVTcGVlZCIsIl9nZXRab29tU2NhbGUiLCJkZWx0YSIsIm5vcm1hbGl6ZWREZWx0YSIsInBvdyIsInpvb21TcGVlZCIsImFuZ2xlIiwiX3JvdGF0ZVVwIiwiX3BhbkxlZnQiLCJkaXN0YW5jZSIsIm9iamVjdE1hdHJpeCIsInNldEZyb21NYXRyaXhDb2x1bW4iLCJfcGFuVXAiLCJjcm9zc1ZlY3RvcnMiLCJfcGFuIiwiZGVsdGFYIiwiZGVsdGFZIiwidGFyZ2V0RGlzdGFuY2UiLCJ0YW4iLCJmb3YiLCJjbGllbnRIZWlnaHQiLCJyaWdodCIsImxlZnQiLCJjbGllbnRXaWR0aCIsInRvcCIsImJvdHRvbSIsImVuYWJsZVBhbiIsIl9kb2xseU91dCIsImRvbGx5U2NhbGUiLCJlbmFibGVab29tIiwiX2RvbGx5SW4iLCJfdXBkYXRlWm9vbVBhcmFtZXRlcnMiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZHgiLCJkeSIsInciLCJ3aWR0aCIsImgiLCJoZWlnaHQiLCJub3JtYWxpemUiLCJkaXN0IiwibWluRGlzdGFuY2UiLCJtYXhEaXN0YW5jZSIsIl9oYW5kbGVNb3VzZURvd25Sb3RhdGUiLCJldmVudCIsIl9yb3RhdGVTdGFydCIsImNsaWVudFgiLCJjbGllbnRZIiwiX2hhbmRsZU1vdXNlRG93bkRvbGx5IiwiX2RvbGx5U3RhcnQiLCJfaGFuZGxlTW91c2VEb3duUGFuIiwiX3BhblN0YXJ0IiwiX2hhbmRsZU1vdXNlTW92ZVJvdGF0ZSIsIl9yb3RhdGVFbmQiLCJfcm90YXRlRGVsdGEiLCJzdWJWZWN0b3JzIiwicm90YXRlU3BlZWQiLCJfaGFuZGxlTW91c2VNb3ZlRG9sbHkiLCJfZG9sbHlFbmQiLCJfZG9sbHlEZWx0YSIsIl9oYW5kbGVNb3VzZU1vdmVQYW4iLCJfcGFuRW5kIiwiX3BhbkRlbHRhIiwicGFuU3BlZWQiLCJfaGFuZGxlTW91c2VXaGVlbCIsIl9oYW5kbGVLZXlEb3duIiwibmVlZHNVcGRhdGUiLCJjb2RlIiwia2V5cyIsIlVQIiwiY3RybEtleSIsIm1ldGFLZXkiLCJzaGlmdEtleSIsImVuYWJsZVJvdGF0ZSIsImtleVJvdGF0ZVNwZWVkIiwia2V5UGFuU3BlZWQiLCJCT1RUT00iLCJMRUZUIiwiUklHSFQiLCJwcmV2ZW50RGVmYXVsdCIsIl9oYW5kbGVUb3VjaFN0YXJ0Um90YXRlIiwiX3BvaW50ZXJzIiwicGFnZVgiLCJwYWdlWSIsIl9nZXRTZWNvbmRQb2ludGVyUG9zaXRpb24iLCJfaGFuZGxlVG91Y2hTdGFydFBhbiIsIl9oYW5kbGVUb3VjaFN0YXJ0RG9sbHkiLCJzcXJ0IiwiX2hhbmRsZVRvdWNoU3RhcnREb2xseVBhbiIsIl9oYW5kbGVUb3VjaFN0YXJ0RG9sbHlSb3RhdGUiLCJfaGFuZGxlVG91Y2hNb3ZlUm90YXRlIiwiX2hhbmRsZVRvdWNoTW92ZVBhbiIsIl9oYW5kbGVUb3VjaE1vdmVEb2xseSIsImNlbnRlclgiLCJjZW50ZXJZIiwiX2hhbmRsZVRvdWNoTW92ZURvbGx5UGFuIiwiX2hhbmRsZVRvdWNoTW92ZURvbGx5Um90YXRlIiwiX2FkZFBvaW50ZXIiLCJwdXNoIiwicG9pbnRlcklkIiwiX3JlbW92ZVBvaW50ZXIiLCJfcG9pbnRlclBvc2l0aW9ucyIsImkiLCJzcGxpY2UiLCJfaXNUcmFja2luZ1BvaW50ZXIiLCJfdHJhY2tQb2ludGVyIiwidW5kZWZpbmVkIiwiX2N1c3RvbVdoZWVsRXZlbnQiLCJtb2RlIiwiZGVsdGFNb2RlIiwibmV3RXZlbnQiLCJfY29udHJvbEFjdGl2ZSIsImNvbnN0cnVjdG9yIiwiSW5maW5pdHkiLCJtb3VzZUJ1dHRvbnMiLCJNSURETEUiLCJ0b3VjaGVzIiwiT05FIiwiVFdPIiwiRE9MTFlfUEFOIiwiY2xvbmUiLCJzZXRGcm9tVW5pdFZlY3RvcnMiLCJpbnZlcnQiLCJvblBvaW50ZXJNb3ZlIiwiYmluZCIsIm9uUG9pbnRlckRvd24iLCJvblBvaW50ZXJVcCIsIm9uQ29udGV4dE1lbnUiLCJvbk1vdXNlV2hlZWwiLCJvbktleURvd24iLCJfb25Ub3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0IiwiX29uVG91Y2hNb3ZlIiwib25Ub3VjaE1vdmUiLCJfb25Nb3VzZURvd24iLCJvbk1vdXNlRG93biIsIl9vbk1vdXNlTW92ZSIsIm9uTW91c2VNb3ZlIiwiaW50ZXJjZXB0Q29udHJvbERvd24iLCJfaW50ZXJjZXB0Q29udHJvbFVwIiwiaW50ZXJjZXB0Q29udHJvbFVwIiwiZW5hYmxlZCIsInNldFBvaW50ZXJDYXB0dXJlIiwicG9pbnRlclR5cGUiLCJyZWxlYXNlUG9pbnRlckNhcHR1cmUiLCJtb3VzZUFjdGlvbiIsImJ1dHRvbiIsIkRPTExZX1JPVEFURSIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\n"));

/***/ })

});